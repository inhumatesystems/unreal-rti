// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Logs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Logs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Logs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Logs_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Logs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Logs_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Log;
class LogDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LogDefaultTypeInternal _Log_default_instance_;
class LogMark;
class LogMarkDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LogMarkDefaultTypeInternal _LogMark_default_instance_;
class LogPause;
class LogPauseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LogPauseDefaultTypeInternal _LogPause_default_instance_;
class LogTimeScale;
class LogTimeScaleDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LogTimeScaleDefaultTypeInternal _LogTimeScale_default_instance_;
class Log_LaunchParameterValuesEntry_DoNotUse;
class Log_LaunchParameterValuesEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Log_LaunchParameterValuesEntry_DoNotUseDefaultTypeInternal _Log_LaunchParameterValuesEntry_DoNotUse_default_instance_;
class Log_ScenarioParameterValuesEntry_DoNotUse;
class Log_ScenarioParameterValuesEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Log_ScenarioParameterValuesEntry_DoNotUseDefaultTypeInternal _Log_ScenarioParameterValuesEntry_DoNotUse_default_instance_;
class Logs;
class LogsDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LogsDefaultTypeInternal _Logs_default_instance_;
class Logs_ListRequest;
class Logs_ListRequestDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Logs_ListRequestDefaultTypeInternal _Logs_ListRequest_default_instance_;
class Logs_SearchRequest;
class Logs_SearchRequestDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Logs_SearchRequestDefaultTypeInternal _Logs_SearchRequest_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Log* Arena::CreateMaybeMessage<::inhumate::rti::proto::Log>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::LogMark* Arena::CreateMaybeMessage<::inhumate::rti::proto::LogMark>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::LogPause* Arena::CreateMaybeMessage<::inhumate::rti::proto::LogPause>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::LogTimeScale* Arena::CreateMaybeMessage<::inhumate::rti::proto::LogTimeScale>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Log_LaunchParameterValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::Log_LaunchParameterValuesEntry_DoNotUse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Log_ScenarioParameterValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::Log_ScenarioParameterValuesEntry_DoNotUse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Logs* Arena::CreateMaybeMessage<::inhumate::rti::proto::Logs>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Logs_ListRequest* Arena::CreateMaybeMessage<::inhumate::rti::proto::Logs_ListRequest>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Logs_SearchRequest* Arena::CreateMaybeMessage<::inhumate::rti::proto::Logs_SearchRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Logs_ListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Logs.ListRequest) */ {
 public:
  Logs_ListRequest();
  virtual ~Logs_ListRequest();

  Logs_ListRequest(const Logs_ListRequest& from);
  Logs_ListRequest(Logs_ListRequest&& from) noexcept
    : Logs_ListRequest() {
    *this = ::std::move(from);
  }

  inline Logs_ListRequest& operator=(const Logs_ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logs_ListRequest& operator=(Logs_ListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logs_ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logs_ListRequest* internal_default_instance() {
    return reinterpret_cast<const Logs_ListRequest*>(
               &_Logs_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Logs_ListRequest& a, Logs_ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Logs_ListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logs_ListRequest* New() const final {
    return CreateMaybeMessage<Logs_ListRequest>(nullptr);
  }

  Logs_ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logs_ListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logs_ListRequest& from);
  void MergeFrom(const Logs_ListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logs_ListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Logs.ListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // int32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Logs.ListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logs_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Logs_SearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Logs.SearchRequest) */ {
 public:
  Logs_SearchRequest();
  virtual ~Logs_SearchRequest();

  Logs_SearchRequest(const Logs_SearchRequest& from);
  Logs_SearchRequest(Logs_SearchRequest&& from) noexcept
    : Logs_SearchRequest() {
    *this = ::std::move(from);
  }

  inline Logs_SearchRequest& operator=(const Logs_SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logs_SearchRequest& operator=(Logs_SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logs_SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logs_SearchRequest* internal_default_instance() {
    return reinterpret_cast<const Logs_SearchRequest*>(
               &_Logs_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Logs_SearchRequest& a, Logs_SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Logs_SearchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logs_SearchRequest* New() const final {
    return CreateMaybeMessage<Logs_SearchRequest>(nullptr);
  }

  Logs_SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logs_SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logs_SearchRequest& from);
  void MergeFrom(const Logs_SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logs_SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Logs.SearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .google.protobuf.Timestamp from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const PROTOBUF_NAMESPACE_ID::Timestamp& from() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_from();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_from();
  void set_allocated_from(PROTOBUF_NAMESPACE_ID::Timestamp* from);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_from() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_from();
  public:

  // .google.protobuf.Timestamp to = 3;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const PROTOBUF_NAMESPACE_ID::Timestamp& to() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_to();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_to();
  void set_allocated_to(PROTOBUF_NAMESPACE_ID::Timestamp* to);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_to() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_to();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Logs.SearchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  PROTOBUF_NAMESPACE_ID::Timestamp* from_;
  PROTOBUF_NAMESPACE_ID::Timestamp* to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logs_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Logs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Logs) */ {
 public:
  Logs();
  virtual ~Logs();

  Logs(const Logs& from);
  Logs(Logs&& from) noexcept
    : Logs() {
    *this = ::std::move(from);
  }

  inline Logs& operator=(const Logs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logs& operator=(Logs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logs& default_instance();

  enum WhichCase {
    kList = 1,
    kSearch = 2,
    kLog = 3,
    kNoLogs = 4,
    kDeleteLog = 5,
    kLockLog = 6,
    kUnlockLog = 7,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logs* internal_default_instance() {
    return reinterpret_cast<const Logs*>(
               &_Logs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Logs& a, Logs& b) {
    a.Swap(&b);
  }
  inline void Swap(Logs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logs* New() const final {
    return CreateMaybeMessage<Logs>(nullptr);
  }

  Logs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logs& from);
  void MergeFrom(const Logs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Logs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Logs_ListRequest ListRequest;
  typedef Logs_SearchRequest SearchRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kSearchFieldNumber = 2,
    kLogFieldNumber = 3,
    kNoLogsFieldNumber = 4,
    kDeleteLogFieldNumber = 5,
    kLockLogFieldNumber = 6,
    kUnlockLogFieldNumber = 7,
  };
  // .inhumate.rti.proto.Logs.ListRequest list = 1;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::inhumate::rti::proto::Logs_ListRequest& list() const;
  ::inhumate::rti::proto::Logs_ListRequest* release_list();
  ::inhumate::rti::proto::Logs_ListRequest* mutable_list();
  void set_allocated_list(::inhumate::rti::proto::Logs_ListRequest* list);
  private:
  const ::inhumate::rti::proto::Logs_ListRequest& _internal_list() const;
  ::inhumate::rti::proto::Logs_ListRequest* _internal_mutable_list();
  public:

  // .inhumate.rti.proto.Logs.SearchRequest search = 2;
  bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  void clear_search();
  const ::inhumate::rti::proto::Logs_SearchRequest& search() const;
  ::inhumate::rti::proto::Logs_SearchRequest* release_search();
  ::inhumate::rti::proto::Logs_SearchRequest* mutable_search();
  void set_allocated_search(::inhumate::rti::proto::Logs_SearchRequest* search);
  private:
  const ::inhumate::rti::proto::Logs_SearchRequest& _internal_search() const;
  ::inhumate::rti::proto::Logs_SearchRequest* _internal_mutable_search();
  public:

  // .inhumate.rti.proto.Log log = 3;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::inhumate::rti::proto::Log& log() const;
  ::inhumate::rti::proto::Log* release_log();
  ::inhumate::rti::proto::Log* mutable_log();
  void set_allocated_log(::inhumate::rti::proto::Log* log);
  private:
  const ::inhumate::rti::proto::Log& _internal_log() const;
  ::inhumate::rti::proto::Log* _internal_mutable_log();
  public:

  // .google.protobuf.Empty no_logs = 4;
  bool has_no_logs() const;
  private:
  bool _internal_has_no_logs() const;
  public:
  void clear_no_logs();
  const PROTOBUF_NAMESPACE_ID::Empty& no_logs() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_no_logs();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_no_logs();
  void set_allocated_no_logs(PROTOBUF_NAMESPACE_ID::Empty* no_logs);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_no_logs() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_no_logs();
  public:

  // string delete_log = 5;
  private:
  bool _internal_has_delete_log() const;
  public:
  void clear_delete_log();
  const std::string& delete_log() const;
  void set_delete_log(const std::string& value);
  void set_delete_log(std::string&& value);
  void set_delete_log(const char* value);
  void set_delete_log(const char* value, size_t size);
  std::string* mutable_delete_log();
  std::string* release_delete_log();
  void set_allocated_delete_log(std::string* delete_log);
  private:
  const std::string& _internal_delete_log() const;
  void _internal_set_delete_log(const std::string& value);
  std::string* _internal_mutable_delete_log();
  public:

  // string lock_log = 6;
  private:
  bool _internal_has_lock_log() const;
  public:
  void clear_lock_log();
  const std::string& lock_log() const;
  void set_lock_log(const std::string& value);
  void set_lock_log(std::string&& value);
  void set_lock_log(const char* value);
  void set_lock_log(const char* value, size_t size);
  std::string* mutable_lock_log();
  std::string* release_lock_log();
  void set_allocated_lock_log(std::string* lock_log);
  private:
  const std::string& _internal_lock_log() const;
  void _internal_set_lock_log(const std::string& value);
  std::string* _internal_mutable_lock_log();
  public:

  // string unlock_log = 7;
  private:
  bool _internal_has_unlock_log() const;
  public:
  void clear_unlock_log();
  const std::string& unlock_log() const;
  void set_unlock_log(const std::string& value);
  void set_unlock_log(std::string&& value);
  void set_unlock_log(const char* value);
  void set_unlock_log(const char* value, size_t size);
  std::string* mutable_unlock_log();
  std::string* release_unlock_log();
  void set_allocated_unlock_log(std::string* unlock_log);
  private:
  const std::string& _internal_unlock_log() const;
  void _internal_set_unlock_log(const std::string& value);
  std::string* _internal_mutable_unlock_log();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Logs)
 private:
  class _Internal;
  void set_has_list();
  void set_has_search();
  void set_has_log();
  void set_has_no_logs();
  void set_has_delete_log();
  void set_has_lock_log();
  void set_has_unlock_log();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    ::inhumate::rti::proto::Logs_ListRequest* list_;
    ::inhumate::rti::proto::Logs_SearchRequest* search_;
    ::inhumate::rti::proto::Log* log_;
    PROTOBUF_NAMESPACE_ID::Empty* no_logs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delete_log_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lock_log_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unlock_log_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Logs_2eproto;
};
// -------------------------------------------------------------------

class Log_LaunchParameterValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Log_LaunchParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Log_LaunchParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Log_LaunchParameterValuesEntry_DoNotUse();
  Log_LaunchParameterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Log_LaunchParameterValuesEntry_DoNotUse& other);
  static const Log_LaunchParameterValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Log_LaunchParameterValuesEntry_DoNotUse*>(&_Log_LaunchParameterValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.Log.LaunchParameterValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.Log.LaunchParameterValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class Log_ScenarioParameterValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Log_ScenarioParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Log_ScenarioParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Log_ScenarioParameterValuesEntry_DoNotUse();
  Log_ScenarioParameterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Log_ScenarioParameterValuesEntry_DoNotUse& other);
  static const Log_ScenarioParameterValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Log_ScenarioParameterValuesEntry_DoNotUse*>(&_Log_ScenarioParameterValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.Log.ScenarioParameterValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.Log.ScenarioParameterValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Log :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Log) */ {
 public:
  Log();
  virtual ~Log();

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Log* New() const final {
    return CreateMaybeMessage<Log>(nullptr);
  }

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Log";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kApplicationsFieldNumber = 14,
    kUsersFieldNumber = 15,
    kParticipantsFieldNumber = 16,
    kLaunchParameterValuesFieldNumber = 17,
    kScenarioParameterValuesFieldNumber = 18,
    kMarksFieldNumber = 21,
    kPausesFieldNumber = 22,
    kTimeScalesFieldNumber = 23,
    kIdFieldNumber = 1,
    kScenarioNameFieldNumber = 3,
    kTitleFieldNumber = 6,
    kLaunchConfigurationFieldNumber = 13,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
    kLengthFieldNumber = 2,
    kMessageCountFieldNumber = 7,
    kMessageBytesFieldNumber = 8,
    kMeasurementCountFieldNumber = 11,
    kMeasurementBytesFieldNumber = 12,
    kMeasureCountFieldNumber = 10,
    kAvmediaCountFieldNumber = 19,
    kAvmediaBytesFieldNumber = 20,
    kRecordingDisabledFieldNumber = 9,
    kPersistentFieldNumber = 24,
    kDeletableFieldNumber = 25,
    kLockedFieldNumber = 26,
  };
  // repeated string applications = 14;
  int applications_size() const;
  private:
  int _internal_applications_size() const;
  public:
  void clear_applications();
  const std::string& applications(int index) const;
  std::string* mutable_applications(int index);
  void set_applications(int index, const std::string& value);
  void set_applications(int index, std::string&& value);
  void set_applications(int index, const char* value);
  void set_applications(int index, const char* value, size_t size);
  std::string* add_applications();
  void add_applications(const std::string& value);
  void add_applications(std::string&& value);
  void add_applications(const char* value);
  void add_applications(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& applications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_applications();
  private:
  const std::string& _internal_applications(int index) const;
  std::string* _internal_add_applications();
  public:

  // repeated string users = 15;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  const std::string& users(int index) const;
  std::string* mutable_users(int index);
  void set_users(int index, const std::string& value);
  void set_users(int index, std::string&& value);
  void set_users(int index, const char* value);
  void set_users(int index, const char* value, size_t size);
  std::string* add_users();
  void add_users(const std::string& value);
  void add_users(std::string&& value);
  void add_users(const char* value);
  void add_users(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_users();
  private:
  const std::string& _internal_users(int index) const;
  std::string* _internal_add_users();
  public:

  // repeated string participants = 16;
  int participants_size() const;
  private:
  int _internal_participants_size() const;
  public:
  void clear_participants();
  const std::string& participants(int index) const;
  std::string* mutable_participants(int index);
  void set_participants(int index, const std::string& value);
  void set_participants(int index, std::string&& value);
  void set_participants(int index, const char* value);
  void set_participants(int index, const char* value, size_t size);
  std::string* add_participants();
  void add_participants(const std::string& value);
  void add_participants(std::string&& value);
  void add_participants(const char* value);
  void add_participants(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& participants() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_participants();
  private:
  const std::string& _internal_participants(int index) const;
  std::string* _internal_add_participants();
  public:

  // map<string, string> launch_parameter_values = 17;
  int launch_parameter_values_size() const;
  private:
  int _internal_launch_parameter_values_size() const;
  public:
  void clear_launch_parameter_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_launch_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_launch_parameter_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      launch_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_launch_parameter_values();

  // map<string, string> scenario_parameter_values = 18;
  int scenario_parameter_values_size() const;
  private:
  int _internal_scenario_parameter_values_size() const;
  public:
  void clear_scenario_parameter_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_scenario_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_scenario_parameter_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      scenario_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_scenario_parameter_values();

  // repeated .inhumate.rti.proto.LogMark marks = 21;
  int marks_size() const;
  private:
  int _internal_marks_size() const;
  public:
  void clear_marks();
  ::inhumate::rti::proto::LogMark* mutable_marks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogMark >*
      mutable_marks();
  private:
  const ::inhumate::rti::proto::LogMark& _internal_marks(int index) const;
  ::inhumate::rti::proto::LogMark* _internal_add_marks();
  public:
  const ::inhumate::rti::proto::LogMark& marks(int index) const;
  ::inhumate::rti::proto::LogMark* add_marks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogMark >&
      marks() const;

  // repeated .inhumate.rti.proto.LogPause pauses = 22;
  int pauses_size() const;
  private:
  int _internal_pauses_size() const;
  public:
  void clear_pauses();
  ::inhumate::rti::proto::LogPause* mutable_pauses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogPause >*
      mutable_pauses();
  private:
  const ::inhumate::rti::proto::LogPause& _internal_pauses(int index) const;
  ::inhumate::rti::proto::LogPause* _internal_add_pauses();
  public:
  const ::inhumate::rti::proto::LogPause& pauses(int index) const;
  ::inhumate::rti::proto::LogPause* add_pauses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogPause >&
      pauses() const;

  // repeated .inhumate.rti.proto.LogTimeScale time_scales = 23;
  int time_scales_size() const;
  private:
  int _internal_time_scales_size() const;
  public:
  void clear_time_scales();
  ::inhumate::rti::proto::LogTimeScale* mutable_time_scales(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogTimeScale >*
      mutable_time_scales();
  private:
  const ::inhumate::rti::proto::LogTimeScale& _internal_time_scales(int index) const;
  ::inhumate::rti::proto::LogTimeScale* _internal_add_time_scales();
  public:
  const ::inhumate::rti::proto::LogTimeScale& time_scales(int index) const;
  ::inhumate::rti::proto::LogTimeScale* add_time_scales();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogTimeScale >&
      time_scales() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string scenario_name = 3;
  void clear_scenario_name();
  const std::string& scenario_name() const;
  void set_scenario_name(const std::string& value);
  void set_scenario_name(std::string&& value);
  void set_scenario_name(const char* value);
  void set_scenario_name(const char* value, size_t size);
  std::string* mutable_scenario_name();
  std::string* release_scenario_name();
  void set_allocated_scenario_name(std::string* scenario_name);
  private:
  const std::string& _internal_scenario_name() const;
  void _internal_set_scenario_name(const std::string& value);
  std::string* _internal_mutable_scenario_name();
  public:

  // string title = 6;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string launch_configuration = 13;
  void clear_launch_configuration();
  const std::string& launch_configuration() const;
  void set_launch_configuration(const std::string& value);
  void set_launch_configuration(std::string&& value);
  void set_launch_configuration(const char* value);
  void set_launch_configuration(const char* value, size_t size);
  std::string* mutable_launch_configuration();
  std::string* release_launch_configuration();
  void set_allocated_launch_configuration(std::string* launch_configuration);
  private:
  const std::string& _internal_launch_configuration() const;
  void _internal_set_launch_configuration(const std::string& value);
  std::string* _internal_mutable_launch_configuration();
  public:

  // .google.protobuf.Timestamp start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:

  // double length = 2;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // int64 message_count = 7;
  void clear_message_count();
  ::PROTOBUF_NAMESPACE_ID::int64 message_count() const;
  void set_message_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_count() const;
  void _internal_set_message_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 message_bytes = 8;
  void clear_message_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 message_bytes() const;
  void set_message_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_bytes() const;
  void _internal_set_message_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 measurement_count = 11;
  void clear_measurement_count();
  ::PROTOBUF_NAMESPACE_ID::int64 measurement_count() const;
  void set_measurement_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_measurement_count() const;
  void _internal_set_measurement_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 measurement_bytes = 12;
  void clear_measurement_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 measurement_bytes() const;
  void set_measurement_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_measurement_bytes() const;
  void _internal_set_measurement_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 measure_count = 10;
  void clear_measure_count();
  ::PROTOBUF_NAMESPACE_ID::int32 measure_count() const;
  void set_measure_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_measure_count() const;
  void _internal_set_measure_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avmedia_count = 19;
  void clear_avmedia_count();
  ::PROTOBUF_NAMESPACE_ID::int32 avmedia_count() const;
  void set_avmedia_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avmedia_count() const;
  void _internal_set_avmedia_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 avmedia_bytes = 20;
  void clear_avmedia_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 avmedia_bytes() const;
  void set_avmedia_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_avmedia_bytes() const;
  void _internal_set_avmedia_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool recording_disabled = 9;
  void clear_recording_disabled();
  bool recording_disabled() const;
  void set_recording_disabled(bool value);
  private:
  bool _internal_recording_disabled() const;
  void _internal_set_recording_disabled(bool value);
  public:

  // bool persistent = 24;
  void clear_persistent();
  bool persistent() const;
  void set_persistent(bool value);
  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);
  public:

  // bool deletable = 25;
  void clear_deletable();
  bool deletable() const;
  void set_deletable(bool value);
  private:
  bool _internal_deletable() const;
  void _internal_set_deletable(bool value);
  public:

  // bool locked = 26;
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Log)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> applications_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> participants_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Log_LaunchParameterValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > launch_parameter_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Log_ScenarioParameterValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > scenario_parameter_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogMark > marks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogPause > pauses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogTimeScale > time_scales_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_configuration_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  double length_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 measurement_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 measurement_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 measure_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 avmedia_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 avmedia_bytes_;
  bool recording_disabled_;
  bool persistent_;
  bool deletable_;
  bool locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logs_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT LogMark :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.LogMark) */ {
 public:
  LogMark();
  virtual ~LogMark();

  LogMark(const LogMark& from);
  LogMark(LogMark&& from) noexcept
    : LogMark() {
    *this = ::std::move(from);
  }

  inline LogMark& operator=(const LogMark& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMark& operator=(LogMark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogMark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMark* internal_default_instance() {
    return reinterpret_cast<const LogMark*>(
               &_LogMark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogMark& a, LogMark& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMark* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMark* New() const final {
    return CreateMaybeMessage<LogMark>(nullptr);
  }

  LogMark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogMark& from);
  void MergeFrom(const LogMark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.LogMark";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTitleFieldNumber = 3,
    kTimeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // double time = 2;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.LogMark)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logs_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT LogPause :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.LogPause) */ {
 public:
  LogPause();
  virtual ~LogPause();

  LogPause(const LogPause& from);
  LogPause(LogPause&& from) noexcept
    : LogPause() {
    *this = ::std::move(from);
  }

  inline LogPause& operator=(const LogPause& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogPause& operator=(LogPause&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogPause& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogPause* internal_default_instance() {
    return reinterpret_cast<const LogPause*>(
               &_LogPause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LogPause& a, LogPause& b) {
    a.Swap(&b);
  }
  inline void Swap(LogPause* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogPause* New() const final {
    return CreateMaybeMessage<LogPause>(nullptr);
  }

  LogPause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogPause>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogPause& from);
  void MergeFrom(const LogPause& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogPause* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.LogPause";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // double duration = 2;
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.LogPause)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  double duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logs_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT LogTimeScale :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.LogTimeScale) */ {
 public:
  LogTimeScale();
  virtual ~LogTimeScale();

  LogTimeScale(const LogTimeScale& from);
  LogTimeScale(LogTimeScale&& from) noexcept
    : LogTimeScale() {
    *this = ::std::move(from);
  }

  inline LogTimeScale& operator=(const LogTimeScale& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogTimeScale& operator=(LogTimeScale&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogTimeScale& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogTimeScale* internal_default_instance() {
    return reinterpret_cast<const LogTimeScale*>(
               &_LogTimeScale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LogTimeScale& a, LogTimeScale& b) {
    a.Swap(&b);
  }
  inline void Swap(LogTimeScale* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogTimeScale* New() const final {
    return CreateMaybeMessage<LogTimeScale>(nullptr);
  }

  LogTimeScale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogTimeScale>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogTimeScale& from);
  void MergeFrom(const LogTimeScale& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogTimeScale* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.LogTimeScale";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logs_2eproto);
    return ::descriptor_table_Logs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kTimeScaleFieldNumber = 2,
  };
  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // double time_scale = 2;
  void clear_time_scale();
  double time_scale() const;
  void set_time_scale(double value);
  private:
  double _internal_time_scale() const;
  void _internal_set_time_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.LogTimeScale)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  double time_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Logs_ListRequest

// int32 limit = 1;
inline void Logs_ListRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Logs_ListRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Logs_ListRequest::limit() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.ListRequest.limit)
  return _internal_limit();
}
inline void Logs_ListRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void Logs_ListRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.ListRequest.limit)
}

// int32 offset = 2;
inline void Logs_ListRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Logs_ListRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Logs_ListRequest::offset() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.ListRequest.offset)
  return _internal_offset();
}
inline void Logs_ListRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void Logs_ListRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.ListRequest.offset)
}

// -------------------------------------------------------------------

// Logs_SearchRequest

// string text = 1;
inline void Logs_SearchRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Logs_SearchRequest::text() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.SearchRequest.text)
  return _internal_text();
}
inline void Logs_SearchRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.SearchRequest.text)
}
inline std::string* Logs_SearchRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.SearchRequest.text)
  return _internal_mutable_text();
}
inline const std::string& Logs_SearchRequest::_internal_text() const {
  return text_.GetNoArena();
}
inline void Logs_SearchRequest::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Logs_SearchRequest::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Logs.SearchRequest.text)
}
inline void Logs_SearchRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Logs.SearchRequest.text)
}
inline void Logs_SearchRequest::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Logs.SearchRequest.text)
}
inline std::string* Logs_SearchRequest::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Logs_SearchRequest::release_text() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.SearchRequest.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Logs_SearchRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Logs.SearchRequest.text)
}

// .google.protobuf.Timestamp from = 2;
inline bool Logs_SearchRequest::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool Logs_SearchRequest::has_from() const {
  return _internal_has_from();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Logs_SearchRequest::_internal_from() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = from_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Logs_SearchRequest::from() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.SearchRequest.from)
  return _internal_from();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_SearchRequest::release_from() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.SearchRequest.from)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = from_;
  from_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_SearchRequest::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    from_ = p;
  }
  return from_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_SearchRequest::mutable_from() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.SearchRequest.from)
  return _internal_mutable_from();
}
inline void Logs_SearchRequest::set_allocated_from(PROTOBUF_NAMESPACE_ID::Timestamp* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from)->GetArena();
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Logs.SearchRequest.from)
}

// .google.protobuf.Timestamp to = 3;
inline bool Logs_SearchRequest::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool Logs_SearchRequest::has_to() const {
  return _internal_has_to();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Logs_SearchRequest::_internal_to() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = to_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Logs_SearchRequest::to() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.SearchRequest.to)
  return _internal_to();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_SearchRequest::release_to() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.SearchRequest.to)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = to_;
  to_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_SearchRequest::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    to_ = p;
  }
  return to_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Logs_SearchRequest::mutable_to() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.SearchRequest.to)
  return _internal_mutable_to();
}
inline void Logs_SearchRequest::set_allocated_to(PROTOBUF_NAMESPACE_ID::Timestamp* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to)->GetArena();
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Logs.SearchRequest.to)
}

// -------------------------------------------------------------------

// Logs

// .inhumate.rti.proto.Logs.ListRequest list = 1;
inline bool Logs::_internal_has_list() const {
  return which_case() == kList;
}
inline bool Logs::has_list() const {
  return _internal_has_list();
}
inline void Logs::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void Logs::clear_list() {
  if (_internal_has_list()) {
    delete which_.list_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Logs_ListRequest* Logs::release_list() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.list)
  if (_internal_has_list()) {
    clear_has_which();
      ::inhumate::rti::proto::Logs_ListRequest* temp = which_.list_;
    which_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Logs_ListRequest& Logs::_internal_list() const {
  return _internal_has_list()
      ? *which_.list_
      : *reinterpret_cast< ::inhumate::rti::proto::Logs_ListRequest*>(&::inhumate::rti::proto::_Logs_ListRequest_default_instance_);
}
inline const ::inhumate::rti::proto::Logs_ListRequest& Logs::list() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.list)
  return _internal_list();
}
inline ::inhumate::rti::proto::Logs_ListRequest* Logs::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_which();
    set_has_list();
    which_.list_ = CreateMaybeMessage< ::inhumate::rti::proto::Logs_ListRequest >(
        GetArenaNoVirtual());
  }
  return which_.list_;
}
inline ::inhumate::rti::proto::Logs_ListRequest* Logs::mutable_list() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.list)
  return _internal_mutable_list();
}

// .inhumate.rti.proto.Logs.SearchRequest search = 2;
inline bool Logs::_internal_has_search() const {
  return which_case() == kSearch;
}
inline bool Logs::has_search() const {
  return _internal_has_search();
}
inline void Logs::set_has_search() {
  _oneof_case_[0] = kSearch;
}
inline void Logs::clear_search() {
  if (_internal_has_search()) {
    delete which_.search_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Logs_SearchRequest* Logs::release_search() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.search)
  if (_internal_has_search()) {
    clear_has_which();
      ::inhumate::rti::proto::Logs_SearchRequest* temp = which_.search_;
    which_.search_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Logs_SearchRequest& Logs::_internal_search() const {
  return _internal_has_search()
      ? *which_.search_
      : *reinterpret_cast< ::inhumate::rti::proto::Logs_SearchRequest*>(&::inhumate::rti::proto::_Logs_SearchRequest_default_instance_);
}
inline const ::inhumate::rti::proto::Logs_SearchRequest& Logs::search() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.search)
  return _internal_search();
}
inline ::inhumate::rti::proto::Logs_SearchRequest* Logs::_internal_mutable_search() {
  if (!_internal_has_search()) {
    clear_which();
    set_has_search();
    which_.search_ = CreateMaybeMessage< ::inhumate::rti::proto::Logs_SearchRequest >(
        GetArenaNoVirtual());
  }
  return which_.search_;
}
inline ::inhumate::rti::proto::Logs_SearchRequest* Logs::mutable_search() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.search)
  return _internal_mutable_search();
}

// .inhumate.rti.proto.Log log = 3;
inline bool Logs::_internal_has_log() const {
  return which_case() == kLog;
}
inline bool Logs::has_log() const {
  return _internal_has_log();
}
inline void Logs::set_has_log() {
  _oneof_case_[0] = kLog;
}
inline void Logs::clear_log() {
  if (_internal_has_log()) {
    delete which_.log_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Log* Logs::release_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.log)
  if (_internal_has_log()) {
    clear_has_which();
      ::inhumate::rti::proto::Log* temp = which_.log_;
    which_.log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Log& Logs::_internal_log() const {
  return _internal_has_log()
      ? *which_.log_
      : *reinterpret_cast< ::inhumate::rti::proto::Log*>(&::inhumate::rti::proto::_Log_default_instance_);
}
inline const ::inhumate::rti::proto::Log& Logs::log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.log)
  return _internal_log();
}
inline ::inhumate::rti::proto::Log* Logs::_internal_mutable_log() {
  if (!_internal_has_log()) {
    clear_which();
    set_has_log();
    which_.log_ = CreateMaybeMessage< ::inhumate::rti::proto::Log >(
        GetArenaNoVirtual());
  }
  return which_.log_;
}
inline ::inhumate::rti::proto::Log* Logs::mutable_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.log)
  return _internal_mutable_log();
}

// .google.protobuf.Empty no_logs = 4;
inline bool Logs::_internal_has_no_logs() const {
  return which_case() == kNoLogs;
}
inline bool Logs::has_no_logs() const {
  return _internal_has_no_logs();
}
inline void Logs::set_has_no_logs() {
  _oneof_case_[0] = kNoLogs;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Logs::release_no_logs() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.no_logs)
  if (_internal_has_no_logs()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.no_logs_;
    which_.no_logs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Logs::_internal_no_logs() const {
  return _internal_has_no_logs()
      ? *which_.no_logs_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Logs::no_logs() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.no_logs)
  return _internal_no_logs();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Logs::_internal_mutable_no_logs() {
  if (!_internal_has_no_logs()) {
    clear_which();
    set_has_no_logs();
    which_.no_logs_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.no_logs_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Logs::mutable_no_logs() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.no_logs)
  return _internal_mutable_no_logs();
}

// string delete_log = 5;
inline bool Logs::_internal_has_delete_log() const {
  return which_case() == kDeleteLog;
}
inline void Logs::set_has_delete_log() {
  _oneof_case_[0] = kDeleteLog;
}
inline void Logs::clear_delete_log() {
  if (_internal_has_delete_log()) {
    which_.delete_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& Logs::delete_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.delete_log)
  return _internal_delete_log();
}
inline void Logs::set_delete_log(const std::string& value) {
  _internal_set_delete_log(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.delete_log)
}
inline std::string* Logs::mutable_delete_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.delete_log)
  return _internal_mutable_delete_log();
}
inline const std::string& Logs::_internal_delete_log() const {
  if (_internal_has_delete_log()) {
    return which_.delete_log_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Logs::_internal_set_delete_log(const std::string& value) {
  if (!_internal_has_delete_log()) {
    clear_which();
    set_has_delete_log();
    which_.delete_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.delete_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Logs::set_delete_log(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.delete_log)
  if (!_internal_has_delete_log()) {
    clear_which();
    set_has_delete_log();
    which_.delete_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.delete_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Logs.delete_log)
}
inline void Logs::set_delete_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_delete_log()) {
    clear_which();
    set_has_delete_log();
    which_.delete_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.delete_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Logs.delete_log)
}
inline void Logs::set_delete_log(const char* value, size_t size) {
  if (!_internal_has_delete_log()) {
    clear_which();
    set_has_delete_log();
    which_.delete_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.delete_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Logs.delete_log)
}
inline std::string* Logs::_internal_mutable_delete_log() {
  if (!_internal_has_delete_log()) {
    clear_which();
    set_has_delete_log();
    which_.delete_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.delete_log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Logs::release_delete_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.delete_log)
  if (_internal_has_delete_log()) {
    clear_has_which();
    return which_.delete_log_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Logs::set_allocated_delete_log(std::string* delete_log) {
  if (has_which()) {
    clear_which();
  }
  if (delete_log != nullptr) {
    set_has_delete_log();
    which_.delete_log_.UnsafeSetDefault(delete_log);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Logs.delete_log)
}

// string lock_log = 6;
inline bool Logs::_internal_has_lock_log() const {
  return which_case() == kLockLog;
}
inline void Logs::set_has_lock_log() {
  _oneof_case_[0] = kLockLog;
}
inline void Logs::clear_lock_log() {
  if (_internal_has_lock_log()) {
    which_.lock_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& Logs::lock_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.lock_log)
  return _internal_lock_log();
}
inline void Logs::set_lock_log(const std::string& value) {
  _internal_set_lock_log(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.lock_log)
}
inline std::string* Logs::mutable_lock_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.lock_log)
  return _internal_mutable_lock_log();
}
inline const std::string& Logs::_internal_lock_log() const {
  if (_internal_has_lock_log()) {
    return which_.lock_log_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Logs::_internal_set_lock_log(const std::string& value) {
  if (!_internal_has_lock_log()) {
    clear_which();
    set_has_lock_log();
    which_.lock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.lock_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Logs::set_lock_log(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.lock_log)
  if (!_internal_has_lock_log()) {
    clear_which();
    set_has_lock_log();
    which_.lock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.lock_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Logs.lock_log)
}
inline void Logs::set_lock_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_lock_log()) {
    clear_which();
    set_has_lock_log();
    which_.lock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.lock_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Logs.lock_log)
}
inline void Logs::set_lock_log(const char* value, size_t size) {
  if (!_internal_has_lock_log()) {
    clear_which();
    set_has_lock_log();
    which_.lock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.lock_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Logs.lock_log)
}
inline std::string* Logs::_internal_mutable_lock_log() {
  if (!_internal_has_lock_log()) {
    clear_which();
    set_has_lock_log();
    which_.lock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.lock_log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Logs::release_lock_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.lock_log)
  if (_internal_has_lock_log()) {
    clear_has_which();
    return which_.lock_log_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Logs::set_allocated_lock_log(std::string* lock_log) {
  if (has_which()) {
    clear_which();
  }
  if (lock_log != nullptr) {
    set_has_lock_log();
    which_.lock_log_.UnsafeSetDefault(lock_log);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Logs.lock_log)
}

// string unlock_log = 7;
inline bool Logs::_internal_has_unlock_log() const {
  return which_case() == kUnlockLog;
}
inline void Logs::set_has_unlock_log() {
  _oneof_case_[0] = kUnlockLog;
}
inline void Logs::clear_unlock_log() {
  if (_internal_has_unlock_log()) {
    which_.unlock_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& Logs::unlock_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Logs.unlock_log)
  return _internal_unlock_log();
}
inline void Logs::set_unlock_log(const std::string& value) {
  _internal_set_unlock_log(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.unlock_log)
}
inline std::string* Logs::mutable_unlock_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Logs.unlock_log)
  return _internal_mutable_unlock_log();
}
inline const std::string& Logs::_internal_unlock_log() const {
  if (_internal_has_unlock_log()) {
    return which_.unlock_log_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Logs::_internal_set_unlock_log(const std::string& value) {
  if (!_internal_has_unlock_log()) {
    clear_which();
    set_has_unlock_log();
    which_.unlock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.unlock_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Logs::set_unlock_log(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Logs.unlock_log)
  if (!_internal_has_unlock_log()) {
    clear_which();
    set_has_unlock_log();
    which_.unlock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.unlock_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Logs.unlock_log)
}
inline void Logs::set_unlock_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_unlock_log()) {
    clear_which();
    set_has_unlock_log();
    which_.unlock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.unlock_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Logs.unlock_log)
}
inline void Logs::set_unlock_log(const char* value, size_t size) {
  if (!_internal_has_unlock_log()) {
    clear_which();
    set_has_unlock_log();
    which_.unlock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.unlock_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Logs.unlock_log)
}
inline std::string* Logs::_internal_mutable_unlock_log() {
  if (!_internal_has_unlock_log()) {
    clear_which();
    set_has_unlock_log();
    which_.unlock_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.unlock_log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Logs::release_unlock_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Logs.unlock_log)
  if (_internal_has_unlock_log()) {
    clear_has_which();
    return which_.unlock_log_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Logs::set_allocated_unlock_log(std::string* unlock_log) {
  if (has_which()) {
    clear_which();
  }
  if (unlock_log != nullptr) {
    set_has_unlock_log();
    which_.unlock_log_.UnsafeSetDefault(unlock_log);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Logs.unlock_log)
}

inline bool Logs::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void Logs::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline Logs::WhichCase Logs::which_case() const {
  return Logs::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Log

// string id = 1;
inline void Log::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Log::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.id)
  return _internal_id();
}
inline void Log::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.id)
}
inline std::string* Log::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.id)
  return _internal_mutable_id();
}
inline const std::string& Log::_internal_id() const {
  return id_.GetNoArena();
}
inline void Log::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Log::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Log.id)
}
inline void Log::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Log.id)
}
inline void Log::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Log.id)
}
inline std::string* Log::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Log::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Log.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Log::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Log.id)
}

// double length = 2;
inline void Log::clear_length() {
  length_ = 0;
}
inline double Log::_internal_length() const {
  return length_;
}
inline double Log::length() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.length)
  return _internal_length();
}
inline void Log::_internal_set_length(double value) {
  
  length_ = value;
}
inline void Log::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.length)
}

// string scenario_name = 3;
inline void Log::clear_scenario_name() {
  scenario_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Log::scenario_name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.scenario_name)
  return _internal_scenario_name();
}
inline void Log::set_scenario_name(const std::string& value) {
  _internal_set_scenario_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.scenario_name)
}
inline std::string* Log::mutable_scenario_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.scenario_name)
  return _internal_mutable_scenario_name();
}
inline const std::string& Log::_internal_scenario_name() const {
  return scenario_name_.GetNoArena();
}
inline void Log::_internal_set_scenario_name(const std::string& value) {
  
  scenario_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Log::set_scenario_name(std::string&& value) {
  
  scenario_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Log.scenario_name)
}
inline void Log::set_scenario_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scenario_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Log.scenario_name)
}
inline void Log::set_scenario_name(const char* value, size_t size) {
  
  scenario_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Log.scenario_name)
}
inline std::string* Log::_internal_mutable_scenario_name() {
  
  return scenario_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Log::release_scenario_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Log.scenario_name)
  
  return scenario_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Log::set_allocated_scenario_name(std::string* scenario_name) {
  if (scenario_name != nullptr) {
    
  } else {
    
  }
  scenario_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario_name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Log.scenario_name)
}

// .google.protobuf.Timestamp start_time = 4;
inline bool Log::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool Log::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Log::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Log::start_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.start_time)
  return _internal_start_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Log::release_start_time() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Log.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Log::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Log::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.start_time)
  return _internal_mutable_start_time();
}
inline void Log::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Log.start_time)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool Log::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool Log::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Log::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Log::end_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.end_time)
  return _internal_end_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Log::release_end_time() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Log.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Log::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Log::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.end_time)
  return _internal_mutable_end_time();
}
inline void Log::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Log.end_time)
}

// string title = 6;
inline void Log::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Log::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.title)
  return _internal_title();
}
inline void Log::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.title)
}
inline std::string* Log::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.title)
  return _internal_mutable_title();
}
inline const std::string& Log::_internal_title() const {
  return title_.GetNoArena();
}
inline void Log::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Log::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Log.title)
}
inline void Log::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Log.title)
}
inline void Log::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Log.title)
}
inline std::string* Log::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Log::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Log.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Log::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Log.title)
}

// int64 message_count = 7;
inline void Log::clear_message_count() {
  message_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_message_count() const {
  return message_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::message_count() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.message_count)
  return _internal_message_count();
}
inline void Log::_internal_set_message_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_count_ = value;
}
inline void Log::set_message_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.message_count)
}

// int64 message_bytes = 8;
inline void Log::clear_message_bytes() {
  message_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_message_bytes() const {
  return message_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::message_bytes() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.message_bytes)
  return _internal_message_bytes();
}
inline void Log::_internal_set_message_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_bytes_ = value;
}
inline void Log::set_message_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_bytes(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.message_bytes)
}

// bool recording_disabled = 9;
inline void Log::clear_recording_disabled() {
  recording_disabled_ = false;
}
inline bool Log::_internal_recording_disabled() const {
  return recording_disabled_;
}
inline bool Log::recording_disabled() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.recording_disabled)
  return _internal_recording_disabled();
}
inline void Log::_internal_set_recording_disabled(bool value) {
  
  recording_disabled_ = value;
}
inline void Log::set_recording_disabled(bool value) {
  _internal_set_recording_disabled(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.recording_disabled)
}

// int32 measure_count = 10;
inline void Log::clear_measure_count() {
  measure_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Log::_internal_measure_count() const {
  return measure_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Log::measure_count() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.measure_count)
  return _internal_measure_count();
}
inline void Log::_internal_set_measure_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  measure_count_ = value;
}
inline void Log::set_measure_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_measure_count(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.measure_count)
}

// int64 measurement_count = 11;
inline void Log::clear_measurement_count() {
  measurement_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_measurement_count() const {
  return measurement_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::measurement_count() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.measurement_count)
  return _internal_measurement_count();
}
inline void Log::_internal_set_measurement_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  measurement_count_ = value;
}
inline void Log::set_measurement_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_measurement_count(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.measurement_count)
}

// int64 measurement_bytes = 12;
inline void Log::clear_measurement_bytes() {
  measurement_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_measurement_bytes() const {
  return measurement_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::measurement_bytes() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.measurement_bytes)
  return _internal_measurement_bytes();
}
inline void Log::_internal_set_measurement_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  measurement_bytes_ = value;
}
inline void Log::set_measurement_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_measurement_bytes(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.measurement_bytes)
}

// string launch_configuration = 13;
inline void Log::clear_launch_configuration() {
  launch_configuration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Log::launch_configuration() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.launch_configuration)
  return _internal_launch_configuration();
}
inline void Log::set_launch_configuration(const std::string& value) {
  _internal_set_launch_configuration(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.launch_configuration)
}
inline std::string* Log::mutable_launch_configuration() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.launch_configuration)
  return _internal_mutable_launch_configuration();
}
inline const std::string& Log::_internal_launch_configuration() const {
  return launch_configuration_.GetNoArena();
}
inline void Log::_internal_set_launch_configuration(const std::string& value) {
  
  launch_configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Log::set_launch_configuration(std::string&& value) {
  
  launch_configuration_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Log.launch_configuration)
}
inline void Log::set_launch_configuration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  launch_configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Log.launch_configuration)
}
inline void Log::set_launch_configuration(const char* value, size_t size) {
  
  launch_configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Log.launch_configuration)
}
inline std::string* Log::_internal_mutable_launch_configuration() {
  
  return launch_configuration_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Log::release_launch_configuration() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Log.launch_configuration)
  
  return launch_configuration_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Log::set_allocated_launch_configuration(std::string* launch_configuration) {
  if (launch_configuration != nullptr) {
    
  } else {
    
  }
  launch_configuration_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_configuration);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Log.launch_configuration)
}

// repeated string applications = 14;
inline int Log::_internal_applications_size() const {
  return applications_.size();
}
inline int Log::applications_size() const {
  return _internal_applications_size();
}
inline void Log::clear_applications() {
  applications_.Clear();
}
inline std::string* Log::add_applications() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.Log.applications)
  return _internal_add_applications();
}
inline const std::string& Log::_internal_applications(int index) const {
  return applications_.Get(index);
}
inline const std::string& Log::applications(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.applications)
  return _internal_applications(index);
}
inline std::string* Log::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.applications)
  return applications_.Mutable(index);
}
inline void Log::set_applications(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.applications)
  applications_.Mutable(index)->assign(value);
}
inline void Log::set_applications(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.applications)
  applications_.Mutable(index)->assign(std::move(value));
}
inline void Log::set_applications(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  applications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Log.applications)
}
inline void Log::set_applications(int index, const char* value, size_t size) {
  applications_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Log.applications)
}
inline std::string* Log::_internal_add_applications() {
  return applications_.Add();
}
inline void Log::add_applications(const std::string& value) {
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.applications)
}
inline void Log::add_applications(std::string&& value) {
  applications_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.applications)
}
inline void Log::add_applications(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.Log.applications)
}
inline void Log::add_applications(const char* value, size_t size) {
  applications_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.Log.applications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Log::applications() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Log.applications)
  return applications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Log::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Log.applications)
  return &applications_;
}

// repeated string users = 15;
inline int Log::_internal_users_size() const {
  return users_.size();
}
inline int Log::users_size() const {
  return _internal_users_size();
}
inline void Log::clear_users() {
  users_.Clear();
}
inline std::string* Log::add_users() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.Log.users)
  return _internal_add_users();
}
inline const std::string& Log::_internal_users(int index) const {
  return users_.Get(index);
}
inline const std::string& Log::users(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.users)
  return _internal_users(index);
}
inline std::string* Log::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.users)
  return users_.Mutable(index);
}
inline void Log::set_users(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.users)
  users_.Mutable(index)->assign(value);
}
inline void Log::set_users(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.users)
  users_.Mutable(index)->assign(std::move(value));
}
inline void Log::set_users(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Log.users)
}
inline void Log::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Log.users)
}
inline std::string* Log::_internal_add_users() {
  return users_.Add();
}
inline void Log::add_users(const std::string& value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.users)
}
inline void Log::add_users(std::string&& value) {
  users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.users)
}
inline void Log::add_users(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.Log.users)
}
inline void Log::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.Log.users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Log::users() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Log.users)
  return users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Log::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Log.users)
  return &users_;
}

// repeated string participants = 16;
inline int Log::_internal_participants_size() const {
  return participants_.size();
}
inline int Log::participants_size() const {
  return _internal_participants_size();
}
inline void Log::clear_participants() {
  participants_.Clear();
}
inline std::string* Log::add_participants() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.Log.participants)
  return _internal_add_participants();
}
inline const std::string& Log::_internal_participants(int index) const {
  return participants_.Get(index);
}
inline const std::string& Log::participants(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.participants)
  return _internal_participants(index);
}
inline std::string* Log::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.participants)
  return participants_.Mutable(index);
}
inline void Log::set_participants(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.participants)
  participants_.Mutable(index)->assign(value);
}
inline void Log::set_participants(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.participants)
  participants_.Mutable(index)->assign(std::move(value));
}
inline void Log::set_participants(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  participants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Log.participants)
}
inline void Log::set_participants(int index, const char* value, size_t size) {
  participants_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Log.participants)
}
inline std::string* Log::_internal_add_participants() {
  return participants_.Add();
}
inline void Log::add_participants(const std::string& value) {
  participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.participants)
}
inline void Log::add_participants(std::string&& value) {
  participants_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.participants)
}
inline void Log::add_participants(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.Log.participants)
}
inline void Log::add_participants(const char* value, size_t size) {
  participants_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.Log.participants)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Log::participants() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Log.participants)
  return participants_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Log::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Log.participants)
  return &participants_;
}

// map<string, string> launch_parameter_values = 17;
inline int Log::_internal_launch_parameter_values_size() const {
  return launch_parameter_values_.size();
}
inline int Log::launch_parameter_values_size() const {
  return _internal_launch_parameter_values_size();
}
inline void Log::clear_launch_parameter_values() {
  launch_parameter_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Log::_internal_launch_parameter_values() const {
  return launch_parameter_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Log::launch_parameter_values() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.Log.launch_parameter_values)
  return _internal_launch_parameter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Log::_internal_mutable_launch_parameter_values() {
  return launch_parameter_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Log::mutable_launch_parameter_values() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.Log.launch_parameter_values)
  return _internal_mutable_launch_parameter_values();
}

// map<string, string> scenario_parameter_values = 18;
inline int Log::_internal_scenario_parameter_values_size() const {
  return scenario_parameter_values_.size();
}
inline int Log::scenario_parameter_values_size() const {
  return _internal_scenario_parameter_values_size();
}
inline void Log::clear_scenario_parameter_values() {
  scenario_parameter_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Log::_internal_scenario_parameter_values() const {
  return scenario_parameter_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Log::scenario_parameter_values() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.Log.scenario_parameter_values)
  return _internal_scenario_parameter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Log::_internal_mutable_scenario_parameter_values() {
  return scenario_parameter_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Log::mutable_scenario_parameter_values() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.Log.scenario_parameter_values)
  return _internal_mutable_scenario_parameter_values();
}

// int32 avmedia_count = 19;
inline void Log::clear_avmedia_count() {
  avmedia_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Log::_internal_avmedia_count() const {
  return avmedia_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Log::avmedia_count() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.avmedia_count)
  return _internal_avmedia_count();
}
inline void Log::_internal_set_avmedia_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avmedia_count_ = value;
}
inline void Log::set_avmedia_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avmedia_count(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.avmedia_count)
}

// int64 avmedia_bytes = 20;
inline void Log::clear_avmedia_bytes() {
  avmedia_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_avmedia_bytes() const {
  return avmedia_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::avmedia_bytes() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.avmedia_bytes)
  return _internal_avmedia_bytes();
}
inline void Log::_internal_set_avmedia_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  avmedia_bytes_ = value;
}
inline void Log::set_avmedia_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_avmedia_bytes(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.avmedia_bytes)
}

// repeated .inhumate.rti.proto.LogMark marks = 21;
inline int Log::_internal_marks_size() const {
  return marks_.size();
}
inline int Log::marks_size() const {
  return _internal_marks_size();
}
inline void Log::clear_marks() {
  marks_.Clear();
}
inline ::inhumate::rti::proto::LogMark* Log::mutable_marks(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.marks)
  return marks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogMark >*
Log::mutable_marks() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Log.marks)
  return &marks_;
}
inline const ::inhumate::rti::proto::LogMark& Log::_internal_marks(int index) const {
  return marks_.Get(index);
}
inline const ::inhumate::rti::proto::LogMark& Log::marks(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.marks)
  return _internal_marks(index);
}
inline ::inhumate::rti::proto::LogMark* Log::_internal_add_marks() {
  return marks_.Add();
}
inline ::inhumate::rti::proto::LogMark* Log::add_marks() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.marks)
  return _internal_add_marks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogMark >&
Log::marks() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Log.marks)
  return marks_;
}

// repeated .inhumate.rti.proto.LogPause pauses = 22;
inline int Log::_internal_pauses_size() const {
  return pauses_.size();
}
inline int Log::pauses_size() const {
  return _internal_pauses_size();
}
inline void Log::clear_pauses() {
  pauses_.Clear();
}
inline ::inhumate::rti::proto::LogPause* Log::mutable_pauses(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.pauses)
  return pauses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogPause >*
Log::mutable_pauses() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Log.pauses)
  return &pauses_;
}
inline const ::inhumate::rti::proto::LogPause& Log::_internal_pauses(int index) const {
  return pauses_.Get(index);
}
inline const ::inhumate::rti::proto::LogPause& Log::pauses(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.pauses)
  return _internal_pauses(index);
}
inline ::inhumate::rti::proto::LogPause* Log::_internal_add_pauses() {
  return pauses_.Add();
}
inline ::inhumate::rti::proto::LogPause* Log::add_pauses() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.pauses)
  return _internal_add_pauses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogPause >&
Log::pauses() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Log.pauses)
  return pauses_;
}

// repeated .inhumate.rti.proto.LogTimeScale time_scales = 23;
inline int Log::_internal_time_scales_size() const {
  return time_scales_.size();
}
inline int Log::time_scales_size() const {
  return _internal_time_scales_size();
}
inline void Log::clear_time_scales() {
  time_scales_.Clear();
}
inline ::inhumate::rti::proto::LogTimeScale* Log::mutable_time_scales(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Log.time_scales)
  return time_scales_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogTimeScale >*
Log::mutable_time_scales() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Log.time_scales)
  return &time_scales_;
}
inline const ::inhumate::rti::proto::LogTimeScale& Log::_internal_time_scales(int index) const {
  return time_scales_.Get(index);
}
inline const ::inhumate::rti::proto::LogTimeScale& Log::time_scales(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.time_scales)
  return _internal_time_scales(index);
}
inline ::inhumate::rti::proto::LogTimeScale* Log::_internal_add_time_scales() {
  return time_scales_.Add();
}
inline ::inhumate::rti::proto::LogTimeScale* Log::add_time_scales() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Log.time_scales)
  return _internal_add_time_scales();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::LogTimeScale >&
Log::time_scales() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Log.time_scales)
  return time_scales_;
}

// bool persistent = 24;
inline void Log::clear_persistent() {
  persistent_ = false;
}
inline bool Log::_internal_persistent() const {
  return persistent_;
}
inline bool Log::persistent() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.persistent)
  return _internal_persistent();
}
inline void Log::_internal_set_persistent(bool value) {
  
  persistent_ = value;
}
inline void Log::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.persistent)
}

// bool deletable = 25;
inline void Log::clear_deletable() {
  deletable_ = false;
}
inline bool Log::_internal_deletable() const {
  return deletable_;
}
inline bool Log::deletable() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.deletable)
  return _internal_deletable();
}
inline void Log::_internal_set_deletable(bool value) {
  
  deletable_ = value;
}
inline void Log::set_deletable(bool value) {
  _internal_set_deletable(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.deletable)
}

// bool locked = 26;
inline void Log::clear_locked() {
  locked_ = false;
}
inline bool Log::_internal_locked() const {
  return locked_;
}
inline bool Log::locked() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Log.locked)
  return _internal_locked();
}
inline void Log::_internal_set_locked(bool value) {
  
  locked_ = value;
}
inline void Log::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Log.locked)
}

// -------------------------------------------------------------------

// LogMark

// string id = 1;
inline void LogMark::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogMark::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LogMark.id)
  return _internal_id();
}
inline void LogMark::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LogMark.id)
}
inline std::string* LogMark::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LogMark.id)
  return _internal_mutable_id();
}
inline const std::string& LogMark::_internal_id() const {
  return id_.GetNoArena();
}
inline void LogMark::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogMark::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LogMark.id)
}
inline void LogMark::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LogMark.id)
}
inline void LogMark::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LogMark.id)
}
inline std::string* LogMark::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMark::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LogMark.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMark::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LogMark.id)
}

// double time = 2;
inline void LogMark::clear_time() {
  time_ = 0;
}
inline double LogMark::_internal_time() const {
  return time_;
}
inline double LogMark::time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LogMark.time)
  return _internal_time();
}
inline void LogMark::_internal_set_time(double value) {
  
  time_ = value;
}
inline void LogMark::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LogMark.time)
}

// string title = 3;
inline void LogMark::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogMark::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LogMark.title)
  return _internal_title();
}
inline void LogMark::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LogMark.title)
}
inline std::string* LogMark::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LogMark.title)
  return _internal_mutable_title();
}
inline const std::string& LogMark::_internal_title() const {
  return title_.GetNoArena();
}
inline void LogMark::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogMark::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LogMark.title)
}
inline void LogMark::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LogMark.title)
}
inline void LogMark::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LogMark.title)
}
inline std::string* LogMark::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMark::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LogMark.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMark::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LogMark.title)
}

// -------------------------------------------------------------------

// LogPause

// double time = 1;
inline void LogPause::clear_time() {
  time_ = 0;
}
inline double LogPause::_internal_time() const {
  return time_;
}
inline double LogPause::time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LogPause.time)
  return _internal_time();
}
inline void LogPause::_internal_set_time(double value) {
  
  time_ = value;
}
inline void LogPause::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LogPause.time)
}

// double duration = 2;
inline void LogPause::clear_duration() {
  duration_ = 0;
}
inline double LogPause::_internal_duration() const {
  return duration_;
}
inline double LogPause::duration() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LogPause.duration)
  return _internal_duration();
}
inline void LogPause::_internal_set_duration(double value) {
  
  duration_ = value;
}
inline void LogPause::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LogPause.duration)
}

// -------------------------------------------------------------------

// LogTimeScale

// double time = 1;
inline void LogTimeScale::clear_time() {
  time_ = 0;
}
inline double LogTimeScale::_internal_time() const {
  return time_;
}
inline double LogTimeScale::time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LogTimeScale.time)
  return _internal_time();
}
inline void LogTimeScale::_internal_set_time(double value) {
  
  time_ = value;
}
inline void LogTimeScale::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LogTimeScale.time)
}

// double time_scale = 2;
inline void LogTimeScale::clear_time_scale() {
  time_scale_ = 0;
}
inline double LogTimeScale::_internal_time_scale() const {
  return time_scale_;
}
inline double LogTimeScale::time_scale() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LogTimeScale.time_scale)
  return _internal_time_scale();
}
inline void LogTimeScale::_internal_set_time_scale(double value) {
  
  time_scale_ = value;
}
inline void LogTimeScale::set_time_scale(double value) {
  _internal_set_time_scale(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LogTimeScale.time_scale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Logs_2eproto
