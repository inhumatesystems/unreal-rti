// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBundle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageBundle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageBundle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageBundle_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_MessageBundle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageBundle_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class MessageBundle;
class MessageBundleDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MessageBundleDefaultTypeInternal _MessageBundle_default_instance_;
class MessageBundle_Channel;
class MessageBundle_ChannelDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MessageBundle_ChannelDefaultTypeInternal _MessageBundle_Channel_default_instance_;
class MessageBundle_Message;
class MessageBundle_MessageDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MessageBundle_MessageDefaultTypeInternal _MessageBundle_Message_default_instance_;
class MessageBundle_Request;
class MessageBundle_RequestDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MessageBundle_RequestDefaultTypeInternal _MessageBundle_Request_default_instance_;
class MessageBundle_Response;
class MessageBundle_ResponseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MessageBundle_ResponseDefaultTypeInternal _MessageBundle_Response_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MessageBundle* Arena::CreateMaybeMessage<::inhumate::rti::proto::MessageBundle>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MessageBundle_Channel* Arena::CreateMaybeMessage<::inhumate::rti::proto::MessageBundle_Channel>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MessageBundle_Message* Arena::CreateMaybeMessage<::inhumate::rti::proto::MessageBundle_Message>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MessageBundle_Request* Arena::CreateMaybeMessage<::inhumate::rti::proto::MessageBundle_Request>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MessageBundle_Response* Arena::CreateMaybeMessage<::inhumate::rti::proto::MessageBundle_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT MessageBundle_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MessageBundle.Request) */ {
 public:
  MessageBundle_Request();
  virtual ~MessageBundle_Request();

  MessageBundle_Request(const MessageBundle_Request& from);
  MessageBundle_Request(MessageBundle_Request&& from) noexcept
    : MessageBundle_Request() {
    *this = ::std::move(from);
  }

  inline MessageBundle_Request& operator=(const MessageBundle_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBundle_Request& operator=(MessageBundle_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBundle_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBundle_Request* internal_default_instance() {
    return reinterpret_cast<const MessageBundle_Request*>(
               &_MessageBundle_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageBundle_Request& a, MessageBundle_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBundle_Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBundle_Request* New() const final {
    return CreateMaybeMessage<MessageBundle_Request>(nullptr);
  }

  MessageBundle_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBundle_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBundle_Request& from);
  void MergeFrom(const MessageBundle_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBundle_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MessageBundle.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageBundle_2eproto);
    return ::descriptor_table_MessageBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kIdsFieldNumber = 10,
    kResponseChannelFieldNumber = 1,
    kFromTimeFieldNumber = 3,
    kToTimeFieldNumber = 4,
    kLimitFieldNumber = 5,
    kOffsetFieldNumber = 6,
    kReverseFieldNumber = 7,
    kPerChannelFieldNumber = 8,
    kPerIdFieldNumber = 9,
  };
  // repeated string channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  const std::string& channels(int index) const;
  std::string* mutable_channels(int index);
  void set_channels(int index, const std::string& value);
  void set_channels(int index, std::string&& value);
  void set_channels(int index, const char* value);
  void set_channels(int index, const char* value, size_t size);
  std::string* add_channels();
  void add_channels(const std::string& value);
  void add_channels(std::string&& value);
  void add_channels(const char* value);
  void add_channels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channels();
  private:
  const std::string& _internal_channels(int index) const;
  std::string* _internal_add_channels();
  public:

  // repeated string ids = 10;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // string response_channel = 1;
  void clear_response_channel();
  const std::string& response_channel() const;
  void set_response_channel(const std::string& value);
  void set_response_channel(std::string&& value);
  void set_response_channel(const char* value);
  void set_response_channel(const char* value, size_t size);
  std::string* mutable_response_channel();
  std::string* release_response_channel();
  void set_allocated_response_channel(std::string* response_channel);
  private:
  const std::string& _internal_response_channel() const;
  void _internal_set_response_channel(const std::string& value);
  std::string* _internal_mutable_response_channel();
  public:

  // double from_time = 3;
  void clear_from_time();
  double from_time() const;
  void set_from_time(double value);
  private:
  double _internal_from_time() const;
  void _internal_set_from_time(double value);
  public:

  // double to_time = 4;
  void clear_to_time();
  double to_time() const;
  void set_to_time(double value);
  private:
  double _internal_to_time() const;
  void _internal_set_to_time(double value);
  public:

  // int32 limit = 5;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset = 6;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool reverse = 7;
  void clear_reverse();
  bool reverse() const;
  void set_reverse(bool value);
  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);
  public:

  // bool per_channel = 8;
  void clear_per_channel();
  bool per_channel() const;
  void set_per_channel(bool value);
  private:
  bool _internal_per_channel() const;
  void _internal_set_per_channel(bool value);
  public:

  // bool per_id = 9;
  void clear_per_id();
  bool per_id() const;
  void set_per_id(bool value);
  private:
  bool _internal_per_id() const;
  void _internal_set_per_id(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MessageBundle.Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_channel_;
  double from_time_;
  double to_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  bool reverse_;
  bool per_channel_;
  bool per_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageBundle_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT MessageBundle_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MessageBundle.Response) */ {
 public:
  MessageBundle_Response();
  virtual ~MessageBundle_Response();

  MessageBundle_Response(const MessageBundle_Response& from);
  MessageBundle_Response(MessageBundle_Response&& from) noexcept
    : MessageBundle_Response() {
    *this = ::std::move(from);
  }

  inline MessageBundle_Response& operator=(const MessageBundle_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBundle_Response& operator=(MessageBundle_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBundle_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBundle_Response* internal_default_instance() {
    return reinterpret_cast<const MessageBundle_Response*>(
               &_MessageBundle_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageBundle_Response& a, MessageBundle_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBundle_Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBundle_Response* New() const final {
    return CreateMaybeMessage<MessageBundle_Response>(nullptr);
  }

  MessageBundle_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBundle_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBundle_Response& from);
  void MergeFrom(const MessageBundle_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBundle_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MessageBundle.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageBundle_2eproto);
    return ::descriptor_table_MessageBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .inhumate.rti.proto.MessageBundle.Channel channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::inhumate::rti::proto::MessageBundle_Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Channel >*
      mutable_channels();
  private:
  const ::inhumate::rti::proto::MessageBundle_Channel& _internal_channels(int index) const;
  ::inhumate::rti::proto::MessageBundle_Channel* _internal_add_channels();
  public:
  const ::inhumate::rti::proto::MessageBundle_Channel& channels(int index) const;
  ::inhumate::rti::proto::MessageBundle_Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Channel >&
      channels() const;

  // int64 total_count = 2;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int64 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MessageBundle.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Channel > channels_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageBundle_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT MessageBundle_Channel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MessageBundle.Channel) */ {
 public:
  MessageBundle_Channel();
  virtual ~MessageBundle_Channel();

  MessageBundle_Channel(const MessageBundle_Channel& from);
  MessageBundle_Channel(MessageBundle_Channel&& from) noexcept
    : MessageBundle_Channel() {
    *this = ::std::move(from);
  }

  inline MessageBundle_Channel& operator=(const MessageBundle_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBundle_Channel& operator=(MessageBundle_Channel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBundle_Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBundle_Channel* internal_default_instance() {
    return reinterpret_cast<const MessageBundle_Channel*>(
               &_MessageBundle_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageBundle_Channel& a, MessageBundle_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBundle_Channel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBundle_Channel* New() const final {
    return CreateMaybeMessage<MessageBundle_Channel>(nullptr);
  }

  MessageBundle_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBundle_Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBundle_Channel& from);
  void MergeFrom(const MessageBundle_Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBundle_Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MessageBundle.Channel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageBundle_2eproto);
    return ::descriptor_table_MessageBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .inhumate.rti.proto.MessageBundle.Message messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::inhumate::rti::proto::MessageBundle_Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Message >*
      mutable_messages();
  private:
  const ::inhumate::rti::proto::MessageBundle_Message& _internal_messages(int index) const;
  ::inhumate::rti::proto::MessageBundle_Message* _internal_add_messages();
  public:
  const ::inhumate::rti::proto::MessageBundle_Message& messages(int index) const;
  ::inhumate::rti::proto::MessageBundle_Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Message >&
      messages() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MessageBundle.Channel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Message > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageBundle_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT MessageBundle_Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MessageBundle.Message) */ {
 public:
  MessageBundle_Message();
  virtual ~MessageBundle_Message();

  MessageBundle_Message(const MessageBundle_Message& from);
  MessageBundle_Message(MessageBundle_Message&& from) noexcept
    : MessageBundle_Message() {
    *this = ::std::move(from);
  }

  inline MessageBundle_Message& operator=(const MessageBundle_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBundle_Message& operator=(MessageBundle_Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBundle_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBundle_Message* internal_default_instance() {
    return reinterpret_cast<const MessageBundle_Message*>(
               &_MessageBundle_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MessageBundle_Message& a, MessageBundle_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBundle_Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBundle_Message* New() const final {
    return CreateMaybeMessage<MessageBundle_Message>(nullptr);
  }

  MessageBundle_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBundle_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBundle_Message& from);
  void MergeFrom(const MessageBundle_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBundle_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MessageBundle.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageBundle_2eproto);
    return ::descriptor_table_MessageBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kTimeFieldNumber = 1,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MessageBundle.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageBundle_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT MessageBundle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MessageBundle) */ {
 public:
  MessageBundle();
  virtual ~MessageBundle();

  MessageBundle(const MessageBundle& from);
  MessageBundle(MessageBundle&& from) noexcept
    : MessageBundle() {
    *this = ::std::move(from);
  }

  inline MessageBundle& operator=(const MessageBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBundle& operator=(MessageBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBundle& default_instance();

  enum WhichCase {
    kRequest = 1,
    kResponse = 2,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBundle* internal_default_instance() {
    return reinterpret_cast<const MessageBundle*>(
               &_MessageBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MessageBundle& a, MessageBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBundle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBundle* New() const final {
    return CreateMaybeMessage<MessageBundle>(nullptr);
  }

  MessageBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBundle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBundle& from);
  void MergeFrom(const MessageBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MessageBundle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MessageBundle_2eproto);
    return ::descriptor_table_MessageBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageBundle_Request Request;
  typedef MessageBundle_Response Response;
  typedef MessageBundle_Channel Channel;
  typedef MessageBundle_Message Message;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .inhumate.rti.proto.MessageBundle.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::inhumate::rti::proto::MessageBundle_Request& request() const;
  ::inhumate::rti::proto::MessageBundle_Request* release_request();
  ::inhumate::rti::proto::MessageBundle_Request* mutable_request();
  void set_allocated_request(::inhumate::rti::proto::MessageBundle_Request* request);
  private:
  const ::inhumate::rti::proto::MessageBundle_Request& _internal_request() const;
  ::inhumate::rti::proto::MessageBundle_Request* _internal_mutable_request();
  public:

  // .inhumate.rti.proto.MessageBundle.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::inhumate::rti::proto::MessageBundle_Response& response() const;
  ::inhumate::rti::proto::MessageBundle_Response* release_response();
  ::inhumate::rti::proto::MessageBundle_Response* mutable_response();
  void set_allocated_response(::inhumate::rti::proto::MessageBundle_Response* response);
  private:
  const ::inhumate::rti::proto::MessageBundle_Response& _internal_response() const;
  ::inhumate::rti::proto::MessageBundle_Response* _internal_mutable_response();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MessageBundle)
 private:
  class _Internal;
  void set_has_request();
  void set_has_response();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    ::inhumate::rti::proto::MessageBundle_Request* request_;
    ::inhumate::rti::proto::MessageBundle_Response* response_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MessageBundle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageBundle_Request

// string response_channel = 1;
inline void MessageBundle_Request::clear_response_channel() {
  response_channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageBundle_Request::response_channel() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.response_channel)
  return _internal_response_channel();
}
inline void MessageBundle_Request::set_response_channel(const std::string& value) {
  _internal_set_response_channel(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.response_channel)
}
inline std::string* MessageBundle_Request::mutable_response_channel() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.Request.response_channel)
  return _internal_mutable_response_channel();
}
inline const std::string& MessageBundle_Request::_internal_response_channel() const {
  return response_channel_.GetNoArena();
}
inline void MessageBundle_Request::_internal_set_response_channel(const std::string& value) {
  
  response_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageBundle_Request::set_response_channel(std::string&& value) {
  
  response_channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.MessageBundle.Request.response_channel)
}
inline void MessageBundle_Request::set_response_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MessageBundle.Request.response_channel)
}
inline void MessageBundle_Request::set_response_channel(const char* value, size_t size) {
  
  response_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MessageBundle.Request.response_channel)
}
inline std::string* MessageBundle_Request::_internal_mutable_response_channel() {
  
  return response_channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageBundle_Request::release_response_channel() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MessageBundle.Request.response_channel)
  
  return response_channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBundle_Request::set_allocated_response_channel(std::string* response_channel) {
  if (response_channel != nullptr) {
    
  } else {
    
  }
  response_channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_channel);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.MessageBundle.Request.response_channel)
}

// repeated string channels = 2;
inline int MessageBundle_Request::_internal_channels_size() const {
  return channels_.size();
}
inline int MessageBundle_Request::channels_size() const {
  return _internal_channels_size();
}
inline void MessageBundle_Request::clear_channels() {
  channels_.Clear();
}
inline std::string* MessageBundle_Request::add_channels() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.MessageBundle.Request.channels)
  return _internal_add_channels();
}
inline const std::string& MessageBundle_Request::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const std::string& MessageBundle_Request::channels(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.channels)
  return _internal_channels(index);
}
inline std::string* MessageBundle_Request::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.Request.channels)
  return channels_.Mutable(index);
}
inline void MessageBundle_Request::set_channels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.channels)
  channels_.Mutable(index)->assign(value);
}
inline void MessageBundle_Request::set_channels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.channels)
  channels_.Mutable(index)->assign(std::move(value));
}
inline void MessageBundle_Request::set_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MessageBundle.Request.channels)
}
inline void MessageBundle_Request::set_channels(int index, const char* value, size_t size) {
  channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MessageBundle.Request.channels)
}
inline std::string* MessageBundle_Request::_internal_add_channels() {
  return channels_.Add();
}
inline void MessageBundle_Request::add_channels(const std::string& value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MessageBundle.Request.channels)
}
inline void MessageBundle_Request::add_channels(std::string&& value) {
  channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MessageBundle.Request.channels)
}
inline void MessageBundle_Request::add_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.MessageBundle.Request.channels)
}
inline void MessageBundle_Request::add_channels(const char* value, size_t size) {
  channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.MessageBundle.Request.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MessageBundle_Request::channels() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MessageBundle.Request.channels)
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MessageBundle_Request::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MessageBundle.Request.channels)
  return &channels_;
}

// double from_time = 3;
inline void MessageBundle_Request::clear_from_time() {
  from_time_ = 0;
}
inline double MessageBundle_Request::_internal_from_time() const {
  return from_time_;
}
inline double MessageBundle_Request::from_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.from_time)
  return _internal_from_time();
}
inline void MessageBundle_Request::_internal_set_from_time(double value) {
  
  from_time_ = value;
}
inline void MessageBundle_Request::set_from_time(double value) {
  _internal_set_from_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.from_time)
}

// double to_time = 4;
inline void MessageBundle_Request::clear_to_time() {
  to_time_ = 0;
}
inline double MessageBundle_Request::_internal_to_time() const {
  return to_time_;
}
inline double MessageBundle_Request::to_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.to_time)
  return _internal_to_time();
}
inline void MessageBundle_Request::_internal_set_to_time(double value) {
  
  to_time_ = value;
}
inline void MessageBundle_Request::set_to_time(double value) {
  _internal_set_to_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.to_time)
}

// int32 limit = 5;
inline void MessageBundle_Request::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageBundle_Request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageBundle_Request::limit() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.limit)
  return _internal_limit();
}
inline void MessageBundle_Request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void MessageBundle_Request::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.limit)
}

// int32 offset = 6;
inline void MessageBundle_Request::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageBundle_Request::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageBundle_Request::offset() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.offset)
  return _internal_offset();
}
inline void MessageBundle_Request::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void MessageBundle_Request::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.offset)
}

// bool reverse = 7;
inline void MessageBundle_Request::clear_reverse() {
  reverse_ = false;
}
inline bool MessageBundle_Request::_internal_reverse() const {
  return reverse_;
}
inline bool MessageBundle_Request::reverse() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.reverse)
  return _internal_reverse();
}
inline void MessageBundle_Request::_internal_set_reverse(bool value) {
  
  reverse_ = value;
}
inline void MessageBundle_Request::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.reverse)
}

// bool per_channel = 8;
inline void MessageBundle_Request::clear_per_channel() {
  per_channel_ = false;
}
inline bool MessageBundle_Request::_internal_per_channel() const {
  return per_channel_;
}
inline bool MessageBundle_Request::per_channel() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.per_channel)
  return _internal_per_channel();
}
inline void MessageBundle_Request::_internal_set_per_channel(bool value) {
  
  per_channel_ = value;
}
inline void MessageBundle_Request::set_per_channel(bool value) {
  _internal_set_per_channel(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.per_channel)
}

// bool per_id = 9;
inline void MessageBundle_Request::clear_per_id() {
  per_id_ = false;
}
inline bool MessageBundle_Request::_internal_per_id() const {
  return per_id_;
}
inline bool MessageBundle_Request::per_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.per_id)
  return _internal_per_id();
}
inline void MessageBundle_Request::_internal_set_per_id(bool value) {
  
  per_id_ = value;
}
inline void MessageBundle_Request::set_per_id(bool value) {
  _internal_set_per_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.per_id)
}

// repeated string ids = 10;
inline int MessageBundle_Request::_internal_ids_size() const {
  return ids_.size();
}
inline int MessageBundle_Request::ids_size() const {
  return _internal_ids_size();
}
inline void MessageBundle_Request::clear_ids() {
  ids_.Clear();
}
inline std::string* MessageBundle_Request::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.MessageBundle.Request.ids)
  return _internal_add_ids();
}
inline const std::string& MessageBundle_Request::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& MessageBundle_Request::ids(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Request.ids)
  return _internal_ids(index);
}
inline std::string* MessageBundle_Request::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.Request.ids)
  return ids_.Mutable(index);
}
inline void MessageBundle_Request::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.ids)
  ids_.Mutable(index)->assign(value);
}
inline void MessageBundle_Request::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Request.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void MessageBundle_Request::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MessageBundle.Request.ids)
}
inline void MessageBundle_Request::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MessageBundle.Request.ids)
}
inline std::string* MessageBundle_Request::_internal_add_ids() {
  return ids_.Add();
}
inline void MessageBundle_Request::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MessageBundle.Request.ids)
}
inline void MessageBundle_Request::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MessageBundle.Request.ids)
}
inline void MessageBundle_Request::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.MessageBundle.Request.ids)
}
inline void MessageBundle_Request::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.MessageBundle.Request.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MessageBundle_Request::ids() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MessageBundle.Request.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MessageBundle_Request::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MessageBundle.Request.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// MessageBundle_Response

// repeated .inhumate.rti.proto.MessageBundle.Channel channels = 1;
inline int MessageBundle_Response::_internal_channels_size() const {
  return channels_.size();
}
inline int MessageBundle_Response::channels_size() const {
  return _internal_channels_size();
}
inline void MessageBundle_Response::clear_channels() {
  channels_.Clear();
}
inline ::inhumate::rti::proto::MessageBundle_Channel* MessageBundle_Response::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.Response.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Channel >*
MessageBundle_Response::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MessageBundle.Response.channels)
  return &channels_;
}
inline const ::inhumate::rti::proto::MessageBundle_Channel& MessageBundle_Response::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::inhumate::rti::proto::MessageBundle_Channel& MessageBundle_Response::channels(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Response.channels)
  return _internal_channels(index);
}
inline ::inhumate::rti::proto::MessageBundle_Channel* MessageBundle_Response::_internal_add_channels() {
  return channels_.Add();
}
inline ::inhumate::rti::proto::MessageBundle_Channel* MessageBundle_Response::add_channels() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MessageBundle.Response.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Channel >&
MessageBundle_Response::channels() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MessageBundle.Response.channels)
  return channels_;
}

// int64 total_count = 2;
inline void MessageBundle_Response::clear_total_count() {
  total_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageBundle_Response::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageBundle_Response::total_count() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Response.total_count)
  return _internal_total_count();
}
inline void MessageBundle_Response::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_count_ = value;
}
inline void MessageBundle_Response::set_total_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Response.total_count)
}

// -------------------------------------------------------------------

// MessageBundle_Channel

// string name = 1;
inline void MessageBundle_Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageBundle_Channel::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Channel.name)
  return _internal_name();
}
inline void MessageBundle_Channel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Channel.name)
}
inline std::string* MessageBundle_Channel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.Channel.name)
  return _internal_mutable_name();
}
inline const std::string& MessageBundle_Channel::_internal_name() const {
  return name_.GetNoArena();
}
inline void MessageBundle_Channel::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageBundle_Channel::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.MessageBundle.Channel.name)
}
inline void MessageBundle_Channel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MessageBundle.Channel.name)
}
inline void MessageBundle_Channel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MessageBundle.Channel.name)
}
inline std::string* MessageBundle_Channel::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageBundle_Channel::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MessageBundle.Channel.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBundle_Channel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.MessageBundle.Channel.name)
}

// repeated .inhumate.rti.proto.MessageBundle.Message messages = 2;
inline int MessageBundle_Channel::_internal_messages_size() const {
  return messages_.size();
}
inline int MessageBundle_Channel::messages_size() const {
  return _internal_messages_size();
}
inline void MessageBundle_Channel::clear_messages() {
  messages_.Clear();
}
inline ::inhumate::rti::proto::MessageBundle_Message* MessageBundle_Channel::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.Channel.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Message >*
MessageBundle_Channel::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MessageBundle.Channel.messages)
  return &messages_;
}
inline const ::inhumate::rti::proto::MessageBundle_Message& MessageBundle_Channel::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::inhumate::rti::proto::MessageBundle_Message& MessageBundle_Channel::messages(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Channel.messages)
  return _internal_messages(index);
}
inline ::inhumate::rti::proto::MessageBundle_Message* MessageBundle_Channel::_internal_add_messages() {
  return messages_.Add();
}
inline ::inhumate::rti::proto::MessageBundle_Message* MessageBundle_Channel::add_messages() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MessageBundle.Channel.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MessageBundle_Message >&
MessageBundle_Channel::messages() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MessageBundle.Channel.messages)
  return messages_;
}

// -------------------------------------------------------------------

// MessageBundle_Message

// double time = 1;
inline void MessageBundle_Message::clear_time() {
  time_ = 0;
}
inline double MessageBundle_Message::_internal_time() const {
  return time_;
}
inline double MessageBundle_Message::time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Message.time)
  return _internal_time();
}
inline void MessageBundle_Message::_internal_set_time(double value) {
  
  time_ = value;
}
inline void MessageBundle_Message::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Message.time)
}

// string content = 3;
inline void MessageBundle_Message::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageBundle_Message::content() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.Message.content)
  return _internal_content();
}
inline void MessageBundle_Message::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MessageBundle.Message.content)
}
inline std::string* MessageBundle_Message::mutable_content() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.Message.content)
  return _internal_mutable_content();
}
inline const std::string& MessageBundle_Message::_internal_content() const {
  return content_.GetNoArena();
}
inline void MessageBundle_Message::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageBundle_Message::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.MessageBundle.Message.content)
}
inline void MessageBundle_Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MessageBundle.Message.content)
}
inline void MessageBundle_Message::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MessageBundle.Message.content)
}
inline std::string* MessageBundle_Message::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageBundle_Message::release_content() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MessageBundle.Message.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBundle_Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.MessageBundle.Message.content)
}

// -------------------------------------------------------------------

// MessageBundle

// .inhumate.rti.proto.MessageBundle.Request request = 1;
inline bool MessageBundle::_internal_has_request() const {
  return which_case() == kRequest;
}
inline bool MessageBundle::has_request() const {
  return _internal_has_request();
}
inline void MessageBundle::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void MessageBundle::clear_request() {
  if (_internal_has_request()) {
    delete which_.request_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::MessageBundle_Request* MessageBundle::release_request() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MessageBundle.request)
  if (_internal_has_request()) {
    clear_has_which();
      ::inhumate::rti::proto::MessageBundle_Request* temp = which_.request_;
    which_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::MessageBundle_Request& MessageBundle::_internal_request() const {
  return _internal_has_request()
      ? *which_.request_
      : *reinterpret_cast< ::inhumate::rti::proto::MessageBundle_Request*>(&::inhumate::rti::proto::_MessageBundle_Request_default_instance_);
}
inline const ::inhumate::rti::proto::MessageBundle_Request& MessageBundle::request() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.request)
  return _internal_request();
}
inline ::inhumate::rti::proto::MessageBundle_Request* MessageBundle::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_which();
    set_has_request();
    which_.request_ = CreateMaybeMessage< ::inhumate::rti::proto::MessageBundle_Request >(
        GetArenaNoVirtual());
  }
  return which_.request_;
}
inline ::inhumate::rti::proto::MessageBundle_Request* MessageBundle::mutable_request() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.request)
  return _internal_mutable_request();
}

// .inhumate.rti.proto.MessageBundle.Response response = 2;
inline bool MessageBundle::_internal_has_response() const {
  return which_case() == kResponse;
}
inline bool MessageBundle::has_response() const {
  return _internal_has_response();
}
inline void MessageBundle::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void MessageBundle::clear_response() {
  if (_internal_has_response()) {
    delete which_.response_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::MessageBundle_Response* MessageBundle::release_response() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MessageBundle.response)
  if (_internal_has_response()) {
    clear_has_which();
      ::inhumate::rti::proto::MessageBundle_Response* temp = which_.response_;
    which_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::MessageBundle_Response& MessageBundle::_internal_response() const {
  return _internal_has_response()
      ? *which_.response_
      : *reinterpret_cast< ::inhumate::rti::proto::MessageBundle_Response*>(&::inhumate::rti::proto::_MessageBundle_Response_default_instance_);
}
inline const ::inhumate::rti::proto::MessageBundle_Response& MessageBundle::response() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MessageBundle.response)
  return _internal_response();
}
inline ::inhumate::rti::proto::MessageBundle_Response* MessageBundle::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_which();
    set_has_response();
    which_.response_ = CreateMaybeMessage< ::inhumate::rti::proto::MessageBundle_Response >(
        GetArenaNoVirtual());
  }
  return which_.response_;
}
inline ::inhumate::rti::proto::MessageBundle_Response* MessageBundle::mutable_response() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MessageBundle.response)
  return _internal_mutable_response();
}

inline bool MessageBundle::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void MessageBundle::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline MessageBundle::WhichCase MessageBundle::which_case() const {
  return MessageBundle::WhichCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageBundle_2eproto
