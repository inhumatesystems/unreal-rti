// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeometryOperation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GeometryOperation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GeometryOperation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GeometryOperation_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_GeometryOperation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GeometryOperation_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class GeometryOperation;
class GeometryOperationDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern GeometryOperationDefaultTypeInternal _GeometryOperation_default_instance_;
class GeometryOperation_ApplicationClient;
class GeometryOperation_ApplicationClientDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern GeometryOperation_ApplicationClientDefaultTypeInternal _GeometryOperation_ApplicationClient_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::GeometryOperation* Arena::CreateMaybeMessage<::inhumate::rti::proto::GeometryOperation>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::GeometryOperation_ApplicationClient* Arena::CreateMaybeMessage<::inhumate::rti::proto::GeometryOperation_ApplicationClient>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT GeometryOperation_ApplicationClient :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.GeometryOperation.ApplicationClient) */ {
 public:
  GeometryOperation_ApplicationClient();
  virtual ~GeometryOperation_ApplicationClient();

  GeometryOperation_ApplicationClient(const GeometryOperation_ApplicationClient& from);
  GeometryOperation_ApplicationClient(GeometryOperation_ApplicationClient&& from) noexcept
    : GeometryOperation_ApplicationClient() {
    *this = ::std::move(from);
  }

  inline GeometryOperation_ApplicationClient& operator=(const GeometryOperation_ApplicationClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryOperation_ApplicationClient& operator=(GeometryOperation_ApplicationClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryOperation_ApplicationClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryOperation_ApplicationClient* internal_default_instance() {
    return reinterpret_cast<const GeometryOperation_ApplicationClient*>(
               &_GeometryOperation_ApplicationClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeometryOperation_ApplicationClient& a, GeometryOperation_ApplicationClient& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryOperation_ApplicationClient* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryOperation_ApplicationClient* New() const final {
    return CreateMaybeMessage<GeometryOperation_ApplicationClient>(nullptr);
  }

  GeometryOperation_ApplicationClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryOperation_ApplicationClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryOperation_ApplicationClient& from);
  void MergeFrom(const GeometryOperation_ApplicationClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryOperation_ApplicationClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.GeometryOperation.ApplicationClient";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeometryOperation_2eproto);
    return ::descriptor_table_GeometryOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // string application = 1;
  void clear_application();
  const std::string& application() const;
  void set_application(const std::string& value);
  void set_application(std::string&& value);
  void set_application(const char* value);
  void set_application(const char* value, size_t size);
  std::string* mutable_application();
  std::string* release_application();
  void set_allocated_application(std::string* application);
  private:
  const std::string& _internal_application() const;
  void _internal_set_application(const std::string& value);
  std::string* _internal_mutable_application();
  public:

  // string client_id = 2;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.GeometryOperation.ApplicationClient)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GeometryOperation_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT GeometryOperation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.GeometryOperation) */ {
 public:
  GeometryOperation();
  virtual ~GeometryOperation();

  GeometryOperation(const GeometryOperation& from);
  GeometryOperation(GeometryOperation&& from) noexcept
    : GeometryOperation() {
    *this = ::std::move(from);
  }

  inline GeometryOperation& operator=(const GeometryOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryOperation& operator=(GeometryOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeometryOperation& default_instance();

  enum WhichCase {
    kRequestUpdate = 1,
    kRequestPersistentOwnership = 2,
    kClaimPersistentOwnership = 3,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryOperation* internal_default_instance() {
    return reinterpret_cast<const GeometryOperation*>(
               &_GeometryOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GeometryOperation& a, GeometryOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryOperation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryOperation* New() const final {
    return CreateMaybeMessage<GeometryOperation>(nullptr);
  }

  GeometryOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeometryOperation& from);
  void MergeFrom(const GeometryOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.GeometryOperation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GeometryOperation_2eproto);
    return ::descriptor_table_GeometryOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GeometryOperation_ApplicationClient ApplicationClient;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestUpdateFieldNumber = 1,
    kRequestPersistentOwnershipFieldNumber = 2,
    kClaimPersistentOwnershipFieldNumber = 3,
  };
  // .google.protobuf.Empty request_update = 1;
  bool has_request_update() const;
  private:
  bool _internal_has_request_update() const;
  public:
  void clear_request_update();
  const PROTOBUF_NAMESPACE_ID::Empty& request_update() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_update();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_update();
  void set_allocated_request_update(PROTOBUF_NAMESPACE_ID::Empty* request_update);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_update() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_update();
  public:

  // .inhumate.rti.proto.GeometryOperation.ApplicationClient request_persistent_ownership = 2;
  bool has_request_persistent_ownership() const;
  private:
  bool _internal_has_request_persistent_ownership() const;
  public:
  void clear_request_persistent_ownership();
  const ::inhumate::rti::proto::GeometryOperation_ApplicationClient& request_persistent_ownership() const;
  ::inhumate::rti::proto::GeometryOperation_ApplicationClient* release_request_persistent_ownership();
  ::inhumate::rti::proto::GeometryOperation_ApplicationClient* mutable_request_persistent_ownership();
  void set_allocated_request_persistent_ownership(::inhumate::rti::proto::GeometryOperation_ApplicationClient* request_persistent_ownership);
  private:
  const ::inhumate::rti::proto::GeometryOperation_ApplicationClient& _internal_request_persistent_ownership() const;
  ::inhumate::rti::proto::GeometryOperation_ApplicationClient* _internal_mutable_request_persistent_ownership();
  public:

  // .inhumate.rti.proto.GeometryOperation.ApplicationClient claim_persistent_ownership = 3;
  bool has_claim_persistent_ownership() const;
  private:
  bool _internal_has_claim_persistent_ownership() const;
  public:
  void clear_claim_persistent_ownership();
  const ::inhumate::rti::proto::GeometryOperation_ApplicationClient& claim_persistent_ownership() const;
  ::inhumate::rti::proto::GeometryOperation_ApplicationClient* release_claim_persistent_ownership();
  ::inhumate::rti::proto::GeometryOperation_ApplicationClient* mutable_claim_persistent_ownership();
  void set_allocated_claim_persistent_ownership(::inhumate::rti::proto::GeometryOperation_ApplicationClient* claim_persistent_ownership);
  private:
  const ::inhumate::rti::proto::GeometryOperation_ApplicationClient& _internal_claim_persistent_ownership() const;
  ::inhumate::rti::proto::GeometryOperation_ApplicationClient* _internal_mutable_claim_persistent_ownership();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.GeometryOperation)
 private:
  class _Internal;
  void set_has_request_update();
  void set_has_request_persistent_ownership();
  void set_has_claim_persistent_ownership();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_update_;
    ::inhumate::rti::proto::GeometryOperation_ApplicationClient* request_persistent_ownership_;
    ::inhumate::rti::proto::GeometryOperation_ApplicationClient* claim_persistent_ownership_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_GeometryOperation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeometryOperation_ApplicationClient

// string application = 1;
inline void GeometryOperation_ApplicationClient::clear_application() {
  application_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeometryOperation_ApplicationClient::application() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.GeometryOperation.ApplicationClient.application)
  return _internal_application();
}
inline void GeometryOperation_ApplicationClient::set_application(const std::string& value) {
  _internal_set_application(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.GeometryOperation.ApplicationClient.application)
}
inline std::string* GeometryOperation_ApplicationClient::mutable_application() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.GeometryOperation.ApplicationClient.application)
  return _internal_mutable_application();
}
inline const std::string& GeometryOperation_ApplicationClient::_internal_application() const {
  return application_.GetNoArena();
}
inline void GeometryOperation_ApplicationClient::_internal_set_application(const std::string& value) {
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeometryOperation_ApplicationClient::set_application(std::string&& value) {
  
  application_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.GeometryOperation.ApplicationClient.application)
}
inline void GeometryOperation_ApplicationClient::set_application(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.GeometryOperation.ApplicationClient.application)
}
inline void GeometryOperation_ApplicationClient::set_application(const char* value, size_t size) {
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.GeometryOperation.ApplicationClient.application)
}
inline std::string* GeometryOperation_ApplicationClient::_internal_mutable_application() {
  
  return application_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeometryOperation_ApplicationClient::release_application() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.GeometryOperation.ApplicationClient.application)
  
  return application_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeometryOperation_ApplicationClient::set_allocated_application(std::string* application) {
  if (application != nullptr) {
    
  } else {
    
  }
  application_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.GeometryOperation.ApplicationClient.application)
}

// string client_id = 2;
inline void GeometryOperation_ApplicationClient::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeometryOperation_ApplicationClient::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.GeometryOperation.ApplicationClient.client_id)
  return _internal_client_id();
}
inline void GeometryOperation_ApplicationClient::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.GeometryOperation.ApplicationClient.client_id)
}
inline std::string* GeometryOperation_ApplicationClient::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.GeometryOperation.ApplicationClient.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GeometryOperation_ApplicationClient::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GeometryOperation_ApplicationClient::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeometryOperation_ApplicationClient::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.GeometryOperation.ApplicationClient.client_id)
}
inline void GeometryOperation_ApplicationClient::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.GeometryOperation.ApplicationClient.client_id)
}
inline void GeometryOperation_ApplicationClient::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.GeometryOperation.ApplicationClient.client_id)
}
inline std::string* GeometryOperation_ApplicationClient::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeometryOperation_ApplicationClient::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.GeometryOperation.ApplicationClient.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeometryOperation_ApplicationClient::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.GeometryOperation.ApplicationClient.client_id)
}

// -------------------------------------------------------------------

// GeometryOperation

// .google.protobuf.Empty request_update = 1;
inline bool GeometryOperation::_internal_has_request_update() const {
  return which_case() == kRequestUpdate;
}
inline bool GeometryOperation::has_request_update() const {
  return _internal_has_request_update();
}
inline void GeometryOperation::set_has_request_update() {
  _oneof_case_[0] = kRequestUpdate;
}
inline PROTOBUF_NAMESPACE_ID::Empty* GeometryOperation::release_request_update() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.GeometryOperation.request_update)
  if (_internal_has_request_update()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_update_;
    which_.request_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& GeometryOperation::_internal_request_update() const {
  return _internal_has_request_update()
      ? *which_.request_update_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& GeometryOperation::request_update() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.GeometryOperation.request_update)
  return _internal_request_update();
}
inline PROTOBUF_NAMESPACE_ID::Empty* GeometryOperation::_internal_mutable_request_update() {
  if (!_internal_has_request_update()) {
    clear_which();
    set_has_request_update();
    which_.request_update_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_update_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* GeometryOperation::mutable_request_update() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.GeometryOperation.request_update)
  return _internal_mutable_request_update();
}

// .inhumate.rti.proto.GeometryOperation.ApplicationClient request_persistent_ownership = 2;
inline bool GeometryOperation::_internal_has_request_persistent_ownership() const {
  return which_case() == kRequestPersistentOwnership;
}
inline bool GeometryOperation::has_request_persistent_ownership() const {
  return _internal_has_request_persistent_ownership();
}
inline void GeometryOperation::set_has_request_persistent_ownership() {
  _oneof_case_[0] = kRequestPersistentOwnership;
}
inline void GeometryOperation::clear_request_persistent_ownership() {
  if (_internal_has_request_persistent_ownership()) {
    delete which_.request_persistent_ownership_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::GeometryOperation_ApplicationClient* GeometryOperation::release_request_persistent_ownership() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.GeometryOperation.request_persistent_ownership)
  if (_internal_has_request_persistent_ownership()) {
    clear_has_which();
      ::inhumate::rti::proto::GeometryOperation_ApplicationClient* temp = which_.request_persistent_ownership_;
    which_.request_persistent_ownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::GeometryOperation_ApplicationClient& GeometryOperation::_internal_request_persistent_ownership() const {
  return _internal_has_request_persistent_ownership()
      ? *which_.request_persistent_ownership_
      : *reinterpret_cast< ::inhumate::rti::proto::GeometryOperation_ApplicationClient*>(&::inhumate::rti::proto::_GeometryOperation_ApplicationClient_default_instance_);
}
inline const ::inhumate::rti::proto::GeometryOperation_ApplicationClient& GeometryOperation::request_persistent_ownership() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.GeometryOperation.request_persistent_ownership)
  return _internal_request_persistent_ownership();
}
inline ::inhumate::rti::proto::GeometryOperation_ApplicationClient* GeometryOperation::_internal_mutable_request_persistent_ownership() {
  if (!_internal_has_request_persistent_ownership()) {
    clear_which();
    set_has_request_persistent_ownership();
    which_.request_persistent_ownership_ = CreateMaybeMessage< ::inhumate::rti::proto::GeometryOperation_ApplicationClient >(
        GetArenaNoVirtual());
  }
  return which_.request_persistent_ownership_;
}
inline ::inhumate::rti::proto::GeometryOperation_ApplicationClient* GeometryOperation::mutable_request_persistent_ownership() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.GeometryOperation.request_persistent_ownership)
  return _internal_mutable_request_persistent_ownership();
}

// .inhumate.rti.proto.GeometryOperation.ApplicationClient claim_persistent_ownership = 3;
inline bool GeometryOperation::_internal_has_claim_persistent_ownership() const {
  return which_case() == kClaimPersistentOwnership;
}
inline bool GeometryOperation::has_claim_persistent_ownership() const {
  return _internal_has_claim_persistent_ownership();
}
inline void GeometryOperation::set_has_claim_persistent_ownership() {
  _oneof_case_[0] = kClaimPersistentOwnership;
}
inline void GeometryOperation::clear_claim_persistent_ownership() {
  if (_internal_has_claim_persistent_ownership()) {
    delete which_.claim_persistent_ownership_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::GeometryOperation_ApplicationClient* GeometryOperation::release_claim_persistent_ownership() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.GeometryOperation.claim_persistent_ownership)
  if (_internal_has_claim_persistent_ownership()) {
    clear_has_which();
      ::inhumate::rti::proto::GeometryOperation_ApplicationClient* temp = which_.claim_persistent_ownership_;
    which_.claim_persistent_ownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::GeometryOperation_ApplicationClient& GeometryOperation::_internal_claim_persistent_ownership() const {
  return _internal_has_claim_persistent_ownership()
      ? *which_.claim_persistent_ownership_
      : *reinterpret_cast< ::inhumate::rti::proto::GeometryOperation_ApplicationClient*>(&::inhumate::rti::proto::_GeometryOperation_ApplicationClient_default_instance_);
}
inline const ::inhumate::rti::proto::GeometryOperation_ApplicationClient& GeometryOperation::claim_persistent_ownership() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.GeometryOperation.claim_persistent_ownership)
  return _internal_claim_persistent_ownership();
}
inline ::inhumate::rti::proto::GeometryOperation_ApplicationClient* GeometryOperation::_internal_mutable_claim_persistent_ownership() {
  if (!_internal_has_claim_persistent_ownership()) {
    clear_which();
    set_has_claim_persistent_ownership();
    which_.claim_persistent_ownership_ = CreateMaybeMessage< ::inhumate::rti::proto::GeometryOperation_ApplicationClient >(
        GetArenaNoVirtual());
  }
  return which_.claim_persistent_ownership_;
}
inline ::inhumate::rti::proto::GeometryOperation_ApplicationClient* GeometryOperation::mutable_claim_persistent_ownership() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.GeometryOperation.claim_persistent_ownership)
  return _internal_mutable_claim_persistent_ownership();
}

inline bool GeometryOperation::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void GeometryOperation::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline GeometryOperation::WhichCase GeometryOperation::which_case() const {
  return GeometryOperation::WhichCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GeometryOperation_2eproto
