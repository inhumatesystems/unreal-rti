// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RuntimeControl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RuntimeControl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RuntimeControl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "RuntimeState.pb.h"
#include "Logs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RuntimeControl_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_RuntimeControl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RuntimeControl_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class RuntimeControl;
class RuntimeControlDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControlDefaultTypeInternal _RuntimeControl_default_instance_;
class RuntimeControl_Error;
class RuntimeControl_ErrorDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_ErrorDefaultTypeInternal _RuntimeControl_Error_default_instance_;
class RuntimeControl_Launch;
class RuntimeControl_LaunchDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_LaunchDefaultTypeInternal _RuntimeControl_Launch_default_instance_;
class RuntimeControl_Launch_ParameterValuesEntry_DoNotUse;
class RuntimeControl_Launch_ParameterValuesEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_Launch_ParameterValuesEntry_DoNotUseDefaultTypeInternal _RuntimeControl_Launch_ParameterValuesEntry_DoNotUse_default_instance_;
class RuntimeControl_LoadScenario;
class RuntimeControl_LoadScenarioDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_LoadScenarioDefaultTypeInternal _RuntimeControl_LoadScenario_default_instance_;
class RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse;
class RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUseDefaultTypeInternal _RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse_default_instance_;
class RuntimeControl_Seek;
class RuntimeControl_SeekDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_SeekDefaultTypeInternal _RuntimeControl_Seek_default_instance_;
class RuntimeControl_SetTimeScale;
class RuntimeControl_SetTimeScaleDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_SetTimeScaleDefaultTypeInternal _RuntimeControl_SetTimeScale_default_instance_;
class RuntimeControl_StateUpdate;
class RuntimeControl_StateUpdateDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_StateUpdateDefaultTypeInternal _RuntimeControl_StateUpdate_default_instance_;
class RuntimeControl_TimeSync;
class RuntimeControl_TimeSyncDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RuntimeControl_TimeSyncDefaultTypeInternal _RuntimeControl_TimeSync_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_Error* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_Error>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_Launch* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_Launch>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_Launch_ParameterValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_Launch_ParameterValuesEntry_DoNotUse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_LoadScenario* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_LoadScenario>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_Seek* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_Seek>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_SetTimeScale* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_SetTimeScale>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_StateUpdate* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_StateUpdate>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RuntimeControl_TimeSync* Arena::CreateMaybeMessage<::inhumate::rti::proto::RuntimeControl_TimeSync>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse();
  RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse& other);
  static const RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse*>(&_RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.RuntimeControl.LoadScenario.ParameterValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.RuntimeControl.LoadScenario.ParameterValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RuntimeControl_LoadScenario :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RuntimeControl.LoadScenario) */ {
 public:
  RuntimeControl_LoadScenario();
  virtual ~RuntimeControl_LoadScenario();

  RuntimeControl_LoadScenario(const RuntimeControl_LoadScenario& from);
  RuntimeControl_LoadScenario(RuntimeControl_LoadScenario&& from) noexcept
    : RuntimeControl_LoadScenario() {
    *this = ::std::move(from);
  }

  inline RuntimeControl_LoadScenario& operator=(const RuntimeControl_LoadScenario& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeControl_LoadScenario& operator=(RuntimeControl_LoadScenario&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeControl_LoadScenario& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeControl_LoadScenario* internal_default_instance() {
    return reinterpret_cast<const RuntimeControl_LoadScenario*>(
               &_RuntimeControl_LoadScenario_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RuntimeControl_LoadScenario& a, RuntimeControl_LoadScenario& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeControl_LoadScenario* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeControl_LoadScenario* New() const final {
    return CreateMaybeMessage<RuntimeControl_LoadScenario>(nullptr);
  }

  RuntimeControl_LoadScenario* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeControl_LoadScenario>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeControl_LoadScenario& from);
  void MergeFrom(const RuntimeControl_LoadScenario& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeControl_LoadScenario* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RuntimeControl.LoadScenario";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParameterValuesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, string> parameter_values = 2;
  int parameter_values_size() const;
  private:
  int _internal_parameter_values_size() const;
  public:
  void clear_parameter_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameter_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameter_values();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RuntimeControl.LoadScenario)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RuntimeControl_LoadScenario_ParameterValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > parameter_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeControl_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RuntimeControl_SetTimeScale :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RuntimeControl.SetTimeScale) */ {
 public:
  RuntimeControl_SetTimeScale();
  virtual ~RuntimeControl_SetTimeScale();

  RuntimeControl_SetTimeScale(const RuntimeControl_SetTimeScale& from);
  RuntimeControl_SetTimeScale(RuntimeControl_SetTimeScale&& from) noexcept
    : RuntimeControl_SetTimeScale() {
    *this = ::std::move(from);
  }

  inline RuntimeControl_SetTimeScale& operator=(const RuntimeControl_SetTimeScale& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeControl_SetTimeScale& operator=(RuntimeControl_SetTimeScale&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeControl_SetTimeScale& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeControl_SetTimeScale* internal_default_instance() {
    return reinterpret_cast<const RuntimeControl_SetTimeScale*>(
               &_RuntimeControl_SetTimeScale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RuntimeControl_SetTimeScale& a, RuntimeControl_SetTimeScale& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeControl_SetTimeScale* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeControl_SetTimeScale* New() const final {
    return CreateMaybeMessage<RuntimeControl_SetTimeScale>(nullptr);
  }

  RuntimeControl_SetTimeScale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeControl_SetTimeScale>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeControl_SetTimeScale& from);
  void MergeFrom(const RuntimeControl_SetTimeScale& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeControl_SetTimeScale* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RuntimeControl.SetTimeScale";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeScaleFieldNumber = 1,
  };
  // double time_scale = 1;
  void clear_time_scale();
  double time_scale() const;
  void set_time_scale(double value);
  private:
  double _internal_time_scale() const;
  void _internal_set_time_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RuntimeControl.SetTimeScale)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double time_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeControl_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RuntimeControl_Seek :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RuntimeControl.Seek) */ {
 public:
  RuntimeControl_Seek();
  virtual ~RuntimeControl_Seek();

  RuntimeControl_Seek(const RuntimeControl_Seek& from);
  RuntimeControl_Seek(RuntimeControl_Seek&& from) noexcept
    : RuntimeControl_Seek() {
    *this = ::std::move(from);
  }

  inline RuntimeControl_Seek& operator=(const RuntimeControl_Seek& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeControl_Seek& operator=(RuntimeControl_Seek&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeControl_Seek& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeControl_Seek* internal_default_instance() {
    return reinterpret_cast<const RuntimeControl_Seek*>(
               &_RuntimeControl_Seek_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RuntimeControl_Seek& a, RuntimeControl_Seek& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeControl_Seek* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeControl_Seek* New() const final {
    return CreateMaybeMessage<RuntimeControl_Seek>(nullptr);
  }

  RuntimeControl_Seek* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeControl_Seek>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeControl_Seek& from);
  void MergeFrom(const RuntimeControl_Seek& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeControl_Seek* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RuntimeControl.Seek";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RuntimeControl.Seek)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeControl_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RuntimeControl_StateUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RuntimeControl.StateUpdate) */ {
 public:
  RuntimeControl_StateUpdate();
  virtual ~RuntimeControl_StateUpdate();

  RuntimeControl_StateUpdate(const RuntimeControl_StateUpdate& from);
  RuntimeControl_StateUpdate(RuntimeControl_StateUpdate&& from) noexcept
    : RuntimeControl_StateUpdate() {
    *this = ::std::move(from);
  }

  inline RuntimeControl_StateUpdate& operator=(const RuntimeControl_StateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeControl_StateUpdate& operator=(RuntimeControl_StateUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeControl_StateUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeControl_StateUpdate* internal_default_instance() {
    return reinterpret_cast<const RuntimeControl_StateUpdate*>(
               &_RuntimeControl_StateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RuntimeControl_StateUpdate& a, RuntimeControl_StateUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeControl_StateUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeControl_StateUpdate* New() const final {
    return CreateMaybeMessage<RuntimeControl_StateUpdate>(nullptr);
  }

  RuntimeControl_StateUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeControl_StateUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeControl_StateUpdate& from);
  void MergeFrom(const RuntimeControl_StateUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeControl_StateUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RuntimeControl.StateUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // .inhumate.rti.proto.RuntimeState state = 2;
  void clear_state();
  ::inhumate::rti::proto::RuntimeState state() const;
  void set_state(::inhumate::rti::proto::RuntimeState value);
  private:
  ::inhumate::rti::proto::RuntimeState _internal_state() const;
  void _internal_set_state(::inhumate::rti::proto::RuntimeState value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RuntimeControl.StateUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeControl_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RuntimeControl_Error :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RuntimeControl.Error) */ {
 public:
  RuntimeControl_Error();
  virtual ~RuntimeControl_Error();

  RuntimeControl_Error(const RuntimeControl_Error& from);
  RuntimeControl_Error(RuntimeControl_Error&& from) noexcept
    : RuntimeControl_Error() {
    *this = ::std::move(from);
  }

  inline RuntimeControl_Error& operator=(const RuntimeControl_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeControl_Error& operator=(RuntimeControl_Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeControl_Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeControl_Error* internal_default_instance() {
    return reinterpret_cast<const RuntimeControl_Error*>(
               &_RuntimeControl_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RuntimeControl_Error& a, RuntimeControl_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeControl_Error* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeControl_Error* New() const final {
    return CreateMaybeMessage<RuntimeControl_Error>(nullptr);
  }

  RuntimeControl_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeControl_Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeControl_Error& from);
  void MergeFrom(const RuntimeControl_Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeControl_Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RuntimeControl.Error";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .inhumate.rti.proto.RuntimeState state = 2;
  void clear_state();
  ::inhumate::rti::proto::RuntimeState state() const;
  void set_state(::inhumate::rti::proto::RuntimeState value);
  private:
  ::inhumate::rti::proto::RuntimeState _internal_state() const;
  void _internal_set_state(::inhumate::rti::proto::RuntimeState value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RuntimeControl.Error)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeControl_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RuntimeControl_TimeSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RuntimeControl.TimeSync) */ {
 public:
  RuntimeControl_TimeSync();
  virtual ~RuntimeControl_TimeSync();

  RuntimeControl_TimeSync(const RuntimeControl_TimeSync& from);
  RuntimeControl_TimeSync(RuntimeControl_TimeSync&& from) noexcept
    : RuntimeControl_TimeSync() {
    *this = ::std::move(from);
  }

  inline RuntimeControl_TimeSync& operator=(const RuntimeControl_TimeSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeControl_TimeSync& operator=(RuntimeControl_TimeSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeControl_TimeSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeControl_TimeSync* internal_default_instance() {
    return reinterpret_cast<const RuntimeControl_TimeSync*>(
               &_RuntimeControl_TimeSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RuntimeControl_TimeSync& a, RuntimeControl_TimeSync& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeControl_TimeSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeControl_TimeSync* New() const final {
    return CreateMaybeMessage<RuntimeControl_TimeSync>(nullptr);
  }

  RuntimeControl_TimeSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeControl_TimeSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeControl_TimeSync& from);
  void MergeFrom(const RuntimeControl_TimeSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeControl_TimeSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RuntimeControl.TimeSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterClientIdFieldNumber = 3,
    kTimeFieldNumber = 1,
    kTimeScaleFieldNumber = 2,
  };
  // string master_client_id = 3;
  void clear_master_client_id();
  const std::string& master_client_id() const;
  void set_master_client_id(const std::string& value);
  void set_master_client_id(std::string&& value);
  void set_master_client_id(const char* value);
  void set_master_client_id(const char* value, size_t size);
  std::string* mutable_master_client_id();
  std::string* release_master_client_id();
  void set_allocated_master_client_id(std::string* master_client_id);
  private:
  const std::string& _internal_master_client_id() const;
  void _internal_set_master_client_id(const std::string& value);
  std::string* _internal_mutable_master_client_id();
  public:

  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // double time_scale = 2;
  void clear_time_scale();
  double time_scale() const;
  void set_time_scale(double value);
  private:
  double _internal_time_scale() const;
  void _internal_set_time_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RuntimeControl.TimeSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_client_id_;
  double time_;
  double time_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeControl_2eproto;
};
// -------------------------------------------------------------------

class RuntimeControl_Launch_ParameterValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RuntimeControl_Launch_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RuntimeControl_Launch_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RuntimeControl_Launch_ParameterValuesEntry_DoNotUse();
  RuntimeControl_Launch_ParameterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RuntimeControl_Launch_ParameterValuesEntry_DoNotUse& other);
  static const RuntimeControl_Launch_ParameterValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RuntimeControl_Launch_ParameterValuesEntry_DoNotUse*>(&_RuntimeControl_Launch_ParameterValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.RuntimeControl.Launch.ParameterValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.RuntimeControl.Launch.ParameterValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RuntimeControl_Launch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RuntimeControl.Launch) */ {
 public:
  RuntimeControl_Launch();
  virtual ~RuntimeControl_Launch();

  RuntimeControl_Launch(const RuntimeControl_Launch& from);
  RuntimeControl_Launch(RuntimeControl_Launch&& from) noexcept
    : RuntimeControl_Launch() {
    *this = ::std::move(from);
  }

  inline RuntimeControl_Launch& operator=(const RuntimeControl_Launch& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeControl_Launch& operator=(RuntimeControl_Launch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeControl_Launch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeControl_Launch* internal_default_instance() {
    return reinterpret_cast<const RuntimeControl_Launch*>(
               &_RuntimeControl_Launch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RuntimeControl_Launch& a, RuntimeControl_Launch& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeControl_Launch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeControl_Launch* New() const final {
    return CreateMaybeMessage<RuntimeControl_Launch>(nullptr);
  }

  RuntimeControl_Launch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeControl_Launch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeControl_Launch& from);
  void MergeFrom(const RuntimeControl_Launch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeControl_Launch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RuntimeControl.Launch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParameterValuesFieldNumber = 2,
    kConfigurationFieldNumber = 1,
  };
  // map<string, string> parameter_values = 2;
  int parameter_values_size() const;
  private:
  int _internal_parameter_values_size() const;
  public:
  void clear_parameter_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameter_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameter_values();

  // string configuration = 1;
  void clear_configuration();
  const std::string& configuration() const;
  void set_configuration(const std::string& value);
  void set_configuration(std::string&& value);
  void set_configuration(const char* value);
  void set_configuration(const char* value, size_t size);
  std::string* mutable_configuration();
  std::string* release_configuration();
  void set_allocated_configuration(std::string* configuration);
  private:
  const std::string& _internal_configuration() const;
  void _internal_set_configuration(const std::string& value);
  std::string* _internal_mutable_configuration();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RuntimeControl.Launch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RuntimeControl_Launch_ParameterValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > parameter_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeControl_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RuntimeControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RuntimeControl) */ {
 public:
  RuntimeControl();
  virtual ~RuntimeControl();

  RuntimeControl(const RuntimeControl& from);
  RuntimeControl(RuntimeControl&& from) noexcept
    : RuntimeControl() {
    *this = ::std::move(from);
  }

  inline RuntimeControl& operator=(const RuntimeControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeControl& operator=(RuntimeControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeControl& default_instance();

  enum ControlCase {
    kLoadScenario = 1,
    kStart = 2,
    kPlay = 3,
    kPause = 4,
    kEnd = 5,
    kStop = 6,
    kReset = 7,
    kSetTimeScale = 10,
    kSeek = 11,
    kTimeSync = 12,
    kState = 16,
    kError = 17,
    kNewLog = 21,
    kRequestCurrentLog = 22,
    kCurrentLog = 23,
    kLoadLog = 24,
    kMarkLog = 25,
    kUnmarkLog = 26,
    kLaunch = 31,
    kShutdown = 32,
    kLaunchItem = 33,
    kShutdownItem = 34,
    kRunRemoteAction = 35,
    kRequestCurrentScenario = 36,
    kCurrentScenario = 37,
    CONTROL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeControl* internal_default_instance() {
    return reinterpret_cast<const RuntimeControl*>(
               &_RuntimeControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RuntimeControl& a, RuntimeControl& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeControl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeControl* New() const final {
    return CreateMaybeMessage<RuntimeControl>(nullptr);
  }

  RuntimeControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeControl& from);
  void MergeFrom(const RuntimeControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RuntimeControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RuntimeControl_2eproto);
    return ::descriptor_table_RuntimeControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RuntimeControl_LoadScenario LoadScenario;
  typedef RuntimeControl_SetTimeScale SetTimeScale;
  typedef RuntimeControl_Seek Seek;
  typedef RuntimeControl_StateUpdate StateUpdate;
  typedef RuntimeControl_Error Error;
  typedef RuntimeControl_TimeSync TimeSync;
  typedef RuntimeControl_Launch Launch;

  // accessors -------------------------------------------------------

  enum : int {
    kLoadScenarioFieldNumber = 1,
    kStartFieldNumber = 2,
    kPlayFieldNumber = 3,
    kPauseFieldNumber = 4,
    kEndFieldNumber = 5,
    kStopFieldNumber = 6,
    kResetFieldNumber = 7,
    kSetTimeScaleFieldNumber = 10,
    kSeekFieldNumber = 11,
    kTimeSyncFieldNumber = 12,
    kStateFieldNumber = 16,
    kErrorFieldNumber = 17,
    kNewLogFieldNumber = 21,
    kRequestCurrentLogFieldNumber = 22,
    kCurrentLogFieldNumber = 23,
    kLoadLogFieldNumber = 24,
    kMarkLogFieldNumber = 25,
    kUnmarkLogFieldNumber = 26,
    kLaunchFieldNumber = 31,
    kShutdownFieldNumber = 32,
    kLaunchItemFieldNumber = 33,
    kShutdownItemFieldNumber = 34,
    kRunRemoteActionFieldNumber = 35,
    kRequestCurrentScenarioFieldNumber = 36,
    kCurrentScenarioFieldNumber = 37,
  };
  // .inhumate.rti.proto.RuntimeControl.LoadScenario load_scenario = 1;
  bool has_load_scenario() const;
  private:
  bool _internal_has_load_scenario() const;
  public:
  void clear_load_scenario();
  const ::inhumate::rti::proto::RuntimeControl_LoadScenario& load_scenario() const;
  ::inhumate::rti::proto::RuntimeControl_LoadScenario* release_load_scenario();
  ::inhumate::rti::proto::RuntimeControl_LoadScenario* mutable_load_scenario();
  void set_allocated_load_scenario(::inhumate::rti::proto::RuntimeControl_LoadScenario* load_scenario);
  private:
  const ::inhumate::rti::proto::RuntimeControl_LoadScenario& _internal_load_scenario() const;
  ::inhumate::rti::proto::RuntimeControl_LoadScenario* _internal_mutable_load_scenario();
  public:

  // .google.protobuf.Empty start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Empty& start() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_start();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Empty* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_start();
  public:

  // .google.protobuf.Empty play = 3;
  bool has_play() const;
  private:
  bool _internal_has_play() const;
  public:
  void clear_play();
  const PROTOBUF_NAMESPACE_ID::Empty& play() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_play();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_play();
  void set_allocated_play(PROTOBUF_NAMESPACE_ID::Empty* play);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_play() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_play();
  public:

  // .google.protobuf.Empty pause = 4;
  bool has_pause() const;
  private:
  bool _internal_has_pause() const;
  public:
  void clear_pause();
  const PROTOBUF_NAMESPACE_ID::Empty& pause() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_pause();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_pause();
  void set_allocated_pause(PROTOBUF_NAMESPACE_ID::Empty* pause);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_pause() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_pause();
  public:

  // .google.protobuf.Empty end = 5;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Empty& end() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_end();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Empty* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_end();
  public:

  // .google.protobuf.Empty stop = 6;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  const PROTOBUF_NAMESPACE_ID::Empty& stop() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_stop();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_stop();
  void set_allocated_stop(PROTOBUF_NAMESPACE_ID::Empty* stop);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_stop() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_stop();
  public:

  // .google.protobuf.Empty reset = 7;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  const PROTOBUF_NAMESPACE_ID::Empty& reset() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_reset();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_reset();
  void set_allocated_reset(PROTOBUF_NAMESPACE_ID::Empty* reset);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_reset() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_reset();
  public:

  // .inhumate.rti.proto.RuntimeControl.SetTimeScale set_time_scale = 10;
  bool has_set_time_scale() const;
  private:
  bool _internal_has_set_time_scale() const;
  public:
  void clear_set_time_scale();
  const ::inhumate::rti::proto::RuntimeControl_SetTimeScale& set_time_scale() const;
  ::inhumate::rti::proto::RuntimeControl_SetTimeScale* release_set_time_scale();
  ::inhumate::rti::proto::RuntimeControl_SetTimeScale* mutable_set_time_scale();
  void set_allocated_set_time_scale(::inhumate::rti::proto::RuntimeControl_SetTimeScale* set_time_scale);
  private:
  const ::inhumate::rti::proto::RuntimeControl_SetTimeScale& _internal_set_time_scale() const;
  ::inhumate::rti::proto::RuntimeControl_SetTimeScale* _internal_mutable_set_time_scale();
  public:

  // .inhumate.rti.proto.RuntimeControl.Seek seek = 11;
  bool has_seek() const;
  private:
  bool _internal_has_seek() const;
  public:
  void clear_seek();
  const ::inhumate::rti::proto::RuntimeControl_Seek& seek() const;
  ::inhumate::rti::proto::RuntimeControl_Seek* release_seek();
  ::inhumate::rti::proto::RuntimeControl_Seek* mutable_seek();
  void set_allocated_seek(::inhumate::rti::proto::RuntimeControl_Seek* seek);
  private:
  const ::inhumate::rti::proto::RuntimeControl_Seek& _internal_seek() const;
  ::inhumate::rti::proto::RuntimeControl_Seek* _internal_mutable_seek();
  public:

  // .inhumate.rti.proto.RuntimeControl.TimeSync time_sync = 12;
  bool has_time_sync() const;
  private:
  bool _internal_has_time_sync() const;
  public:
  void clear_time_sync();
  const ::inhumate::rti::proto::RuntimeControl_TimeSync& time_sync() const;
  ::inhumate::rti::proto::RuntimeControl_TimeSync* release_time_sync();
  ::inhumate::rti::proto::RuntimeControl_TimeSync* mutable_time_sync();
  void set_allocated_time_sync(::inhumate::rti::proto::RuntimeControl_TimeSync* time_sync);
  private:
  const ::inhumate::rti::proto::RuntimeControl_TimeSync& _internal_time_sync() const;
  ::inhumate::rti::proto::RuntimeControl_TimeSync* _internal_mutable_time_sync();
  public:

  // .inhumate.rti.proto.RuntimeControl.StateUpdate state = 16;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::inhumate::rti::proto::RuntimeControl_StateUpdate& state() const;
  ::inhumate::rti::proto::RuntimeControl_StateUpdate* release_state();
  ::inhumate::rti::proto::RuntimeControl_StateUpdate* mutable_state();
  void set_allocated_state(::inhumate::rti::proto::RuntimeControl_StateUpdate* state);
  private:
  const ::inhumate::rti::proto::RuntimeControl_StateUpdate& _internal_state() const;
  ::inhumate::rti::proto::RuntimeControl_StateUpdate* _internal_mutable_state();
  public:

  // .inhumate.rti.proto.RuntimeControl.Error error = 17;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::inhumate::rti::proto::RuntimeControl_Error& error() const;
  ::inhumate::rti::proto::RuntimeControl_Error* release_error();
  ::inhumate::rti::proto::RuntimeControl_Error* mutable_error();
  void set_allocated_error(::inhumate::rti::proto::RuntimeControl_Error* error);
  private:
  const ::inhumate::rti::proto::RuntimeControl_Error& _internal_error() const;
  ::inhumate::rti::proto::RuntimeControl_Error* _internal_mutable_error();
  public:

  // .google.protobuf.Empty new_log = 21;
  bool has_new_log() const;
  private:
  bool _internal_has_new_log() const;
  public:
  void clear_new_log();
  const PROTOBUF_NAMESPACE_ID::Empty& new_log() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_new_log();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_new_log();
  void set_allocated_new_log(PROTOBUF_NAMESPACE_ID::Empty* new_log);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_new_log() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_new_log();
  public:

  // .google.protobuf.Empty request_current_log = 22;
  bool has_request_current_log() const;
  private:
  bool _internal_has_request_current_log() const;
  public:
  void clear_request_current_log();
  const PROTOBUF_NAMESPACE_ID::Empty& request_current_log() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_current_log();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_current_log();
  void set_allocated_request_current_log(PROTOBUF_NAMESPACE_ID::Empty* request_current_log);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_current_log() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_current_log();
  public:

  // .inhumate.rti.proto.Log current_log = 23;
  bool has_current_log() const;
  private:
  bool _internal_has_current_log() const;
  public:
  void clear_current_log();
  const ::inhumate::rti::proto::Log& current_log() const;
  ::inhumate::rti::proto::Log* release_current_log();
  ::inhumate::rti::proto::Log* mutable_current_log();
  void set_allocated_current_log(::inhumate::rti::proto::Log* current_log);
  private:
  const ::inhumate::rti::proto::Log& _internal_current_log() const;
  ::inhumate::rti::proto::Log* _internal_mutable_current_log();
  public:

  // string load_log = 24;
  private:
  bool _internal_has_load_log() const;
  public:
  void clear_load_log();
  const std::string& load_log() const;
  void set_load_log(const std::string& value);
  void set_load_log(std::string&& value);
  void set_load_log(const char* value);
  void set_load_log(const char* value, size_t size);
  std::string* mutable_load_log();
  std::string* release_load_log();
  void set_allocated_load_log(std::string* load_log);
  private:
  const std::string& _internal_load_log() const;
  void _internal_set_load_log(const std::string& value);
  std::string* _internal_mutable_load_log();
  public:

  // .inhumate.rti.proto.LogMark mark_log = 25;
  bool has_mark_log() const;
  private:
  bool _internal_has_mark_log() const;
  public:
  void clear_mark_log();
  const ::inhumate::rti::proto::LogMark& mark_log() const;
  ::inhumate::rti::proto::LogMark* release_mark_log();
  ::inhumate::rti::proto::LogMark* mutable_mark_log();
  void set_allocated_mark_log(::inhumate::rti::proto::LogMark* mark_log);
  private:
  const ::inhumate::rti::proto::LogMark& _internal_mark_log() const;
  ::inhumate::rti::proto::LogMark* _internal_mutable_mark_log();
  public:

  // string unmark_log = 26;
  private:
  bool _internal_has_unmark_log() const;
  public:
  void clear_unmark_log();
  const std::string& unmark_log() const;
  void set_unmark_log(const std::string& value);
  void set_unmark_log(std::string&& value);
  void set_unmark_log(const char* value);
  void set_unmark_log(const char* value, size_t size);
  std::string* mutable_unmark_log();
  std::string* release_unmark_log();
  void set_allocated_unmark_log(std::string* unmark_log);
  private:
  const std::string& _internal_unmark_log() const;
  void _internal_set_unmark_log(const std::string& value);
  std::string* _internal_mutable_unmark_log();
  public:

  // .inhumate.rti.proto.RuntimeControl.Launch launch = 31;
  bool has_launch() const;
  private:
  bool _internal_has_launch() const;
  public:
  void clear_launch();
  const ::inhumate::rti::proto::RuntimeControl_Launch& launch() const;
  ::inhumate::rti::proto::RuntimeControl_Launch* release_launch();
  ::inhumate::rti::proto::RuntimeControl_Launch* mutable_launch();
  void set_allocated_launch(::inhumate::rti::proto::RuntimeControl_Launch* launch);
  private:
  const ::inhumate::rti::proto::RuntimeControl_Launch& _internal_launch() const;
  ::inhumate::rti::proto::RuntimeControl_Launch* _internal_mutable_launch();
  public:

  // .google.protobuf.Empty shutdown = 32;
  bool has_shutdown() const;
  private:
  bool _internal_has_shutdown() const;
  public:
  void clear_shutdown();
  const PROTOBUF_NAMESPACE_ID::Empty& shutdown() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_shutdown();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_shutdown();
  void set_allocated_shutdown(PROTOBUF_NAMESPACE_ID::Empty* shutdown);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_shutdown() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_shutdown();
  public:

  // string launch_item = 33;
  private:
  bool _internal_has_launch_item() const;
  public:
  void clear_launch_item();
  const std::string& launch_item() const;
  void set_launch_item(const std::string& value);
  void set_launch_item(std::string&& value);
  void set_launch_item(const char* value);
  void set_launch_item(const char* value, size_t size);
  std::string* mutable_launch_item();
  std::string* release_launch_item();
  void set_allocated_launch_item(std::string* launch_item);
  private:
  const std::string& _internal_launch_item() const;
  void _internal_set_launch_item(const std::string& value);
  std::string* _internal_mutable_launch_item();
  public:

  // string shutdown_item = 34;
  private:
  bool _internal_has_shutdown_item() const;
  public:
  void clear_shutdown_item();
  const std::string& shutdown_item() const;
  void set_shutdown_item(const std::string& value);
  void set_shutdown_item(std::string&& value);
  void set_shutdown_item(const char* value);
  void set_shutdown_item(const char* value, size_t size);
  std::string* mutable_shutdown_item();
  std::string* release_shutdown_item();
  void set_allocated_shutdown_item(std::string* shutdown_item);
  private:
  const std::string& _internal_shutdown_item() const;
  void _internal_set_shutdown_item(const std::string& value);
  std::string* _internal_mutable_shutdown_item();
  public:

  // string run_remote_action = 35;
  private:
  bool _internal_has_run_remote_action() const;
  public:
  void clear_run_remote_action();
  const std::string& run_remote_action() const;
  void set_run_remote_action(const std::string& value);
  void set_run_remote_action(std::string&& value);
  void set_run_remote_action(const char* value);
  void set_run_remote_action(const char* value, size_t size);
  std::string* mutable_run_remote_action();
  std::string* release_run_remote_action();
  void set_allocated_run_remote_action(std::string* run_remote_action);
  private:
  const std::string& _internal_run_remote_action() const;
  void _internal_set_run_remote_action(const std::string& value);
  std::string* _internal_mutable_run_remote_action();
  public:

  // .google.protobuf.Empty request_current_scenario = 36;
  bool has_request_current_scenario() const;
  private:
  bool _internal_has_request_current_scenario() const;
  public:
  void clear_request_current_scenario();
  const PROTOBUF_NAMESPACE_ID::Empty& request_current_scenario() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_current_scenario();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_current_scenario();
  void set_allocated_request_current_scenario(PROTOBUF_NAMESPACE_ID::Empty* request_current_scenario);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_current_scenario() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_current_scenario();
  public:

  // .inhumate.rti.proto.RuntimeControl.LoadScenario current_scenario = 37;
  bool has_current_scenario() const;
  private:
  bool _internal_has_current_scenario() const;
  public:
  void clear_current_scenario();
  const ::inhumate::rti::proto::RuntimeControl_LoadScenario& current_scenario() const;
  ::inhumate::rti::proto::RuntimeControl_LoadScenario* release_current_scenario();
  ::inhumate::rti::proto::RuntimeControl_LoadScenario* mutable_current_scenario();
  void set_allocated_current_scenario(::inhumate::rti::proto::RuntimeControl_LoadScenario* current_scenario);
  private:
  const ::inhumate::rti::proto::RuntimeControl_LoadScenario& _internal_current_scenario() const;
  ::inhumate::rti::proto::RuntimeControl_LoadScenario* _internal_mutable_current_scenario();
  public:

  void clear_control();
  ControlCase control_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RuntimeControl)
 private:
  class _Internal;
  void set_has_load_scenario();
  void set_has_start();
  void set_has_play();
  void set_has_pause();
  void set_has_end();
  void set_has_stop();
  void set_has_reset();
  void set_has_set_time_scale();
  void set_has_seek();
  void set_has_time_sync();
  void set_has_state();
  void set_has_error();
  void set_has_new_log();
  void set_has_request_current_log();
  void set_has_current_log();
  void set_has_load_log();
  void set_has_mark_log();
  void set_has_unmark_log();
  void set_has_launch();
  void set_has_shutdown();
  void set_has_launch_item();
  void set_has_shutdown_item();
  void set_has_run_remote_action();
  void set_has_request_current_scenario();
  void set_has_current_scenario();

  inline bool has_control() const;
  inline void clear_has_control();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ControlUnion {
    ControlUnion() {}
    ::inhumate::rti::proto::RuntimeControl_LoadScenario* load_scenario_;
    PROTOBUF_NAMESPACE_ID::Empty* start_;
    PROTOBUF_NAMESPACE_ID::Empty* play_;
    PROTOBUF_NAMESPACE_ID::Empty* pause_;
    PROTOBUF_NAMESPACE_ID::Empty* end_;
    PROTOBUF_NAMESPACE_ID::Empty* stop_;
    PROTOBUF_NAMESPACE_ID::Empty* reset_;
    ::inhumate::rti::proto::RuntimeControl_SetTimeScale* set_time_scale_;
    ::inhumate::rti::proto::RuntimeControl_Seek* seek_;
    ::inhumate::rti::proto::RuntimeControl_TimeSync* time_sync_;
    ::inhumate::rti::proto::RuntimeControl_StateUpdate* state_;
    ::inhumate::rti::proto::RuntimeControl_Error* error_;
    PROTOBUF_NAMESPACE_ID::Empty* new_log_;
    PROTOBUF_NAMESPACE_ID::Empty* request_current_log_;
    ::inhumate::rti::proto::Log* current_log_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_log_;
    ::inhumate::rti::proto::LogMark* mark_log_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unmark_log_;
    ::inhumate::rti::proto::RuntimeControl_Launch* launch_;
    PROTOBUF_NAMESPACE_ID::Empty* shutdown_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_item_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shutdown_item_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_remote_action_;
    PROTOBUF_NAMESPACE_ID::Empty* request_current_scenario_;
    ::inhumate::rti::proto::RuntimeControl_LoadScenario* current_scenario_;
  } control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_RuntimeControl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RuntimeControl_LoadScenario

// string name = 1;
inline void RuntimeControl_LoadScenario::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RuntimeControl_LoadScenario::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.LoadScenario.name)
  return _internal_name();
}
inline void RuntimeControl_LoadScenario::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.LoadScenario.name)
}
inline std::string* RuntimeControl_LoadScenario::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.LoadScenario.name)
  return _internal_mutable_name();
}
inline const std::string& RuntimeControl_LoadScenario::_internal_name() const {
  return name_.GetNoArena();
}
inline void RuntimeControl_LoadScenario::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl_LoadScenario::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.LoadScenario.name)
}
inline void RuntimeControl_LoadScenario::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.LoadScenario.name)
}
inline void RuntimeControl_LoadScenario::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.LoadScenario.name)
}
inline std::string* RuntimeControl_LoadScenario::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl_LoadScenario::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.LoadScenario.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeControl_LoadScenario::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.LoadScenario.name)
}

// map<string, string> parameter_values = 2;
inline int RuntimeControl_LoadScenario::_internal_parameter_values_size() const {
  return parameter_values_.size();
}
inline int RuntimeControl_LoadScenario::parameter_values_size() const {
  return _internal_parameter_values_size();
}
inline void RuntimeControl_LoadScenario::clear_parameter_values() {
  parameter_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RuntimeControl_LoadScenario::_internal_parameter_values() const {
  return parameter_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RuntimeControl_LoadScenario::parameter_values() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.RuntimeControl.LoadScenario.parameter_values)
  return _internal_parameter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RuntimeControl_LoadScenario::_internal_mutable_parameter_values() {
  return parameter_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RuntimeControl_LoadScenario::mutable_parameter_values() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.RuntimeControl.LoadScenario.parameter_values)
  return _internal_mutable_parameter_values();
}

// -------------------------------------------------------------------

// RuntimeControl_SetTimeScale

// double time_scale = 1;
inline void RuntimeControl_SetTimeScale::clear_time_scale() {
  time_scale_ = 0;
}
inline double RuntimeControl_SetTimeScale::_internal_time_scale() const {
  return time_scale_;
}
inline double RuntimeControl_SetTimeScale::time_scale() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.SetTimeScale.time_scale)
  return _internal_time_scale();
}
inline void RuntimeControl_SetTimeScale::_internal_set_time_scale(double value) {
  
  time_scale_ = value;
}
inline void RuntimeControl_SetTimeScale::set_time_scale(double value) {
  _internal_set_time_scale(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.SetTimeScale.time_scale)
}

// -------------------------------------------------------------------

// RuntimeControl_Seek

// double time = 1;
inline void RuntimeControl_Seek::clear_time() {
  time_ = 0;
}
inline double RuntimeControl_Seek::_internal_time() const {
  return time_;
}
inline double RuntimeControl_Seek::time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.Seek.time)
  return _internal_time();
}
inline void RuntimeControl_Seek::_internal_set_time(double value) {
  
  time_ = value;
}
inline void RuntimeControl_Seek::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.Seek.time)
}

// -------------------------------------------------------------------

// RuntimeControl_StateUpdate

// string client_id = 1;
inline void RuntimeControl_StateUpdate::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RuntimeControl_StateUpdate::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.StateUpdate.client_id)
  return _internal_client_id();
}
inline void RuntimeControl_StateUpdate::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.StateUpdate.client_id)
}
inline std::string* RuntimeControl_StateUpdate::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.StateUpdate.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& RuntimeControl_StateUpdate::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void RuntimeControl_StateUpdate::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl_StateUpdate::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.StateUpdate.client_id)
}
inline void RuntimeControl_StateUpdate::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.StateUpdate.client_id)
}
inline void RuntimeControl_StateUpdate::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.StateUpdate.client_id)
}
inline std::string* RuntimeControl_StateUpdate::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl_StateUpdate::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.StateUpdate.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeControl_StateUpdate::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.StateUpdate.client_id)
}

// .inhumate.rti.proto.RuntimeState state = 2;
inline void RuntimeControl_StateUpdate::clear_state() {
  state_ = 0;
}
inline ::inhumate::rti::proto::RuntimeState RuntimeControl_StateUpdate::_internal_state() const {
  return static_cast< ::inhumate::rti::proto::RuntimeState >(state_);
}
inline ::inhumate::rti::proto::RuntimeState RuntimeControl_StateUpdate::state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.StateUpdate.state)
  return _internal_state();
}
inline void RuntimeControl_StateUpdate::_internal_set_state(::inhumate::rti::proto::RuntimeState value) {
  
  state_ = value;
}
inline void RuntimeControl_StateUpdate::set_state(::inhumate::rti::proto::RuntimeState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.StateUpdate.state)
}

// -------------------------------------------------------------------

// RuntimeControl_Error

// string client_id = 1;
inline void RuntimeControl_Error::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RuntimeControl_Error::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.Error.client_id)
  return _internal_client_id();
}
inline void RuntimeControl_Error::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.Error.client_id)
}
inline std::string* RuntimeControl_Error::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.Error.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& RuntimeControl_Error::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void RuntimeControl_Error::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl_Error::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.Error.client_id)
}
inline void RuntimeControl_Error::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.Error.client_id)
}
inline void RuntimeControl_Error::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.Error.client_id)
}
inline std::string* RuntimeControl_Error::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl_Error::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.Error.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeControl_Error::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.Error.client_id)
}

// .inhumate.rti.proto.RuntimeState state = 2;
inline void RuntimeControl_Error::clear_state() {
  state_ = 0;
}
inline ::inhumate::rti::proto::RuntimeState RuntimeControl_Error::_internal_state() const {
  return static_cast< ::inhumate::rti::proto::RuntimeState >(state_);
}
inline ::inhumate::rti::proto::RuntimeState RuntimeControl_Error::state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.Error.state)
  return _internal_state();
}
inline void RuntimeControl_Error::_internal_set_state(::inhumate::rti::proto::RuntimeState value) {
  
  state_ = value;
}
inline void RuntimeControl_Error::set_state(::inhumate::rti::proto::RuntimeState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.Error.state)
}

// string message = 3;
inline void RuntimeControl_Error::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RuntimeControl_Error::message() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.Error.message)
  return _internal_message();
}
inline void RuntimeControl_Error::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.Error.message)
}
inline std::string* RuntimeControl_Error::mutable_message() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.Error.message)
  return _internal_mutable_message();
}
inline const std::string& RuntimeControl_Error::_internal_message() const {
  return message_.GetNoArena();
}
inline void RuntimeControl_Error::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl_Error::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.Error.message)
}
inline void RuntimeControl_Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.Error.message)
}
inline void RuntimeControl_Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.Error.message)
}
inline std::string* RuntimeControl_Error::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl_Error::release_message() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.Error.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeControl_Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.Error.message)
}

// -------------------------------------------------------------------

// RuntimeControl_TimeSync

// double time = 1;
inline void RuntimeControl_TimeSync::clear_time() {
  time_ = 0;
}
inline double RuntimeControl_TimeSync::_internal_time() const {
  return time_;
}
inline double RuntimeControl_TimeSync::time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.TimeSync.time)
  return _internal_time();
}
inline void RuntimeControl_TimeSync::_internal_set_time(double value) {
  
  time_ = value;
}
inline void RuntimeControl_TimeSync::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.TimeSync.time)
}

// double time_scale = 2;
inline void RuntimeControl_TimeSync::clear_time_scale() {
  time_scale_ = 0;
}
inline double RuntimeControl_TimeSync::_internal_time_scale() const {
  return time_scale_;
}
inline double RuntimeControl_TimeSync::time_scale() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.TimeSync.time_scale)
  return _internal_time_scale();
}
inline void RuntimeControl_TimeSync::_internal_set_time_scale(double value) {
  
  time_scale_ = value;
}
inline void RuntimeControl_TimeSync::set_time_scale(double value) {
  _internal_set_time_scale(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.TimeSync.time_scale)
}

// string master_client_id = 3;
inline void RuntimeControl_TimeSync::clear_master_client_id() {
  master_client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RuntimeControl_TimeSync::master_client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.TimeSync.master_client_id)
  return _internal_master_client_id();
}
inline void RuntimeControl_TimeSync::set_master_client_id(const std::string& value) {
  _internal_set_master_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.TimeSync.master_client_id)
}
inline std::string* RuntimeControl_TimeSync::mutable_master_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.TimeSync.master_client_id)
  return _internal_mutable_master_client_id();
}
inline const std::string& RuntimeControl_TimeSync::_internal_master_client_id() const {
  return master_client_id_.GetNoArena();
}
inline void RuntimeControl_TimeSync::_internal_set_master_client_id(const std::string& value) {
  
  master_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl_TimeSync::set_master_client_id(std::string&& value) {
  
  master_client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.TimeSync.master_client_id)
}
inline void RuntimeControl_TimeSync::set_master_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  master_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.TimeSync.master_client_id)
}
inline void RuntimeControl_TimeSync::set_master_client_id(const char* value, size_t size) {
  
  master_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.TimeSync.master_client_id)
}
inline std::string* RuntimeControl_TimeSync::_internal_mutable_master_client_id() {
  
  return master_client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl_TimeSync::release_master_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.TimeSync.master_client_id)
  
  return master_client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeControl_TimeSync::set_allocated_master_client_id(std::string* master_client_id) {
  if (master_client_id != nullptr) {
    
  } else {
    
  }
  master_client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master_client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.TimeSync.master_client_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RuntimeControl_Launch

// string configuration = 1;
inline void RuntimeControl_Launch::clear_configuration() {
  configuration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RuntimeControl_Launch::configuration() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.Launch.configuration)
  return _internal_configuration();
}
inline void RuntimeControl_Launch::set_configuration(const std::string& value) {
  _internal_set_configuration(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.Launch.configuration)
}
inline std::string* RuntimeControl_Launch::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.Launch.configuration)
  return _internal_mutable_configuration();
}
inline const std::string& RuntimeControl_Launch::_internal_configuration() const {
  return configuration_.GetNoArena();
}
inline void RuntimeControl_Launch::_internal_set_configuration(const std::string& value) {
  
  configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl_Launch::set_configuration(std::string&& value) {
  
  configuration_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.Launch.configuration)
}
inline void RuntimeControl_Launch::set_configuration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.Launch.configuration)
}
inline void RuntimeControl_Launch::set_configuration(const char* value, size_t size) {
  
  configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.Launch.configuration)
}
inline std::string* RuntimeControl_Launch::_internal_mutable_configuration() {
  
  return configuration_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl_Launch::release_configuration() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.Launch.configuration)
  
  return configuration_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeControl_Launch::set_allocated_configuration(std::string* configuration) {
  if (configuration != nullptr) {
    
  } else {
    
  }
  configuration_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configuration);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.Launch.configuration)
}

// map<string, string> parameter_values = 2;
inline int RuntimeControl_Launch::_internal_parameter_values_size() const {
  return parameter_values_.size();
}
inline int RuntimeControl_Launch::parameter_values_size() const {
  return _internal_parameter_values_size();
}
inline void RuntimeControl_Launch::clear_parameter_values() {
  parameter_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RuntimeControl_Launch::_internal_parameter_values() const {
  return parameter_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RuntimeControl_Launch::parameter_values() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.RuntimeControl.Launch.parameter_values)
  return _internal_parameter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RuntimeControl_Launch::_internal_mutable_parameter_values() {
  return parameter_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RuntimeControl_Launch::mutable_parameter_values() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.RuntimeControl.Launch.parameter_values)
  return _internal_mutable_parameter_values();
}

// -------------------------------------------------------------------

// RuntimeControl

// .inhumate.rti.proto.RuntimeControl.LoadScenario load_scenario = 1;
inline bool RuntimeControl::_internal_has_load_scenario() const {
  return control_case() == kLoadScenario;
}
inline bool RuntimeControl::has_load_scenario() const {
  return _internal_has_load_scenario();
}
inline void RuntimeControl::set_has_load_scenario() {
  _oneof_case_[0] = kLoadScenario;
}
inline void RuntimeControl::clear_load_scenario() {
  if (_internal_has_load_scenario()) {
    delete control_.load_scenario_;
    clear_has_control();
  }
}
inline ::inhumate::rti::proto::RuntimeControl_LoadScenario* RuntimeControl::release_load_scenario() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.load_scenario)
  if (_internal_has_load_scenario()) {
    clear_has_control();
      ::inhumate::rti::proto::RuntimeControl_LoadScenario* temp = control_.load_scenario_;
    control_.load_scenario_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RuntimeControl_LoadScenario& RuntimeControl::_internal_load_scenario() const {
  return _internal_has_load_scenario()
      ? *control_.load_scenario_
      : *reinterpret_cast< ::inhumate::rti::proto::RuntimeControl_LoadScenario*>(&::inhumate::rti::proto::_RuntimeControl_LoadScenario_default_instance_);
}
inline const ::inhumate::rti::proto::RuntimeControl_LoadScenario& RuntimeControl::load_scenario() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.load_scenario)
  return _internal_load_scenario();
}
inline ::inhumate::rti::proto::RuntimeControl_LoadScenario* RuntimeControl::_internal_mutable_load_scenario() {
  if (!_internal_has_load_scenario()) {
    clear_control();
    set_has_load_scenario();
    control_.load_scenario_ = CreateMaybeMessage< ::inhumate::rti::proto::RuntimeControl_LoadScenario >(
        GetArenaNoVirtual());
  }
  return control_.load_scenario_;
}
inline ::inhumate::rti::proto::RuntimeControl_LoadScenario* RuntimeControl::mutable_load_scenario() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.load_scenario)
  return _internal_mutable_load_scenario();
}

// .google.protobuf.Empty start = 2;
inline bool RuntimeControl::_internal_has_start() const {
  return control_case() == kStart;
}
inline bool RuntimeControl::has_start() const {
  return _internal_has_start();
}
inline void RuntimeControl::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_start() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.start)
  if (_internal_has_start()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.start_;
    control_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_start() const {
  return _internal_has_start()
      ? *control_.start_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::start() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.start)
  return _internal_start();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_control();
    set_has_start();
    control_.start_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.start_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_start() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.start)
  return _internal_mutable_start();
}

// .google.protobuf.Empty play = 3;
inline bool RuntimeControl::_internal_has_play() const {
  return control_case() == kPlay;
}
inline bool RuntimeControl::has_play() const {
  return _internal_has_play();
}
inline void RuntimeControl::set_has_play() {
  _oneof_case_[0] = kPlay;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_play() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.play)
  if (_internal_has_play()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.play_;
    control_.play_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_play() const {
  return _internal_has_play()
      ? *control_.play_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::play() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.play)
  return _internal_play();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_play() {
  if (!_internal_has_play()) {
    clear_control();
    set_has_play();
    control_.play_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.play_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_play() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.play)
  return _internal_mutable_play();
}

// .google.protobuf.Empty pause = 4;
inline bool RuntimeControl::_internal_has_pause() const {
  return control_case() == kPause;
}
inline bool RuntimeControl::has_pause() const {
  return _internal_has_pause();
}
inline void RuntimeControl::set_has_pause() {
  _oneof_case_[0] = kPause;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_pause() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.pause)
  if (_internal_has_pause()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.pause_;
    control_.pause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_pause() const {
  return _internal_has_pause()
      ? *control_.pause_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::pause() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.pause)
  return _internal_pause();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_pause() {
  if (!_internal_has_pause()) {
    clear_control();
    set_has_pause();
    control_.pause_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.pause_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_pause() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.pause)
  return _internal_mutable_pause();
}

// .google.protobuf.Empty end = 5;
inline bool RuntimeControl::_internal_has_end() const {
  return control_case() == kEnd;
}
inline bool RuntimeControl::has_end() const {
  return _internal_has_end();
}
inline void RuntimeControl::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_end() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.end)
  if (_internal_has_end()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.end_;
    control_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_end() const {
  return _internal_has_end()
      ? *control_.end_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::end() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.end)
  return _internal_end();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_control();
    set_has_end();
    control_.end_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.end_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_end() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.end)
  return _internal_mutable_end();
}

// .google.protobuf.Empty stop = 6;
inline bool RuntimeControl::_internal_has_stop() const {
  return control_case() == kStop;
}
inline bool RuntimeControl::has_stop() const {
  return _internal_has_stop();
}
inline void RuntimeControl::set_has_stop() {
  _oneof_case_[0] = kStop;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_stop() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.stop)
  if (_internal_has_stop()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.stop_;
    control_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_stop() const {
  return _internal_has_stop()
      ? *control_.stop_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::stop() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.stop)
  return _internal_stop();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_stop() {
  if (!_internal_has_stop()) {
    clear_control();
    set_has_stop();
    control_.stop_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.stop_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_stop() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.stop)
  return _internal_mutable_stop();
}

// .google.protobuf.Empty reset = 7;
inline bool RuntimeControl::_internal_has_reset() const {
  return control_case() == kReset;
}
inline bool RuntimeControl::has_reset() const {
  return _internal_has_reset();
}
inline void RuntimeControl::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_reset() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.reset)
  if (_internal_has_reset()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.reset_;
    control_.reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_reset() const {
  return _internal_has_reset()
      ? *control_.reset_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::reset() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.reset)
  return _internal_reset();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_reset() {
  if (!_internal_has_reset()) {
    clear_control();
    set_has_reset();
    control_.reset_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.reset_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_reset() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.reset)
  return _internal_mutable_reset();
}

// .inhumate.rti.proto.RuntimeControl.SetTimeScale set_time_scale = 10;
inline bool RuntimeControl::_internal_has_set_time_scale() const {
  return control_case() == kSetTimeScale;
}
inline bool RuntimeControl::has_set_time_scale() const {
  return _internal_has_set_time_scale();
}
inline void RuntimeControl::set_has_set_time_scale() {
  _oneof_case_[0] = kSetTimeScale;
}
inline void RuntimeControl::clear_set_time_scale() {
  if (_internal_has_set_time_scale()) {
    delete control_.set_time_scale_;
    clear_has_control();
  }
}
inline ::inhumate::rti::proto::RuntimeControl_SetTimeScale* RuntimeControl::release_set_time_scale() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.set_time_scale)
  if (_internal_has_set_time_scale()) {
    clear_has_control();
      ::inhumate::rti::proto::RuntimeControl_SetTimeScale* temp = control_.set_time_scale_;
    control_.set_time_scale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RuntimeControl_SetTimeScale& RuntimeControl::_internal_set_time_scale() const {
  return _internal_has_set_time_scale()
      ? *control_.set_time_scale_
      : *reinterpret_cast< ::inhumate::rti::proto::RuntimeControl_SetTimeScale*>(&::inhumate::rti::proto::_RuntimeControl_SetTimeScale_default_instance_);
}
inline const ::inhumate::rti::proto::RuntimeControl_SetTimeScale& RuntimeControl::set_time_scale() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.set_time_scale)
  return _internal_set_time_scale();
}
inline ::inhumate::rti::proto::RuntimeControl_SetTimeScale* RuntimeControl::_internal_mutable_set_time_scale() {
  if (!_internal_has_set_time_scale()) {
    clear_control();
    set_has_set_time_scale();
    control_.set_time_scale_ = CreateMaybeMessage< ::inhumate::rti::proto::RuntimeControl_SetTimeScale >(
        GetArenaNoVirtual());
  }
  return control_.set_time_scale_;
}
inline ::inhumate::rti::proto::RuntimeControl_SetTimeScale* RuntimeControl::mutable_set_time_scale() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.set_time_scale)
  return _internal_mutable_set_time_scale();
}

// .inhumate.rti.proto.RuntimeControl.Seek seek = 11;
inline bool RuntimeControl::_internal_has_seek() const {
  return control_case() == kSeek;
}
inline bool RuntimeControl::has_seek() const {
  return _internal_has_seek();
}
inline void RuntimeControl::set_has_seek() {
  _oneof_case_[0] = kSeek;
}
inline void RuntimeControl::clear_seek() {
  if (_internal_has_seek()) {
    delete control_.seek_;
    clear_has_control();
  }
}
inline ::inhumate::rti::proto::RuntimeControl_Seek* RuntimeControl::release_seek() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.seek)
  if (_internal_has_seek()) {
    clear_has_control();
      ::inhumate::rti::proto::RuntimeControl_Seek* temp = control_.seek_;
    control_.seek_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RuntimeControl_Seek& RuntimeControl::_internal_seek() const {
  return _internal_has_seek()
      ? *control_.seek_
      : *reinterpret_cast< ::inhumate::rti::proto::RuntimeControl_Seek*>(&::inhumate::rti::proto::_RuntimeControl_Seek_default_instance_);
}
inline const ::inhumate::rti::proto::RuntimeControl_Seek& RuntimeControl::seek() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.seek)
  return _internal_seek();
}
inline ::inhumate::rti::proto::RuntimeControl_Seek* RuntimeControl::_internal_mutable_seek() {
  if (!_internal_has_seek()) {
    clear_control();
    set_has_seek();
    control_.seek_ = CreateMaybeMessage< ::inhumate::rti::proto::RuntimeControl_Seek >(
        GetArenaNoVirtual());
  }
  return control_.seek_;
}
inline ::inhumate::rti::proto::RuntimeControl_Seek* RuntimeControl::mutable_seek() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.seek)
  return _internal_mutable_seek();
}

// .inhumate.rti.proto.RuntimeControl.TimeSync time_sync = 12;
inline bool RuntimeControl::_internal_has_time_sync() const {
  return control_case() == kTimeSync;
}
inline bool RuntimeControl::has_time_sync() const {
  return _internal_has_time_sync();
}
inline void RuntimeControl::set_has_time_sync() {
  _oneof_case_[0] = kTimeSync;
}
inline void RuntimeControl::clear_time_sync() {
  if (_internal_has_time_sync()) {
    delete control_.time_sync_;
    clear_has_control();
  }
}
inline ::inhumate::rti::proto::RuntimeControl_TimeSync* RuntimeControl::release_time_sync() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.time_sync)
  if (_internal_has_time_sync()) {
    clear_has_control();
      ::inhumate::rti::proto::RuntimeControl_TimeSync* temp = control_.time_sync_;
    control_.time_sync_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RuntimeControl_TimeSync& RuntimeControl::_internal_time_sync() const {
  return _internal_has_time_sync()
      ? *control_.time_sync_
      : *reinterpret_cast< ::inhumate::rti::proto::RuntimeControl_TimeSync*>(&::inhumate::rti::proto::_RuntimeControl_TimeSync_default_instance_);
}
inline const ::inhumate::rti::proto::RuntimeControl_TimeSync& RuntimeControl::time_sync() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.time_sync)
  return _internal_time_sync();
}
inline ::inhumate::rti::proto::RuntimeControl_TimeSync* RuntimeControl::_internal_mutable_time_sync() {
  if (!_internal_has_time_sync()) {
    clear_control();
    set_has_time_sync();
    control_.time_sync_ = CreateMaybeMessage< ::inhumate::rti::proto::RuntimeControl_TimeSync >(
        GetArenaNoVirtual());
  }
  return control_.time_sync_;
}
inline ::inhumate::rti::proto::RuntimeControl_TimeSync* RuntimeControl::mutable_time_sync() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.time_sync)
  return _internal_mutable_time_sync();
}

// .inhumate.rti.proto.RuntimeControl.StateUpdate state = 16;
inline bool RuntimeControl::_internal_has_state() const {
  return control_case() == kState;
}
inline bool RuntimeControl::has_state() const {
  return _internal_has_state();
}
inline void RuntimeControl::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void RuntimeControl::clear_state() {
  if (_internal_has_state()) {
    delete control_.state_;
    clear_has_control();
  }
}
inline ::inhumate::rti::proto::RuntimeControl_StateUpdate* RuntimeControl::release_state() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.state)
  if (_internal_has_state()) {
    clear_has_control();
      ::inhumate::rti::proto::RuntimeControl_StateUpdate* temp = control_.state_;
    control_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RuntimeControl_StateUpdate& RuntimeControl::_internal_state() const {
  return _internal_has_state()
      ? *control_.state_
      : *reinterpret_cast< ::inhumate::rti::proto::RuntimeControl_StateUpdate*>(&::inhumate::rti::proto::_RuntimeControl_StateUpdate_default_instance_);
}
inline const ::inhumate::rti::proto::RuntimeControl_StateUpdate& RuntimeControl::state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.state)
  return _internal_state();
}
inline ::inhumate::rti::proto::RuntimeControl_StateUpdate* RuntimeControl::_internal_mutable_state() {
  if (!_internal_has_state()) {
    clear_control();
    set_has_state();
    control_.state_ = CreateMaybeMessage< ::inhumate::rti::proto::RuntimeControl_StateUpdate >(
        GetArenaNoVirtual());
  }
  return control_.state_;
}
inline ::inhumate::rti::proto::RuntimeControl_StateUpdate* RuntimeControl::mutable_state() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.state)
  return _internal_mutable_state();
}

// .inhumate.rti.proto.RuntimeControl.Error error = 17;
inline bool RuntimeControl::_internal_has_error() const {
  return control_case() == kError;
}
inline bool RuntimeControl::has_error() const {
  return _internal_has_error();
}
inline void RuntimeControl::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void RuntimeControl::clear_error() {
  if (_internal_has_error()) {
    delete control_.error_;
    clear_has_control();
  }
}
inline ::inhumate::rti::proto::RuntimeControl_Error* RuntimeControl::release_error() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.error)
  if (_internal_has_error()) {
    clear_has_control();
      ::inhumate::rti::proto::RuntimeControl_Error* temp = control_.error_;
    control_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RuntimeControl_Error& RuntimeControl::_internal_error() const {
  return _internal_has_error()
      ? *control_.error_
      : *reinterpret_cast< ::inhumate::rti::proto::RuntimeControl_Error*>(&::inhumate::rti::proto::_RuntimeControl_Error_default_instance_);
}
inline const ::inhumate::rti::proto::RuntimeControl_Error& RuntimeControl::error() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.error)
  return _internal_error();
}
inline ::inhumate::rti::proto::RuntimeControl_Error* RuntimeControl::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_control();
    set_has_error();
    control_.error_ = CreateMaybeMessage< ::inhumate::rti::proto::RuntimeControl_Error >(
        GetArenaNoVirtual());
  }
  return control_.error_;
}
inline ::inhumate::rti::proto::RuntimeControl_Error* RuntimeControl::mutable_error() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.error)
  return _internal_mutable_error();
}

// .google.protobuf.Empty new_log = 21;
inline bool RuntimeControl::_internal_has_new_log() const {
  return control_case() == kNewLog;
}
inline bool RuntimeControl::has_new_log() const {
  return _internal_has_new_log();
}
inline void RuntimeControl::set_has_new_log() {
  _oneof_case_[0] = kNewLog;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_new_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.new_log)
  if (_internal_has_new_log()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.new_log_;
    control_.new_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_new_log() const {
  return _internal_has_new_log()
      ? *control_.new_log_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::new_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.new_log)
  return _internal_new_log();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_new_log() {
  if (!_internal_has_new_log()) {
    clear_control();
    set_has_new_log();
    control_.new_log_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.new_log_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_new_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.new_log)
  return _internal_mutable_new_log();
}

// .google.protobuf.Empty request_current_log = 22;
inline bool RuntimeControl::_internal_has_request_current_log() const {
  return control_case() == kRequestCurrentLog;
}
inline bool RuntimeControl::has_request_current_log() const {
  return _internal_has_request_current_log();
}
inline void RuntimeControl::set_has_request_current_log() {
  _oneof_case_[0] = kRequestCurrentLog;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_request_current_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.request_current_log)
  if (_internal_has_request_current_log()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.request_current_log_;
    control_.request_current_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_request_current_log() const {
  return _internal_has_request_current_log()
      ? *control_.request_current_log_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::request_current_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.request_current_log)
  return _internal_request_current_log();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_request_current_log() {
  if (!_internal_has_request_current_log()) {
    clear_control();
    set_has_request_current_log();
    control_.request_current_log_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.request_current_log_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_request_current_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.request_current_log)
  return _internal_mutable_request_current_log();
}

// .inhumate.rti.proto.Log current_log = 23;
inline bool RuntimeControl::_internal_has_current_log() const {
  return control_case() == kCurrentLog;
}
inline bool RuntimeControl::has_current_log() const {
  return _internal_has_current_log();
}
inline void RuntimeControl::set_has_current_log() {
  _oneof_case_[0] = kCurrentLog;
}
inline ::inhumate::rti::proto::Log* RuntimeControl::release_current_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.current_log)
  if (_internal_has_current_log()) {
    clear_has_control();
      ::inhumate::rti::proto::Log* temp = control_.current_log_;
    control_.current_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Log& RuntimeControl::_internal_current_log() const {
  return _internal_has_current_log()
      ? *control_.current_log_
      : *reinterpret_cast< ::inhumate::rti::proto::Log*>(&::inhumate::rti::proto::_Log_default_instance_);
}
inline const ::inhumate::rti::proto::Log& RuntimeControl::current_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.current_log)
  return _internal_current_log();
}
inline ::inhumate::rti::proto::Log* RuntimeControl::_internal_mutable_current_log() {
  if (!_internal_has_current_log()) {
    clear_control();
    set_has_current_log();
    control_.current_log_ = CreateMaybeMessage< ::inhumate::rti::proto::Log >(
        GetArenaNoVirtual());
  }
  return control_.current_log_;
}
inline ::inhumate::rti::proto::Log* RuntimeControl::mutable_current_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.current_log)
  return _internal_mutable_current_log();
}

// string load_log = 24;
inline bool RuntimeControl::_internal_has_load_log() const {
  return control_case() == kLoadLog;
}
inline void RuntimeControl::set_has_load_log() {
  _oneof_case_[0] = kLoadLog;
}
inline void RuntimeControl::clear_load_log() {
  if (_internal_has_load_log()) {
    control_.load_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_control();
  }
}
inline const std::string& RuntimeControl::load_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.load_log)
  return _internal_load_log();
}
inline void RuntimeControl::set_load_log(const std::string& value) {
  _internal_set_load_log(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.load_log)
}
inline std::string* RuntimeControl::mutable_load_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.load_log)
  return _internal_mutable_load_log();
}
inline const std::string& RuntimeControl::_internal_load_log() const {
  if (_internal_has_load_log()) {
    return control_.load_log_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RuntimeControl::_internal_set_load_log(const std::string& value) {
  if (!_internal_has_load_log()) {
    clear_control();
    set_has_load_log();
    control_.load_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.load_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl::set_load_log(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.load_log)
  if (!_internal_has_load_log()) {
    clear_control();
    set_has_load_log();
    control_.load_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.load_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.load_log)
}
inline void RuntimeControl::set_load_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_load_log()) {
    clear_control();
    set_has_load_log();
    control_.load_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.load_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.load_log)
}
inline void RuntimeControl::set_load_log(const char* value, size_t size) {
  if (!_internal_has_load_log()) {
    clear_control();
    set_has_load_log();
    control_.load_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.load_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.load_log)
}
inline std::string* RuntimeControl::_internal_mutable_load_log() {
  if (!_internal_has_load_log()) {
    clear_control();
    set_has_load_log();
    control_.load_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return control_.load_log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl::release_load_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.load_log)
  if (_internal_has_load_log()) {
    clear_has_control();
    return control_.load_log_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RuntimeControl::set_allocated_load_log(std::string* load_log) {
  if (has_control()) {
    clear_control();
  }
  if (load_log != nullptr) {
    set_has_load_log();
    control_.load_log_.UnsafeSetDefault(load_log);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.load_log)
}

// .inhumate.rti.proto.LogMark mark_log = 25;
inline bool RuntimeControl::_internal_has_mark_log() const {
  return control_case() == kMarkLog;
}
inline bool RuntimeControl::has_mark_log() const {
  return _internal_has_mark_log();
}
inline void RuntimeControl::set_has_mark_log() {
  _oneof_case_[0] = kMarkLog;
}
inline ::inhumate::rti::proto::LogMark* RuntimeControl::release_mark_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.mark_log)
  if (_internal_has_mark_log()) {
    clear_has_control();
      ::inhumate::rti::proto::LogMark* temp = control_.mark_log_;
    control_.mark_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::LogMark& RuntimeControl::_internal_mark_log() const {
  return _internal_has_mark_log()
      ? *control_.mark_log_
      : *reinterpret_cast< ::inhumate::rti::proto::LogMark*>(&::inhumate::rti::proto::_LogMark_default_instance_);
}
inline const ::inhumate::rti::proto::LogMark& RuntimeControl::mark_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.mark_log)
  return _internal_mark_log();
}
inline ::inhumate::rti::proto::LogMark* RuntimeControl::_internal_mutable_mark_log() {
  if (!_internal_has_mark_log()) {
    clear_control();
    set_has_mark_log();
    control_.mark_log_ = CreateMaybeMessage< ::inhumate::rti::proto::LogMark >(
        GetArenaNoVirtual());
  }
  return control_.mark_log_;
}
inline ::inhumate::rti::proto::LogMark* RuntimeControl::mutable_mark_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.mark_log)
  return _internal_mutable_mark_log();
}

// string unmark_log = 26;
inline bool RuntimeControl::_internal_has_unmark_log() const {
  return control_case() == kUnmarkLog;
}
inline void RuntimeControl::set_has_unmark_log() {
  _oneof_case_[0] = kUnmarkLog;
}
inline void RuntimeControl::clear_unmark_log() {
  if (_internal_has_unmark_log()) {
    control_.unmark_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_control();
  }
}
inline const std::string& RuntimeControl::unmark_log() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.unmark_log)
  return _internal_unmark_log();
}
inline void RuntimeControl::set_unmark_log(const std::string& value) {
  _internal_set_unmark_log(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.unmark_log)
}
inline std::string* RuntimeControl::mutable_unmark_log() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.unmark_log)
  return _internal_mutable_unmark_log();
}
inline const std::string& RuntimeControl::_internal_unmark_log() const {
  if (_internal_has_unmark_log()) {
    return control_.unmark_log_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RuntimeControl::_internal_set_unmark_log(const std::string& value) {
  if (!_internal_has_unmark_log()) {
    clear_control();
    set_has_unmark_log();
    control_.unmark_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.unmark_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl::set_unmark_log(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.unmark_log)
  if (!_internal_has_unmark_log()) {
    clear_control();
    set_has_unmark_log();
    control_.unmark_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.unmark_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.unmark_log)
}
inline void RuntimeControl::set_unmark_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_unmark_log()) {
    clear_control();
    set_has_unmark_log();
    control_.unmark_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.unmark_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.unmark_log)
}
inline void RuntimeControl::set_unmark_log(const char* value, size_t size) {
  if (!_internal_has_unmark_log()) {
    clear_control();
    set_has_unmark_log();
    control_.unmark_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.unmark_log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.unmark_log)
}
inline std::string* RuntimeControl::_internal_mutable_unmark_log() {
  if (!_internal_has_unmark_log()) {
    clear_control();
    set_has_unmark_log();
    control_.unmark_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return control_.unmark_log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl::release_unmark_log() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.unmark_log)
  if (_internal_has_unmark_log()) {
    clear_has_control();
    return control_.unmark_log_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RuntimeControl::set_allocated_unmark_log(std::string* unmark_log) {
  if (has_control()) {
    clear_control();
  }
  if (unmark_log != nullptr) {
    set_has_unmark_log();
    control_.unmark_log_.UnsafeSetDefault(unmark_log);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.unmark_log)
}

// .inhumate.rti.proto.RuntimeControl.Launch launch = 31;
inline bool RuntimeControl::_internal_has_launch() const {
  return control_case() == kLaunch;
}
inline bool RuntimeControl::has_launch() const {
  return _internal_has_launch();
}
inline void RuntimeControl::set_has_launch() {
  _oneof_case_[0] = kLaunch;
}
inline void RuntimeControl::clear_launch() {
  if (_internal_has_launch()) {
    delete control_.launch_;
    clear_has_control();
  }
}
inline ::inhumate::rti::proto::RuntimeControl_Launch* RuntimeControl::release_launch() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.launch)
  if (_internal_has_launch()) {
    clear_has_control();
      ::inhumate::rti::proto::RuntimeControl_Launch* temp = control_.launch_;
    control_.launch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RuntimeControl_Launch& RuntimeControl::_internal_launch() const {
  return _internal_has_launch()
      ? *control_.launch_
      : *reinterpret_cast< ::inhumate::rti::proto::RuntimeControl_Launch*>(&::inhumate::rti::proto::_RuntimeControl_Launch_default_instance_);
}
inline const ::inhumate::rti::proto::RuntimeControl_Launch& RuntimeControl::launch() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.launch)
  return _internal_launch();
}
inline ::inhumate::rti::proto::RuntimeControl_Launch* RuntimeControl::_internal_mutable_launch() {
  if (!_internal_has_launch()) {
    clear_control();
    set_has_launch();
    control_.launch_ = CreateMaybeMessage< ::inhumate::rti::proto::RuntimeControl_Launch >(
        GetArenaNoVirtual());
  }
  return control_.launch_;
}
inline ::inhumate::rti::proto::RuntimeControl_Launch* RuntimeControl::mutable_launch() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.launch)
  return _internal_mutable_launch();
}

// .google.protobuf.Empty shutdown = 32;
inline bool RuntimeControl::_internal_has_shutdown() const {
  return control_case() == kShutdown;
}
inline bool RuntimeControl::has_shutdown() const {
  return _internal_has_shutdown();
}
inline void RuntimeControl::set_has_shutdown() {
  _oneof_case_[0] = kShutdown;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_shutdown() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.shutdown)
  if (_internal_has_shutdown()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.shutdown_;
    control_.shutdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_shutdown() const {
  return _internal_has_shutdown()
      ? *control_.shutdown_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::shutdown() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.shutdown)
  return _internal_shutdown();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_shutdown() {
  if (!_internal_has_shutdown()) {
    clear_control();
    set_has_shutdown();
    control_.shutdown_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.shutdown_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_shutdown() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.shutdown)
  return _internal_mutable_shutdown();
}

// string launch_item = 33;
inline bool RuntimeControl::_internal_has_launch_item() const {
  return control_case() == kLaunchItem;
}
inline void RuntimeControl::set_has_launch_item() {
  _oneof_case_[0] = kLaunchItem;
}
inline void RuntimeControl::clear_launch_item() {
  if (_internal_has_launch_item()) {
    control_.launch_item_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_control();
  }
}
inline const std::string& RuntimeControl::launch_item() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.launch_item)
  return _internal_launch_item();
}
inline void RuntimeControl::set_launch_item(const std::string& value) {
  _internal_set_launch_item(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.launch_item)
}
inline std::string* RuntimeControl::mutable_launch_item() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.launch_item)
  return _internal_mutable_launch_item();
}
inline const std::string& RuntimeControl::_internal_launch_item() const {
  if (_internal_has_launch_item()) {
    return control_.launch_item_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RuntimeControl::_internal_set_launch_item(const std::string& value) {
  if (!_internal_has_launch_item()) {
    clear_control();
    set_has_launch_item();
    control_.launch_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.launch_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl::set_launch_item(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.launch_item)
  if (!_internal_has_launch_item()) {
    clear_control();
    set_has_launch_item();
    control_.launch_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.launch_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.launch_item)
}
inline void RuntimeControl::set_launch_item(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_launch_item()) {
    clear_control();
    set_has_launch_item();
    control_.launch_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.launch_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.launch_item)
}
inline void RuntimeControl::set_launch_item(const char* value, size_t size) {
  if (!_internal_has_launch_item()) {
    clear_control();
    set_has_launch_item();
    control_.launch_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.launch_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.launch_item)
}
inline std::string* RuntimeControl::_internal_mutable_launch_item() {
  if (!_internal_has_launch_item()) {
    clear_control();
    set_has_launch_item();
    control_.launch_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return control_.launch_item_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl::release_launch_item() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.launch_item)
  if (_internal_has_launch_item()) {
    clear_has_control();
    return control_.launch_item_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RuntimeControl::set_allocated_launch_item(std::string* launch_item) {
  if (has_control()) {
    clear_control();
  }
  if (launch_item != nullptr) {
    set_has_launch_item();
    control_.launch_item_.UnsafeSetDefault(launch_item);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.launch_item)
}

// string shutdown_item = 34;
inline bool RuntimeControl::_internal_has_shutdown_item() const {
  return control_case() == kShutdownItem;
}
inline void RuntimeControl::set_has_shutdown_item() {
  _oneof_case_[0] = kShutdownItem;
}
inline void RuntimeControl::clear_shutdown_item() {
  if (_internal_has_shutdown_item()) {
    control_.shutdown_item_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_control();
  }
}
inline const std::string& RuntimeControl::shutdown_item() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.shutdown_item)
  return _internal_shutdown_item();
}
inline void RuntimeControl::set_shutdown_item(const std::string& value) {
  _internal_set_shutdown_item(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.shutdown_item)
}
inline std::string* RuntimeControl::mutable_shutdown_item() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.shutdown_item)
  return _internal_mutable_shutdown_item();
}
inline const std::string& RuntimeControl::_internal_shutdown_item() const {
  if (_internal_has_shutdown_item()) {
    return control_.shutdown_item_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RuntimeControl::_internal_set_shutdown_item(const std::string& value) {
  if (!_internal_has_shutdown_item()) {
    clear_control();
    set_has_shutdown_item();
    control_.shutdown_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.shutdown_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl::set_shutdown_item(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.shutdown_item)
  if (!_internal_has_shutdown_item()) {
    clear_control();
    set_has_shutdown_item();
    control_.shutdown_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.shutdown_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.shutdown_item)
}
inline void RuntimeControl::set_shutdown_item(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_shutdown_item()) {
    clear_control();
    set_has_shutdown_item();
    control_.shutdown_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.shutdown_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.shutdown_item)
}
inline void RuntimeControl::set_shutdown_item(const char* value, size_t size) {
  if (!_internal_has_shutdown_item()) {
    clear_control();
    set_has_shutdown_item();
    control_.shutdown_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.shutdown_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.shutdown_item)
}
inline std::string* RuntimeControl::_internal_mutable_shutdown_item() {
  if (!_internal_has_shutdown_item()) {
    clear_control();
    set_has_shutdown_item();
    control_.shutdown_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return control_.shutdown_item_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl::release_shutdown_item() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.shutdown_item)
  if (_internal_has_shutdown_item()) {
    clear_has_control();
    return control_.shutdown_item_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RuntimeControl::set_allocated_shutdown_item(std::string* shutdown_item) {
  if (has_control()) {
    clear_control();
  }
  if (shutdown_item != nullptr) {
    set_has_shutdown_item();
    control_.shutdown_item_.UnsafeSetDefault(shutdown_item);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.shutdown_item)
}

// string run_remote_action = 35;
inline bool RuntimeControl::_internal_has_run_remote_action() const {
  return control_case() == kRunRemoteAction;
}
inline void RuntimeControl::set_has_run_remote_action() {
  _oneof_case_[0] = kRunRemoteAction;
}
inline void RuntimeControl::clear_run_remote_action() {
  if (_internal_has_run_remote_action()) {
    control_.run_remote_action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_control();
  }
}
inline const std::string& RuntimeControl::run_remote_action() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.run_remote_action)
  return _internal_run_remote_action();
}
inline void RuntimeControl::set_run_remote_action(const std::string& value) {
  _internal_set_run_remote_action(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.run_remote_action)
}
inline std::string* RuntimeControl::mutable_run_remote_action() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.run_remote_action)
  return _internal_mutable_run_remote_action();
}
inline const std::string& RuntimeControl::_internal_run_remote_action() const {
  if (_internal_has_run_remote_action()) {
    return control_.run_remote_action_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RuntimeControl::_internal_set_run_remote_action(const std::string& value) {
  if (!_internal_has_run_remote_action()) {
    clear_control();
    set_has_run_remote_action();
    control_.run_remote_action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.run_remote_action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuntimeControl::set_run_remote_action(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RuntimeControl.run_remote_action)
  if (!_internal_has_run_remote_action()) {
    clear_control();
    set_has_run_remote_action();
    control_.run_remote_action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.run_remote_action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RuntimeControl.run_remote_action)
}
inline void RuntimeControl::set_run_remote_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_run_remote_action()) {
    clear_control();
    set_has_run_remote_action();
    control_.run_remote_action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.run_remote_action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RuntimeControl.run_remote_action)
}
inline void RuntimeControl::set_run_remote_action(const char* value, size_t size) {
  if (!_internal_has_run_remote_action()) {
    clear_control();
    set_has_run_remote_action();
    control_.run_remote_action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  control_.run_remote_action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RuntimeControl.run_remote_action)
}
inline std::string* RuntimeControl::_internal_mutable_run_remote_action() {
  if (!_internal_has_run_remote_action()) {
    clear_control();
    set_has_run_remote_action();
    control_.run_remote_action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return control_.run_remote_action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuntimeControl::release_run_remote_action() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.run_remote_action)
  if (_internal_has_run_remote_action()) {
    clear_has_control();
    return control_.run_remote_action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RuntimeControl::set_allocated_run_remote_action(std::string* run_remote_action) {
  if (has_control()) {
    clear_control();
  }
  if (run_remote_action != nullptr) {
    set_has_run_remote_action();
    control_.run_remote_action_.UnsafeSetDefault(run_remote_action);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RuntimeControl.run_remote_action)
}

// .google.protobuf.Empty request_current_scenario = 36;
inline bool RuntimeControl::_internal_has_request_current_scenario() const {
  return control_case() == kRequestCurrentScenario;
}
inline bool RuntimeControl::has_request_current_scenario() const {
  return _internal_has_request_current_scenario();
}
inline void RuntimeControl::set_has_request_current_scenario() {
  _oneof_case_[0] = kRequestCurrentScenario;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::release_request_current_scenario() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.request_current_scenario)
  if (_internal_has_request_current_scenario()) {
    clear_has_control();
      PROTOBUF_NAMESPACE_ID::Empty* temp = control_.request_current_scenario_;
    control_.request_current_scenario_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::_internal_request_current_scenario() const {
  return _internal_has_request_current_scenario()
      ? *control_.request_current_scenario_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& RuntimeControl::request_current_scenario() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.request_current_scenario)
  return _internal_request_current_scenario();
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::_internal_mutable_request_current_scenario() {
  if (!_internal_has_request_current_scenario()) {
    clear_control();
    set_has_request_current_scenario();
    control_.request_current_scenario_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return control_.request_current_scenario_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* RuntimeControl::mutable_request_current_scenario() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.request_current_scenario)
  return _internal_mutable_request_current_scenario();
}

// .inhumate.rti.proto.RuntimeControl.LoadScenario current_scenario = 37;
inline bool RuntimeControl::_internal_has_current_scenario() const {
  return control_case() == kCurrentScenario;
}
inline bool RuntimeControl::has_current_scenario() const {
  return _internal_has_current_scenario();
}
inline void RuntimeControl::set_has_current_scenario() {
  _oneof_case_[0] = kCurrentScenario;
}
inline void RuntimeControl::clear_current_scenario() {
  if (_internal_has_current_scenario()) {
    delete control_.current_scenario_;
    clear_has_control();
  }
}
inline ::inhumate::rti::proto::RuntimeControl_LoadScenario* RuntimeControl::release_current_scenario() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RuntimeControl.current_scenario)
  if (_internal_has_current_scenario()) {
    clear_has_control();
      ::inhumate::rti::proto::RuntimeControl_LoadScenario* temp = control_.current_scenario_;
    control_.current_scenario_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RuntimeControl_LoadScenario& RuntimeControl::_internal_current_scenario() const {
  return _internal_has_current_scenario()
      ? *control_.current_scenario_
      : *reinterpret_cast< ::inhumate::rti::proto::RuntimeControl_LoadScenario*>(&::inhumate::rti::proto::_RuntimeControl_LoadScenario_default_instance_);
}
inline const ::inhumate::rti::proto::RuntimeControl_LoadScenario& RuntimeControl::current_scenario() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RuntimeControl.current_scenario)
  return _internal_current_scenario();
}
inline ::inhumate::rti::proto::RuntimeControl_LoadScenario* RuntimeControl::_internal_mutable_current_scenario() {
  if (!_internal_has_current_scenario()) {
    clear_control();
    set_has_current_scenario();
    control_.current_scenario_ = CreateMaybeMessage< ::inhumate::rti::proto::RuntimeControl_LoadScenario >(
        GetArenaNoVirtual());
  }
  return control_.current_scenario_;
}
inline ::inhumate::rti::proto::RuntimeControl_LoadScenario* RuntimeControl::mutable_current_scenario() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RuntimeControl.current_scenario)
  return _internal_mutable_current_scenario();
}

inline bool RuntimeControl::has_control() const {
  return control_case() != CONTROL_NOT_SET;
}
inline void RuntimeControl::clear_has_control() {
  _oneof_case_[0] = CONTROL_NOT_SET;
}
inline RuntimeControl::ControlCase RuntimeControl::control_case() const {
  return RuntimeControl::ControlCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RuntimeControl_2eproto
