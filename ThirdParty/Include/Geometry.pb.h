// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Geometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Geometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Color.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Geometry_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Geometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Geometry_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Geometry;
class GeometryDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern GeometryDefaultTypeInternal _Geometry_default_instance_;
class Geometry_GeodeticPoint2D;
class Geometry_GeodeticPoint2DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_GeodeticPoint2DDefaultTypeInternal _Geometry_GeodeticPoint2D_default_instance_;
class Geometry_GeodeticPoint3D;
class Geometry_GeodeticPoint3DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_GeodeticPoint3DDefaultTypeInternal _Geometry_GeodeticPoint3D_default_instance_;
class Geometry_Line2D;
class Geometry_Line2DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_Line2DDefaultTypeInternal _Geometry_Line2D_default_instance_;
class Geometry_Line3D;
class Geometry_Line3DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_Line3DDefaultTypeInternal _Geometry_Line3D_default_instance_;
class Geometry_LocalPoint2D;
class Geometry_LocalPoint2DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_LocalPoint2DDefaultTypeInternal _Geometry_LocalPoint2D_default_instance_;
class Geometry_LocalPoint3D;
class Geometry_LocalPoint3DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_LocalPoint3DDefaultTypeInternal _Geometry_LocalPoint3D_default_instance_;
class Geometry_Mesh;
class Geometry_MeshDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_MeshDefaultTypeInternal _Geometry_Mesh_default_instance_;
class Geometry_Point2D;
class Geometry_Point2DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_Point2DDefaultTypeInternal _Geometry_Point2D_default_instance_;
class Geometry_Point3D;
class Geometry_Point3DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_Point3DDefaultTypeInternal _Geometry_Point3D_default_instance_;
class Geometry_Polygon;
class Geometry_PolygonDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_PolygonDefaultTypeInternal _Geometry_Polygon_default_instance_;
class Geometry_Spline2D;
class Geometry_Spline2DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_Spline2DDefaultTypeInternal _Geometry_Spline2D_default_instance_;
class Geometry_Spline3D;
class Geometry_Spline3DDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Geometry_Spline3DDefaultTypeInternal _Geometry_Spline3D_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_GeodeticPoint2D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_GeodeticPoint2D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_GeodeticPoint3D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_GeodeticPoint3D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_Line2D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_Line2D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_Line3D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_Line3D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_LocalPoint2D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_LocalPoint2D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_LocalPoint3D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_LocalPoint3D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_Mesh* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_Mesh>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_Point2D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_Point2D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_Point3D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_Point3D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_Polygon* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_Polygon>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_Spline2D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_Spline2D>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Geometry_Spline3D* Arena::CreateMaybeMessage<::inhumate::rti::proto::Geometry_Spline3D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

enum Geometry_Usage : int {
  Geometry_Usage_SCENARIO = 0,
  Geometry_Usage_ENTITY = 1,
  Geometry_Usage_Geometry_Usage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Geometry_Usage_Geometry_Usage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
INHUMATE_RTI_PROTOS_EXPORT bool Geometry_Usage_IsValid(int value);
constexpr Geometry_Usage Geometry_Usage_Usage_MIN = Geometry_Usage_SCENARIO;
constexpr Geometry_Usage Geometry_Usage_Usage_MAX = Geometry_Usage_ENTITY;
constexpr int Geometry_Usage_Usage_ARRAYSIZE = Geometry_Usage_Usage_MAX + 1;

INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Geometry_Usage_descriptor();
template<typename T>
inline const std::string& Geometry_Usage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Geometry_Usage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Geometry_Usage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Geometry_Usage_descriptor(), enum_t_value);
}
inline bool Geometry_Usage_Parse(
    const std::string& name, Geometry_Usage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Geometry_Usage>(
    Geometry_Usage_descriptor(), name, value);
}
enum Geometry_Category : int {
  Geometry_Category_UNKNOWN_GEOMETRY = 0,
  Geometry_Category_PHYSICAL_GEOMETRY = 10,
  Geometry_Category_GROUND = 11,
  Geometry_Category_VEGETATION = 12,
  Geometry_Category_STRUCTURE = 13,
  Geometry_Category_ROAD = 14,
  Geometry_Category_ABSTRACT_GEOMETRY = 100,
  Geometry_Category_ZONE = 101,
  Geometry_Category_TRIGGER = 102,
  Geometry_Category_EDGE = 103,
  Geometry_Category_PATH = 104,
  Geometry_Category_PLANNED_PATH = 105,
  Geometry_Category_HISTORIC_PATH = 106,
  Geometry_Category_SENSOR_COVERAGE = 151,
  Geometry_Category_SENSOR_HIT = 152,
  Geometry_Category_DEBUG_GEOMETRY = 200,
  Geometry_Category_Geometry_Category_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Geometry_Category_Geometry_Category_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
INHUMATE_RTI_PROTOS_EXPORT bool Geometry_Category_IsValid(int value);
constexpr Geometry_Category Geometry_Category_Category_MIN = Geometry_Category_UNKNOWN_GEOMETRY;
constexpr Geometry_Category Geometry_Category_Category_MAX = Geometry_Category_DEBUG_GEOMETRY;
constexpr int Geometry_Category_Category_ARRAYSIZE = Geometry_Category_Category_MAX + 1;

INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Geometry_Category_descriptor();
template<typename T>
inline const std::string& Geometry_Category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Geometry_Category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Geometry_Category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Geometry_Category_descriptor(), enum_t_value);
}
inline bool Geometry_Category_Parse(
    const std::string& name, Geometry_Category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Geometry_Category>(
    Geometry_Category_descriptor(), name, value);
}
// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Geometry_Point2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.Point2D) */ {
 public:
  Geometry_Point2D();
  virtual ~Geometry_Point2D();

  Geometry_Point2D(const Geometry_Point2D& from);
  Geometry_Point2D(Geometry_Point2D&& from) noexcept
    : Geometry_Point2D() {
    *this = ::std::move(from);
  }

  inline Geometry_Point2D& operator=(const Geometry_Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_Point2D& operator=(Geometry_Point2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_Point2D* internal_default_instance() {
    return reinterpret_cast<const Geometry_Point2D*>(
               &_Geometry_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Geometry_Point2D& a, Geometry_Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_Point2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_Point2D* New() const final {
    return CreateMaybeMessage<Geometry_Point2D>(nullptr);
  }

  Geometry_Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_Point2D& from);
  void MergeFrom(const Geometry_Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.Point2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalFieldNumber = 1,
    kGeodeticFieldNumber = 2,
  };
  // .inhumate.rti.proto.Geometry.LocalPoint2D local = 1;
  bool has_local() const;
  private:
  bool _internal_has_local() const;
  public:
  void clear_local();
  const ::inhumate::rti::proto::Geometry_LocalPoint2D& local() const;
  ::inhumate::rti::proto::Geometry_LocalPoint2D* release_local();
  ::inhumate::rti::proto::Geometry_LocalPoint2D* mutable_local();
  void set_allocated_local(::inhumate::rti::proto::Geometry_LocalPoint2D* local);
  private:
  const ::inhumate::rti::proto::Geometry_LocalPoint2D& _internal_local() const;
  ::inhumate::rti::proto::Geometry_LocalPoint2D* _internal_mutable_local();
  public:

  // .inhumate.rti.proto.Geometry.GeodeticPoint2D geodetic = 2;
  bool has_geodetic() const;
  private:
  bool _internal_has_geodetic() const;
  public:
  void clear_geodetic();
  const ::inhumate::rti::proto::Geometry_GeodeticPoint2D& geodetic() const;
  ::inhumate::rti::proto::Geometry_GeodeticPoint2D* release_geodetic();
  ::inhumate::rti::proto::Geometry_GeodeticPoint2D* mutable_geodetic();
  void set_allocated_geodetic(::inhumate::rti::proto::Geometry_GeodeticPoint2D* geodetic);
  private:
  const ::inhumate::rti::proto::Geometry_GeodeticPoint2D& _internal_geodetic() const;
  ::inhumate::rti::proto::Geometry_GeodeticPoint2D* _internal_mutable_geodetic();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.Point2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::inhumate::rti::proto::Geometry_LocalPoint2D* local_;
  ::inhumate::rti::proto::Geometry_GeodeticPoint2D* geodetic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_LocalPoint2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.LocalPoint2D) */ {
 public:
  Geometry_LocalPoint2D();
  virtual ~Geometry_LocalPoint2D();

  Geometry_LocalPoint2D(const Geometry_LocalPoint2D& from);
  Geometry_LocalPoint2D(Geometry_LocalPoint2D&& from) noexcept
    : Geometry_LocalPoint2D() {
    *this = ::std::move(from);
  }

  inline Geometry_LocalPoint2D& operator=(const Geometry_LocalPoint2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_LocalPoint2D& operator=(Geometry_LocalPoint2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_LocalPoint2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_LocalPoint2D* internal_default_instance() {
    return reinterpret_cast<const Geometry_LocalPoint2D*>(
               &_Geometry_LocalPoint2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Geometry_LocalPoint2D& a, Geometry_LocalPoint2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_LocalPoint2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_LocalPoint2D* New() const final {
    return CreateMaybeMessage<Geometry_LocalPoint2D>(nullptr);
  }

  Geometry_LocalPoint2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_LocalPoint2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_LocalPoint2D& from);
  void MergeFrom(const Geometry_LocalPoint2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_LocalPoint2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.LocalPoint2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.LocalPoint2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_GeodeticPoint2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.GeodeticPoint2D) */ {
 public:
  Geometry_GeodeticPoint2D();
  virtual ~Geometry_GeodeticPoint2D();

  Geometry_GeodeticPoint2D(const Geometry_GeodeticPoint2D& from);
  Geometry_GeodeticPoint2D(Geometry_GeodeticPoint2D&& from) noexcept
    : Geometry_GeodeticPoint2D() {
    *this = ::std::move(from);
  }

  inline Geometry_GeodeticPoint2D& operator=(const Geometry_GeodeticPoint2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_GeodeticPoint2D& operator=(Geometry_GeodeticPoint2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_GeodeticPoint2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_GeodeticPoint2D* internal_default_instance() {
    return reinterpret_cast<const Geometry_GeodeticPoint2D*>(
               &_Geometry_GeodeticPoint2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Geometry_GeodeticPoint2D& a, Geometry_GeodeticPoint2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_GeodeticPoint2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_GeodeticPoint2D* New() const final {
    return CreateMaybeMessage<Geometry_GeodeticPoint2D>(nullptr);
  }

  Geometry_GeodeticPoint2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_GeodeticPoint2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_GeodeticPoint2D& from);
  void MergeFrom(const Geometry_GeodeticPoint2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_GeodeticPoint2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.GeodeticPoint2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.GeodeticPoint2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_Point3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.Point3D) */ {
 public:
  Geometry_Point3D();
  virtual ~Geometry_Point3D();

  Geometry_Point3D(const Geometry_Point3D& from);
  Geometry_Point3D(Geometry_Point3D&& from) noexcept
    : Geometry_Point3D() {
    *this = ::std::move(from);
  }

  inline Geometry_Point3D& operator=(const Geometry_Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_Point3D& operator=(Geometry_Point3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_Point3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_Point3D* internal_default_instance() {
    return reinterpret_cast<const Geometry_Point3D*>(
               &_Geometry_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Geometry_Point3D& a, Geometry_Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_Point3D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_Point3D* New() const final {
    return CreateMaybeMessage<Geometry_Point3D>(nullptr);
  }

  Geometry_Point3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_Point3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_Point3D& from);
  void MergeFrom(const Geometry_Point3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_Point3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.Point3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalFieldNumber = 1,
    kGeodeticFieldNumber = 2,
  };
  // .inhumate.rti.proto.Geometry.LocalPoint3D local = 1;
  bool has_local() const;
  private:
  bool _internal_has_local() const;
  public:
  void clear_local();
  const ::inhumate::rti::proto::Geometry_LocalPoint3D& local() const;
  ::inhumate::rti::proto::Geometry_LocalPoint3D* release_local();
  ::inhumate::rti::proto::Geometry_LocalPoint3D* mutable_local();
  void set_allocated_local(::inhumate::rti::proto::Geometry_LocalPoint3D* local);
  private:
  const ::inhumate::rti::proto::Geometry_LocalPoint3D& _internal_local() const;
  ::inhumate::rti::proto::Geometry_LocalPoint3D* _internal_mutable_local();
  public:

  // .inhumate.rti.proto.Geometry.GeodeticPoint3D geodetic = 2;
  bool has_geodetic() const;
  private:
  bool _internal_has_geodetic() const;
  public:
  void clear_geodetic();
  const ::inhumate::rti::proto::Geometry_GeodeticPoint3D& geodetic() const;
  ::inhumate::rti::proto::Geometry_GeodeticPoint3D* release_geodetic();
  ::inhumate::rti::proto::Geometry_GeodeticPoint3D* mutable_geodetic();
  void set_allocated_geodetic(::inhumate::rti::proto::Geometry_GeodeticPoint3D* geodetic);
  private:
  const ::inhumate::rti::proto::Geometry_GeodeticPoint3D& _internal_geodetic() const;
  ::inhumate::rti::proto::Geometry_GeodeticPoint3D* _internal_mutable_geodetic();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.Point3D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::inhumate::rti::proto::Geometry_LocalPoint3D* local_;
  ::inhumate::rti::proto::Geometry_GeodeticPoint3D* geodetic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_LocalPoint3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.LocalPoint3D) */ {
 public:
  Geometry_LocalPoint3D();
  virtual ~Geometry_LocalPoint3D();

  Geometry_LocalPoint3D(const Geometry_LocalPoint3D& from);
  Geometry_LocalPoint3D(Geometry_LocalPoint3D&& from) noexcept
    : Geometry_LocalPoint3D() {
    *this = ::std::move(from);
  }

  inline Geometry_LocalPoint3D& operator=(const Geometry_LocalPoint3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_LocalPoint3D& operator=(Geometry_LocalPoint3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_LocalPoint3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_LocalPoint3D* internal_default_instance() {
    return reinterpret_cast<const Geometry_LocalPoint3D*>(
               &_Geometry_LocalPoint3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Geometry_LocalPoint3D& a, Geometry_LocalPoint3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_LocalPoint3D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_LocalPoint3D* New() const final {
    return CreateMaybeMessage<Geometry_LocalPoint3D>(nullptr);
  }

  Geometry_LocalPoint3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_LocalPoint3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_LocalPoint3D& from);
  void MergeFrom(const Geometry_LocalPoint3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_LocalPoint3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.LocalPoint3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.LocalPoint3D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_GeodeticPoint3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.GeodeticPoint3D) */ {
 public:
  Geometry_GeodeticPoint3D();
  virtual ~Geometry_GeodeticPoint3D();

  Geometry_GeodeticPoint3D(const Geometry_GeodeticPoint3D& from);
  Geometry_GeodeticPoint3D(Geometry_GeodeticPoint3D&& from) noexcept
    : Geometry_GeodeticPoint3D() {
    *this = ::std::move(from);
  }

  inline Geometry_GeodeticPoint3D& operator=(const Geometry_GeodeticPoint3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_GeodeticPoint3D& operator=(Geometry_GeodeticPoint3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_GeodeticPoint3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_GeodeticPoint3D* internal_default_instance() {
    return reinterpret_cast<const Geometry_GeodeticPoint3D*>(
               &_Geometry_GeodeticPoint3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Geometry_GeodeticPoint3D& a, Geometry_GeodeticPoint3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_GeodeticPoint3D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_GeodeticPoint3D* New() const final {
    return CreateMaybeMessage<Geometry_GeodeticPoint3D>(nullptr);
  }

  Geometry_GeodeticPoint3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_GeodeticPoint3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_GeodeticPoint3D& from);
  void MergeFrom(const Geometry_GeodeticPoint3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_GeodeticPoint3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.GeodeticPoint3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.GeodeticPoint3D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_Line2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.Line2D) */ {
 public:
  Geometry_Line2D();
  virtual ~Geometry_Line2D();

  Geometry_Line2D(const Geometry_Line2D& from);
  Geometry_Line2D(Geometry_Line2D&& from) noexcept
    : Geometry_Line2D() {
    *this = ::std::move(from);
  }

  inline Geometry_Line2D& operator=(const Geometry_Line2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_Line2D& operator=(Geometry_Line2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_Line2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_Line2D* internal_default_instance() {
    return reinterpret_cast<const Geometry_Line2D*>(
               &_Geometry_Line2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Geometry_Line2D& a, Geometry_Line2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_Line2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_Line2D* New() const final {
    return CreateMaybeMessage<Geometry_Line2D>(nullptr);
  }

  Geometry_Line2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_Line2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_Line2D& from);
  void MergeFrom(const Geometry_Line2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_Line2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.Line2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .inhumate.rti.proto.Geometry.Point2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::inhumate::rti::proto::Geometry_Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >*
      mutable_points();
  private:
  const ::inhumate::rti::proto::Geometry_Point2D& _internal_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point2D* _internal_add_points();
  public:
  const ::inhumate::rti::proto::Geometry_Point2D& points(int index) const;
  ::inhumate::rti::proto::Geometry_Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >&
      points() const;

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.Line2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_Line3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.Line3D) */ {
 public:
  Geometry_Line3D();
  virtual ~Geometry_Line3D();

  Geometry_Line3D(const Geometry_Line3D& from);
  Geometry_Line3D(Geometry_Line3D&& from) noexcept
    : Geometry_Line3D() {
    *this = ::std::move(from);
  }

  inline Geometry_Line3D& operator=(const Geometry_Line3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_Line3D& operator=(Geometry_Line3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_Line3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_Line3D* internal_default_instance() {
    return reinterpret_cast<const Geometry_Line3D*>(
               &_Geometry_Line3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Geometry_Line3D& a, Geometry_Line3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_Line3D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_Line3D* New() const final {
    return CreateMaybeMessage<Geometry_Line3D>(nullptr);
  }

  Geometry_Line3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_Line3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_Line3D& from);
  void MergeFrom(const Geometry_Line3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_Line3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.Line3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .inhumate.rti.proto.Geometry.Point3D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::inhumate::rti::proto::Geometry_Point3D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >*
      mutable_points();
  private:
  const ::inhumate::rti::proto::Geometry_Point3D& _internal_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point3D* _internal_add_points();
  public:
  const ::inhumate::rti::proto::Geometry_Point3D& points(int index) const;
  ::inhumate::rti::proto::Geometry_Point3D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >&
      points() const;

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.Line3D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_Polygon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.Polygon) */ {
 public:
  Geometry_Polygon();
  virtual ~Geometry_Polygon();

  Geometry_Polygon(const Geometry_Polygon& from);
  Geometry_Polygon(Geometry_Polygon&& from) noexcept
    : Geometry_Polygon() {
    *this = ::std::move(from);
  }

  inline Geometry_Polygon& operator=(const Geometry_Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_Polygon& operator=(Geometry_Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_Polygon* internal_default_instance() {
    return reinterpret_cast<const Geometry_Polygon*>(
               &_Geometry_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Geometry_Polygon& a, Geometry_Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_Polygon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_Polygon* New() const final {
    return CreateMaybeMessage<Geometry_Polygon>(nullptr);
  }

  Geometry_Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_Polygon& from);
  void MergeFrom(const Geometry_Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.Polygon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kBaseFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .inhumate.rti.proto.Geometry.Point2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::inhumate::rti::proto::Geometry_Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >*
      mutable_points();
  private:
  const ::inhumate::rti::proto::Geometry_Point2D& _internal_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point2D* _internal_add_points();
  public:
  const ::inhumate::rti::proto::Geometry_Point2D& points(int index) const;
  ::inhumate::rti::proto::Geometry_Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >&
      points() const;

  // float base = 2;
  void clear_base();
  float base() const;
  void set_base(float value);
  private:
  float _internal_base() const;
  void _internal_set_base(float value);
  public:

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.Polygon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D > points_;
  float base_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_Mesh :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.Mesh) */ {
 public:
  Geometry_Mesh();
  virtual ~Geometry_Mesh();

  Geometry_Mesh(const Geometry_Mesh& from);
  Geometry_Mesh(Geometry_Mesh&& from) noexcept
    : Geometry_Mesh() {
    *this = ::std::move(from);
  }

  inline Geometry_Mesh& operator=(const Geometry_Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_Mesh& operator=(Geometry_Mesh&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_Mesh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_Mesh* internal_default_instance() {
    return reinterpret_cast<const Geometry_Mesh*>(
               &_Geometry_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Geometry_Mesh& a, Geometry_Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_Mesh* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_Mesh* New() const final {
    return CreateMaybeMessage<Geometry_Mesh>(nullptr);
  }

  Geometry_Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_Mesh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_Mesh& from);
  void MergeFrom(const Geometry_Mesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_Mesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.Mesh";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kIndicesFieldNumber = 2,
    kNormalsFieldNumber = 3,
  };
  // repeated .inhumate.rti.proto.Geometry.LocalPoint3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::inhumate::rti::proto::Geometry_LocalPoint3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D >*
      mutable_vertices();
  private:
  const ::inhumate::rti::proto::Geometry_LocalPoint3D& _internal_vertices(int index) const;
  ::inhumate::rti::proto::Geometry_LocalPoint3D* _internal_add_vertices();
  public:
  const ::inhumate::rti::proto::Geometry_LocalPoint3D& vertices(int index) const;
  ::inhumate::rti::proto::Geometry_LocalPoint3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D >&
      vertices() const;

  // repeated int32 indices = 2;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // repeated .inhumate.rti.proto.Geometry.LocalPoint3D normals = 3;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::inhumate::rti::proto::Geometry_LocalPoint3D* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D >*
      mutable_normals();
  private:
  const ::inhumate::rti::proto::Geometry_LocalPoint3D& _internal_normals(int index) const;
  ::inhumate::rti::proto::Geometry_LocalPoint3D* _internal_add_normals();
  public:
  const ::inhumate::rti::proto::Geometry_LocalPoint3D& normals(int index) const;
  ::inhumate::rti::proto::Geometry_LocalPoint3D* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D >&
      normals() const;

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.Mesh)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D > normals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_Spline2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.Spline2D) */ {
 public:
  Geometry_Spline2D();
  virtual ~Geometry_Spline2D();

  Geometry_Spline2D(const Geometry_Spline2D& from);
  Geometry_Spline2D(Geometry_Spline2D&& from) noexcept
    : Geometry_Spline2D() {
    *this = ::std::move(from);
  }

  inline Geometry_Spline2D& operator=(const Geometry_Spline2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_Spline2D& operator=(Geometry_Spline2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_Spline2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_Spline2D* internal_default_instance() {
    return reinterpret_cast<const Geometry_Spline2D*>(
               &_Geometry_Spline2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Geometry_Spline2D& a, Geometry_Spline2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_Spline2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_Spline2D* New() const final {
    return CreateMaybeMessage<Geometry_Spline2D>(nullptr);
  }

  Geometry_Spline2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_Spline2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_Spline2D& from);
  void MergeFrom(const Geometry_Spline2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_Spline2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.Spline2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kControlPointsFieldNumber = 3,
  };
  // repeated .inhumate.rti.proto.Geometry.Point2D points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::inhumate::rti::proto::Geometry_Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >*
      mutable_points();
  private:
  const ::inhumate::rti::proto::Geometry_Point2D& _internal_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point2D* _internal_add_points();
  public:
  const ::inhumate::rti::proto::Geometry_Point2D& points(int index) const;
  ::inhumate::rti::proto::Geometry_Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >&
      points() const;

  // repeated .inhumate.rti.proto.Geometry.Point2D control_points = 3;
  int control_points_size() const;
  private:
  int _internal_control_points_size() const;
  public:
  void clear_control_points();
  ::inhumate::rti::proto::Geometry_Point2D* mutable_control_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >*
      mutable_control_points();
  private:
  const ::inhumate::rti::proto::Geometry_Point2D& _internal_control_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point2D* _internal_add_control_points();
  public:
  const ::inhumate::rti::proto::Geometry_Point2D& control_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point2D* add_control_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >&
      control_points() const;

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.Spline2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D > control_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry_Spline3D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry.Spline3D) */ {
 public:
  Geometry_Spline3D();
  virtual ~Geometry_Spline3D();

  Geometry_Spline3D(const Geometry_Spline3D& from);
  Geometry_Spline3D(Geometry_Spline3D&& from) noexcept
    : Geometry_Spline3D() {
    *this = ::std::move(from);
  }

  inline Geometry_Spline3D& operator=(const Geometry_Spline3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry_Spline3D& operator=(Geometry_Spline3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry_Spline3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry_Spline3D* internal_default_instance() {
    return reinterpret_cast<const Geometry_Spline3D*>(
               &_Geometry_Spline3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Geometry_Spline3D& a, Geometry_Spline3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry_Spline3D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry_Spline3D* New() const final {
    return CreateMaybeMessage<Geometry_Spline3D>(nullptr);
  }

  Geometry_Spline3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry_Spline3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry_Spline3D& from);
  void MergeFrom(const Geometry_Spline3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry_Spline3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry.Spline3D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kControlPointsFieldNumber = 3,
  };
  // repeated .inhumate.rti.proto.Geometry.Point3D points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::inhumate::rti::proto::Geometry_Point3D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >*
      mutable_points();
  private:
  const ::inhumate::rti::proto::Geometry_Point3D& _internal_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point3D* _internal_add_points();
  public:
  const ::inhumate::rti::proto::Geometry_Point3D& points(int index) const;
  ::inhumate::rti::proto::Geometry_Point3D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >&
      points() const;

  // repeated .inhumate.rti.proto.Geometry.Point3D control_points = 3;
  int control_points_size() const;
  private:
  int _internal_control_points_size() const;
  public:
  void clear_control_points();
  ::inhumate::rti::proto::Geometry_Point3D* mutable_control_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >*
      mutable_control_points();
  private:
  const ::inhumate::rti::proto::Geometry_Point3D& _internal_control_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point3D* _internal_add_control_points();
  public:
  const ::inhumate::rti::proto::Geometry_Point3D& control_points(int index) const;
  ::inhumate::rti::proto::Geometry_Point3D* add_control_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >&
      control_points() const;

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry.Spline3D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D > control_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Geometry_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Geometry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Geometry) */ {
 public:
  Geometry();
  virtual ~Geometry();

  Geometry(const Geometry& from);
  Geometry(Geometry&& from) noexcept
    : Geometry() {
    *this = ::std::move(from);
  }

  inline Geometry& operator=(const Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry& operator=(Geometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geometry& default_instance();

  enum ShapeCase {
    kPoint = 3,
    kPoint3D = 4,
    kLine = 5,
    kLine3D = 6,
    kPolygon = 7,
    kMesh = 8,
    kSpline = 9,
    kSpline3D = 10,
    SHAPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry* internal_default_instance() {
    return reinterpret_cast<const Geometry*>(
               &_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Geometry& a, Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geometry* New() const final {
    return CreateMaybeMessage<Geometry>(nullptr);
  }

  Geometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geometry& from);
  void MergeFrom(const Geometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Geometry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geometry_2eproto);
    return ::descriptor_table_Geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Geometry_Point2D Point2D;
  typedef Geometry_LocalPoint2D LocalPoint2D;
  typedef Geometry_GeodeticPoint2D GeodeticPoint2D;
  typedef Geometry_Point3D Point3D;
  typedef Geometry_LocalPoint3D LocalPoint3D;
  typedef Geometry_GeodeticPoint3D GeodeticPoint3D;
  typedef Geometry_Line2D Line2D;
  typedef Geometry_Line3D Line3D;
  typedef Geometry_Polygon Polygon;
  typedef Geometry_Mesh Mesh;
  typedef Geometry_Spline2D Spline2D;
  typedef Geometry_Spline3D Spline3D;

  typedef Geometry_Usage Usage;
  static constexpr Usage SCENARIO =
    Geometry_Usage_SCENARIO;
  static constexpr Usage ENTITY =
    Geometry_Usage_ENTITY;
  static inline bool Usage_IsValid(int value) {
    return Geometry_Usage_IsValid(value);
  }
  static constexpr Usage Usage_MIN =
    Geometry_Usage_Usage_MIN;
  static constexpr Usage Usage_MAX =
    Geometry_Usage_Usage_MAX;
  static constexpr int Usage_ARRAYSIZE =
    Geometry_Usage_Usage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Usage_descriptor() {
    return Geometry_Usage_descriptor();
  }
  template<typename T>
  static inline const std::string& Usage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Usage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Usage_Name.");
    return Geometry_Usage_Name(enum_t_value);
  }
  static inline bool Usage_Parse(const std::string& name,
      Usage* value) {
    return Geometry_Usage_Parse(name, value);
  }

  typedef Geometry_Category Category;
  static constexpr Category UNKNOWN_GEOMETRY =
    Geometry_Category_UNKNOWN_GEOMETRY;
  static constexpr Category PHYSICAL_GEOMETRY =
    Geometry_Category_PHYSICAL_GEOMETRY;
  static constexpr Category GROUND =
    Geometry_Category_GROUND;
  static constexpr Category VEGETATION =
    Geometry_Category_VEGETATION;
  static constexpr Category STRUCTURE =
    Geometry_Category_STRUCTURE;
  static constexpr Category ROAD =
    Geometry_Category_ROAD;
  static constexpr Category ABSTRACT_GEOMETRY =
    Geometry_Category_ABSTRACT_GEOMETRY;
  static constexpr Category ZONE =
    Geometry_Category_ZONE;
  static constexpr Category TRIGGER =
    Geometry_Category_TRIGGER;
  static constexpr Category EDGE =
    Geometry_Category_EDGE;
  static constexpr Category PATH =
    Geometry_Category_PATH;
  static constexpr Category PLANNED_PATH =
    Geometry_Category_PLANNED_PATH;
  static constexpr Category HISTORIC_PATH =
    Geometry_Category_HISTORIC_PATH;
  static constexpr Category SENSOR_COVERAGE =
    Geometry_Category_SENSOR_COVERAGE;
  static constexpr Category SENSOR_HIT =
    Geometry_Category_SENSOR_HIT;
  static constexpr Category DEBUG_GEOMETRY =
    Geometry_Category_DEBUG_GEOMETRY;
  static inline bool Category_IsValid(int value) {
    return Geometry_Category_IsValid(value);
  }
  static constexpr Category Category_MIN =
    Geometry_Category_Category_MIN;
  static constexpr Category Category_MAX =
    Geometry_Category_Category_MAX;
  static constexpr int Category_ARRAYSIZE =
    Geometry_Category_Category_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Category_descriptor() {
    return Geometry_Category_descriptor();
  }
  template<typename T>
  static inline const std::string& Category_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Category>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Category_Name.");
    return Geometry_Category_Name(enum_t_value);
  }
  static inline bool Category_Parse(const std::string& name,
      Category* value) {
    return Geometry_Category_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerClientIdFieldNumber = 2,
    kTitleFieldNumber = 22,
    kTypeFieldNumber = 31,
    kColorFieldNumber = 20,
    kLabelColorFieldNumber = 23,
    kTransparencyFieldNumber = 21,
    kLabelTransparencyFieldNumber = 24,
    kLineWidthFieldNumber = 27,
    kUsageFieldNumber = 30,
    kScalableFieldNumber = 25,
    kWireframeFieldNumber = 26,
    kDisabledFieldNumber = 34,
    kDeletedFieldNumber = 35,
    kCategoryFieldNumber = 32,
    kPointFieldNumber = 3,
    kPoint3DFieldNumber = 4,
    kLineFieldNumber = 5,
    kLine3DFieldNumber = 6,
    kPolygonFieldNumber = 7,
    kMeshFieldNumber = 8,
    kSplineFieldNumber = 9,
    kSpline3DFieldNumber = 10,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string owner_client_id = 2;
  void clear_owner_client_id();
  const std::string& owner_client_id() const;
  void set_owner_client_id(const std::string& value);
  void set_owner_client_id(std::string&& value);
  void set_owner_client_id(const char* value);
  void set_owner_client_id(const char* value, size_t size);
  std::string* mutable_owner_client_id();
  std::string* release_owner_client_id();
  void set_allocated_owner_client_id(std::string* owner_client_id);
  private:
  const std::string& _internal_owner_client_id() const;
  void _internal_set_owner_client_id(const std::string& value);
  std::string* _internal_mutable_owner_client_id();
  public:

  // string title = 22;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string type = 31;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .inhumate.rti.proto.Color color = 20;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::inhumate::rti::proto::Color& color() const;
  ::inhumate::rti::proto::Color* release_color();
  ::inhumate::rti::proto::Color* mutable_color();
  void set_allocated_color(::inhumate::rti::proto::Color* color);
  private:
  const ::inhumate::rti::proto::Color& _internal_color() const;
  ::inhumate::rti::proto::Color* _internal_mutable_color();
  public:

  // .inhumate.rti.proto.Color label_color = 23;
  bool has_label_color() const;
  private:
  bool _internal_has_label_color() const;
  public:
  void clear_label_color();
  const ::inhumate::rti::proto::Color& label_color() const;
  ::inhumate::rti::proto::Color* release_label_color();
  ::inhumate::rti::proto::Color* mutable_label_color();
  void set_allocated_label_color(::inhumate::rti::proto::Color* label_color);
  private:
  const ::inhumate::rti::proto::Color& _internal_label_color() const;
  ::inhumate::rti::proto::Color* _internal_mutable_label_color();
  public:

  // float transparency = 21;
  void clear_transparency();
  float transparency() const;
  void set_transparency(float value);
  private:
  float _internal_transparency() const;
  void _internal_set_transparency(float value);
  public:

  // float label_transparency = 24;
  void clear_label_transparency();
  float label_transparency() const;
  void set_label_transparency(float value);
  private:
  float _internal_label_transparency() const;
  void _internal_set_label_transparency(float value);
  public:

  // float line_width = 27;
  void clear_line_width();
  float line_width() const;
  void set_line_width(float value);
  private:
  float _internal_line_width() const;
  void _internal_set_line_width(float value);
  public:

  // .inhumate.rti.proto.Geometry.Usage usage = 30;
  void clear_usage();
  ::inhumate::rti::proto::Geometry_Usage usage() const;
  void set_usage(::inhumate::rti::proto::Geometry_Usage value);
  private:
  ::inhumate::rti::proto::Geometry_Usage _internal_usage() const;
  void _internal_set_usage(::inhumate::rti::proto::Geometry_Usage value);
  public:

  // bool scalable = 25;
  void clear_scalable();
  bool scalable() const;
  void set_scalable(bool value);
  private:
  bool _internal_scalable() const;
  void _internal_set_scalable(bool value);
  public:

  // bool wireframe = 26;
  void clear_wireframe();
  bool wireframe() const;
  void set_wireframe(bool value);
  private:
  bool _internal_wireframe() const;
  void _internal_set_wireframe(bool value);
  public:

  // bool disabled = 34;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // bool deleted = 35;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // .inhumate.rti.proto.Geometry.Category category = 32;
  void clear_category();
  ::inhumate::rti::proto::Geometry_Category category() const;
  void set_category(::inhumate::rti::proto::Geometry_Category value);
  private:
  ::inhumate::rti::proto::Geometry_Category _internal_category() const;
  void _internal_set_category(::inhumate::rti::proto::Geometry_Category value);
  public:

  // .inhumate.rti.proto.Geometry.Point2D point = 3;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::inhumate::rti::proto::Geometry_Point2D& point() const;
  ::inhumate::rti::proto::Geometry_Point2D* release_point();
  ::inhumate::rti::proto::Geometry_Point2D* mutable_point();
  void set_allocated_point(::inhumate::rti::proto::Geometry_Point2D* point);
  private:
  const ::inhumate::rti::proto::Geometry_Point2D& _internal_point() const;
  ::inhumate::rti::proto::Geometry_Point2D* _internal_mutable_point();
  public:

  // .inhumate.rti.proto.Geometry.Point3D point3d = 4;
  bool has_point3d() const;
  private:
  bool _internal_has_point3d() const;
  public:
  void clear_point3d();
  const ::inhumate::rti::proto::Geometry_Point3D& point3d() const;
  ::inhumate::rti::proto::Geometry_Point3D* release_point3d();
  ::inhumate::rti::proto::Geometry_Point3D* mutable_point3d();
  void set_allocated_point3d(::inhumate::rti::proto::Geometry_Point3D* point3d);
  private:
  const ::inhumate::rti::proto::Geometry_Point3D& _internal_point3d() const;
  ::inhumate::rti::proto::Geometry_Point3D* _internal_mutable_point3d();
  public:

  // .inhumate.rti.proto.Geometry.Line2D line = 5;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  const ::inhumate::rti::proto::Geometry_Line2D& line() const;
  ::inhumate::rti::proto::Geometry_Line2D* release_line();
  ::inhumate::rti::proto::Geometry_Line2D* mutable_line();
  void set_allocated_line(::inhumate::rti::proto::Geometry_Line2D* line);
  private:
  const ::inhumate::rti::proto::Geometry_Line2D& _internal_line() const;
  ::inhumate::rti::proto::Geometry_Line2D* _internal_mutable_line();
  public:

  // .inhumate.rti.proto.Geometry.Line3D line3d = 6;
  bool has_line3d() const;
  private:
  bool _internal_has_line3d() const;
  public:
  void clear_line3d();
  const ::inhumate::rti::proto::Geometry_Line3D& line3d() const;
  ::inhumate::rti::proto::Geometry_Line3D* release_line3d();
  ::inhumate::rti::proto::Geometry_Line3D* mutable_line3d();
  void set_allocated_line3d(::inhumate::rti::proto::Geometry_Line3D* line3d);
  private:
  const ::inhumate::rti::proto::Geometry_Line3D& _internal_line3d() const;
  ::inhumate::rti::proto::Geometry_Line3D* _internal_mutable_line3d();
  public:

  // .inhumate.rti.proto.Geometry.Polygon polygon = 7;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::inhumate::rti::proto::Geometry_Polygon& polygon() const;
  ::inhumate::rti::proto::Geometry_Polygon* release_polygon();
  ::inhumate::rti::proto::Geometry_Polygon* mutable_polygon();
  void set_allocated_polygon(::inhumate::rti::proto::Geometry_Polygon* polygon);
  private:
  const ::inhumate::rti::proto::Geometry_Polygon& _internal_polygon() const;
  ::inhumate::rti::proto::Geometry_Polygon* _internal_mutable_polygon();
  public:

  // .inhumate.rti.proto.Geometry.Mesh mesh = 8;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::inhumate::rti::proto::Geometry_Mesh& mesh() const;
  ::inhumate::rti::proto::Geometry_Mesh* release_mesh();
  ::inhumate::rti::proto::Geometry_Mesh* mutable_mesh();
  void set_allocated_mesh(::inhumate::rti::proto::Geometry_Mesh* mesh);
  private:
  const ::inhumate::rti::proto::Geometry_Mesh& _internal_mesh() const;
  ::inhumate::rti::proto::Geometry_Mesh* _internal_mutable_mesh();
  public:

  // .inhumate.rti.proto.Geometry.Spline2D spline = 9;
  bool has_spline() const;
  private:
  bool _internal_has_spline() const;
  public:
  void clear_spline();
  const ::inhumate::rti::proto::Geometry_Spline2D& spline() const;
  ::inhumate::rti::proto::Geometry_Spline2D* release_spline();
  ::inhumate::rti::proto::Geometry_Spline2D* mutable_spline();
  void set_allocated_spline(::inhumate::rti::proto::Geometry_Spline2D* spline);
  private:
  const ::inhumate::rti::proto::Geometry_Spline2D& _internal_spline() const;
  ::inhumate::rti::proto::Geometry_Spline2D* _internal_mutable_spline();
  public:

  // .inhumate.rti.proto.Geometry.Spline3D spline3d = 10;
  bool has_spline3d() const;
  private:
  bool _internal_has_spline3d() const;
  public:
  void clear_spline3d();
  const ::inhumate::rti::proto::Geometry_Spline3D& spline3d() const;
  ::inhumate::rti::proto::Geometry_Spline3D* release_spline3d();
  ::inhumate::rti::proto::Geometry_Spline3D* mutable_spline3d();
  void set_allocated_spline3d(::inhumate::rti::proto::Geometry_Spline3D* spline3d);
  private:
  const ::inhumate::rti::proto::Geometry_Spline3D& _internal_spline3d() const;
  ::inhumate::rti::proto::Geometry_Spline3D* _internal_mutable_spline3d();
  public:

  void clear_shape();
  ShapeCase shape_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Geometry)
 private:
  class _Internal;
  void set_has_point();
  void set_has_point3d();
  void set_has_line();
  void set_has_line3d();
  void set_has_polygon();
  void set_has_mesh();
  void set_has_spline();
  void set_has_spline3d();

  inline bool has_shape() const;
  inline void clear_has_shape();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::inhumate::rti::proto::Color* color_;
  ::inhumate::rti::proto::Color* label_color_;
  float transparency_;
  float label_transparency_;
  float line_width_;
  int usage_;
  bool scalable_;
  bool wireframe_;
  bool disabled_;
  bool deleted_;
  int category_;
  union ShapeUnion {
    ShapeUnion() {}
    ::inhumate::rti::proto::Geometry_Point2D* point_;
    ::inhumate::rti::proto::Geometry_Point3D* point3d_;
    ::inhumate::rti::proto::Geometry_Line2D* line_;
    ::inhumate::rti::proto::Geometry_Line3D* line3d_;
    ::inhumate::rti::proto::Geometry_Polygon* polygon_;
    ::inhumate::rti::proto::Geometry_Mesh* mesh_;
    ::inhumate::rti::proto::Geometry_Spline2D* spline_;
    ::inhumate::rti::proto::Geometry_Spline3D* spline3d_;
  } shape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Geometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Geometry_Point2D

// .inhumate.rti.proto.Geometry.LocalPoint2D local = 1;
inline bool Geometry_Point2D::_internal_has_local() const {
  return this != internal_default_instance() && local_ != nullptr;
}
inline bool Geometry_Point2D::has_local() const {
  return _internal_has_local();
}
inline void Geometry_Point2D::clear_local() {
  if (GetArenaNoVirtual() == nullptr && local_ != nullptr) {
    delete local_;
  }
  local_ = nullptr;
}
inline const ::inhumate::rti::proto::Geometry_LocalPoint2D& Geometry_Point2D::_internal_local() const {
  const ::inhumate::rti::proto::Geometry_LocalPoint2D* p = local_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Geometry_LocalPoint2D*>(
      &::inhumate::rti::proto::_Geometry_LocalPoint2D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_LocalPoint2D& Geometry_Point2D::local() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Point2D.local)
  return _internal_local();
}
inline ::inhumate::rti::proto::Geometry_LocalPoint2D* Geometry_Point2D::release_local() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.Point2D.local)
  
  ::inhumate::rti::proto::Geometry_LocalPoint2D* temp = local_;
  local_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Geometry_LocalPoint2D* Geometry_Point2D::_internal_mutable_local() {
  
  if (local_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Geometry_LocalPoint2D>(GetArenaNoVirtual());
    local_ = p;
  }
  return local_;
}
inline ::inhumate::rti::proto::Geometry_LocalPoint2D* Geometry_Point2D::mutable_local() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Point2D.local)
  return _internal_mutable_local();
}
inline void Geometry_Point2D::set_allocated_local(::inhumate::rti::proto::Geometry_LocalPoint2D* local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_;
  }
  if (local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    
  } else {
    
  }
  local_ = local;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.Point2D.local)
}

// .inhumate.rti.proto.Geometry.GeodeticPoint2D geodetic = 2;
inline bool Geometry_Point2D::_internal_has_geodetic() const {
  return this != internal_default_instance() && geodetic_ != nullptr;
}
inline bool Geometry_Point2D::has_geodetic() const {
  return _internal_has_geodetic();
}
inline void Geometry_Point2D::clear_geodetic() {
  if (GetArenaNoVirtual() == nullptr && geodetic_ != nullptr) {
    delete geodetic_;
  }
  geodetic_ = nullptr;
}
inline const ::inhumate::rti::proto::Geometry_GeodeticPoint2D& Geometry_Point2D::_internal_geodetic() const {
  const ::inhumate::rti::proto::Geometry_GeodeticPoint2D* p = geodetic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Geometry_GeodeticPoint2D*>(
      &::inhumate::rti::proto::_Geometry_GeodeticPoint2D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_GeodeticPoint2D& Geometry_Point2D::geodetic() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Point2D.geodetic)
  return _internal_geodetic();
}
inline ::inhumate::rti::proto::Geometry_GeodeticPoint2D* Geometry_Point2D::release_geodetic() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.Point2D.geodetic)
  
  ::inhumate::rti::proto::Geometry_GeodeticPoint2D* temp = geodetic_;
  geodetic_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Geometry_GeodeticPoint2D* Geometry_Point2D::_internal_mutable_geodetic() {
  
  if (geodetic_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Geometry_GeodeticPoint2D>(GetArenaNoVirtual());
    geodetic_ = p;
  }
  return geodetic_;
}
inline ::inhumate::rti::proto::Geometry_GeodeticPoint2D* Geometry_Point2D::mutable_geodetic() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Point2D.geodetic)
  return _internal_mutable_geodetic();
}
inline void Geometry_Point2D::set_allocated_geodetic(::inhumate::rti::proto::Geometry_GeodeticPoint2D* geodetic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geodetic_;
  }
  if (geodetic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geodetic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodetic, submessage_arena);
    }
    
  } else {
    
  }
  geodetic_ = geodetic;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.Point2D.geodetic)
}

// -------------------------------------------------------------------

// Geometry_LocalPoint2D

// float x = 1;
inline void Geometry_LocalPoint2D::clear_x() {
  x_ = 0;
}
inline float Geometry_LocalPoint2D::_internal_x() const {
  return x_;
}
inline float Geometry_LocalPoint2D::x() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.LocalPoint2D.x)
  return _internal_x();
}
inline void Geometry_LocalPoint2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Geometry_LocalPoint2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.LocalPoint2D.x)
}

// float y = 2;
inline void Geometry_LocalPoint2D::clear_y() {
  y_ = 0;
}
inline float Geometry_LocalPoint2D::_internal_y() const {
  return y_;
}
inline float Geometry_LocalPoint2D::y() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.LocalPoint2D.y)
  return _internal_y();
}
inline void Geometry_LocalPoint2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Geometry_LocalPoint2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.LocalPoint2D.y)
}

// -------------------------------------------------------------------

// Geometry_GeodeticPoint2D

// double longitude = 1;
inline void Geometry_GeodeticPoint2D::clear_longitude() {
  longitude_ = 0;
}
inline double Geometry_GeodeticPoint2D::_internal_longitude() const {
  return longitude_;
}
inline double Geometry_GeodeticPoint2D::longitude() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.GeodeticPoint2D.longitude)
  return _internal_longitude();
}
inline void Geometry_GeodeticPoint2D::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Geometry_GeodeticPoint2D::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.GeodeticPoint2D.longitude)
}

// double latitude = 2;
inline void Geometry_GeodeticPoint2D::clear_latitude() {
  latitude_ = 0;
}
inline double Geometry_GeodeticPoint2D::_internal_latitude() const {
  return latitude_;
}
inline double Geometry_GeodeticPoint2D::latitude() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.GeodeticPoint2D.latitude)
  return _internal_latitude();
}
inline void Geometry_GeodeticPoint2D::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Geometry_GeodeticPoint2D::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.GeodeticPoint2D.latitude)
}

// -------------------------------------------------------------------

// Geometry_Point3D

// .inhumate.rti.proto.Geometry.LocalPoint3D local = 1;
inline bool Geometry_Point3D::_internal_has_local() const {
  return this != internal_default_instance() && local_ != nullptr;
}
inline bool Geometry_Point3D::has_local() const {
  return _internal_has_local();
}
inline void Geometry_Point3D::clear_local() {
  if (GetArenaNoVirtual() == nullptr && local_ != nullptr) {
    delete local_;
  }
  local_ = nullptr;
}
inline const ::inhumate::rti::proto::Geometry_LocalPoint3D& Geometry_Point3D::_internal_local() const {
  const ::inhumate::rti::proto::Geometry_LocalPoint3D* p = local_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Geometry_LocalPoint3D*>(
      &::inhumate::rti::proto::_Geometry_LocalPoint3D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_LocalPoint3D& Geometry_Point3D::local() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Point3D.local)
  return _internal_local();
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Point3D::release_local() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.Point3D.local)
  
  ::inhumate::rti::proto::Geometry_LocalPoint3D* temp = local_;
  local_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Point3D::_internal_mutable_local() {
  
  if (local_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Geometry_LocalPoint3D>(GetArenaNoVirtual());
    local_ = p;
  }
  return local_;
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Point3D::mutable_local() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Point3D.local)
  return _internal_mutable_local();
}
inline void Geometry_Point3D::set_allocated_local(::inhumate::rti::proto::Geometry_LocalPoint3D* local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_;
  }
  if (local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    
  } else {
    
  }
  local_ = local;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.Point3D.local)
}

// .inhumate.rti.proto.Geometry.GeodeticPoint3D geodetic = 2;
inline bool Geometry_Point3D::_internal_has_geodetic() const {
  return this != internal_default_instance() && geodetic_ != nullptr;
}
inline bool Geometry_Point3D::has_geodetic() const {
  return _internal_has_geodetic();
}
inline void Geometry_Point3D::clear_geodetic() {
  if (GetArenaNoVirtual() == nullptr && geodetic_ != nullptr) {
    delete geodetic_;
  }
  geodetic_ = nullptr;
}
inline const ::inhumate::rti::proto::Geometry_GeodeticPoint3D& Geometry_Point3D::_internal_geodetic() const {
  const ::inhumate::rti::proto::Geometry_GeodeticPoint3D* p = geodetic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Geometry_GeodeticPoint3D*>(
      &::inhumate::rti::proto::_Geometry_GeodeticPoint3D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_GeodeticPoint3D& Geometry_Point3D::geodetic() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Point3D.geodetic)
  return _internal_geodetic();
}
inline ::inhumate::rti::proto::Geometry_GeodeticPoint3D* Geometry_Point3D::release_geodetic() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.Point3D.geodetic)
  
  ::inhumate::rti::proto::Geometry_GeodeticPoint3D* temp = geodetic_;
  geodetic_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Geometry_GeodeticPoint3D* Geometry_Point3D::_internal_mutable_geodetic() {
  
  if (geodetic_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Geometry_GeodeticPoint3D>(GetArenaNoVirtual());
    geodetic_ = p;
  }
  return geodetic_;
}
inline ::inhumate::rti::proto::Geometry_GeodeticPoint3D* Geometry_Point3D::mutable_geodetic() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Point3D.geodetic)
  return _internal_mutable_geodetic();
}
inline void Geometry_Point3D::set_allocated_geodetic(::inhumate::rti::proto::Geometry_GeodeticPoint3D* geodetic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geodetic_;
  }
  if (geodetic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geodetic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodetic, submessage_arena);
    }
    
  } else {
    
  }
  geodetic_ = geodetic;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.Point3D.geodetic)
}

// -------------------------------------------------------------------

// Geometry_LocalPoint3D

// float x = 1;
inline void Geometry_LocalPoint3D::clear_x() {
  x_ = 0;
}
inline float Geometry_LocalPoint3D::_internal_x() const {
  return x_;
}
inline float Geometry_LocalPoint3D::x() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.LocalPoint3D.x)
  return _internal_x();
}
inline void Geometry_LocalPoint3D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Geometry_LocalPoint3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.LocalPoint3D.x)
}

// float y = 2;
inline void Geometry_LocalPoint3D::clear_y() {
  y_ = 0;
}
inline float Geometry_LocalPoint3D::_internal_y() const {
  return y_;
}
inline float Geometry_LocalPoint3D::y() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.LocalPoint3D.y)
  return _internal_y();
}
inline void Geometry_LocalPoint3D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Geometry_LocalPoint3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.LocalPoint3D.y)
}

// float z = 3;
inline void Geometry_LocalPoint3D::clear_z() {
  z_ = 0;
}
inline float Geometry_LocalPoint3D::_internal_z() const {
  return z_;
}
inline float Geometry_LocalPoint3D::z() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.LocalPoint3D.z)
  return _internal_z();
}
inline void Geometry_LocalPoint3D::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Geometry_LocalPoint3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.LocalPoint3D.z)
}

// -------------------------------------------------------------------

// Geometry_GeodeticPoint3D

// double longitude = 1;
inline void Geometry_GeodeticPoint3D::clear_longitude() {
  longitude_ = 0;
}
inline double Geometry_GeodeticPoint3D::_internal_longitude() const {
  return longitude_;
}
inline double Geometry_GeodeticPoint3D::longitude() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.GeodeticPoint3D.longitude)
  return _internal_longitude();
}
inline void Geometry_GeodeticPoint3D::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Geometry_GeodeticPoint3D::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.GeodeticPoint3D.longitude)
}

// double latitude = 2;
inline void Geometry_GeodeticPoint3D::clear_latitude() {
  latitude_ = 0;
}
inline double Geometry_GeodeticPoint3D::_internal_latitude() const {
  return latitude_;
}
inline double Geometry_GeodeticPoint3D::latitude() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.GeodeticPoint3D.latitude)
  return _internal_latitude();
}
inline void Geometry_GeodeticPoint3D::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Geometry_GeodeticPoint3D::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.GeodeticPoint3D.latitude)
}

// double altitude = 3;
inline void Geometry_GeodeticPoint3D::clear_altitude() {
  altitude_ = 0;
}
inline double Geometry_GeodeticPoint3D::_internal_altitude() const {
  return altitude_;
}
inline double Geometry_GeodeticPoint3D::altitude() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.GeodeticPoint3D.altitude)
  return _internal_altitude();
}
inline void Geometry_GeodeticPoint3D::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void Geometry_GeodeticPoint3D::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.GeodeticPoint3D.altitude)
}

// -------------------------------------------------------------------

// Geometry_Line2D

// repeated .inhumate.rti.proto.Geometry.Point2D points = 1;
inline int Geometry_Line2D::_internal_points_size() const {
  return points_.size();
}
inline int Geometry_Line2D::points_size() const {
  return _internal_points_size();
}
inline void Geometry_Line2D::clear_points() {
  points_.Clear();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Line2D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Line2D.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >*
Geometry_Line2D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Line2D.points)
  return &points_;
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry_Line2D::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry_Line2D::points(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Line2D.points)
  return _internal_points(index);
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Line2D::_internal_add_points() {
  return points_.Add();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Line2D::add_points() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Line2D.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >&
Geometry_Line2D::points() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Line2D.points)
  return points_;
}

// -------------------------------------------------------------------

// Geometry_Line3D

// repeated .inhumate.rti.proto.Geometry.Point3D points = 1;
inline int Geometry_Line3D::_internal_points_size() const {
  return points_.size();
}
inline int Geometry_Line3D::points_size() const {
  return _internal_points_size();
}
inline void Geometry_Line3D::clear_points() {
  points_.Clear();
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Line3D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Line3D.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >*
Geometry_Line3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Line3D.points)
  return &points_;
}
inline const ::inhumate::rti::proto::Geometry_Point3D& Geometry_Line3D::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_Point3D& Geometry_Line3D::points(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Line3D.points)
  return _internal_points(index);
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Line3D::_internal_add_points() {
  return points_.Add();
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Line3D::add_points() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Line3D.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >&
Geometry_Line3D::points() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Line3D.points)
  return points_;
}

// -------------------------------------------------------------------

// Geometry_Polygon

// repeated .inhumate.rti.proto.Geometry.Point2D points = 1;
inline int Geometry_Polygon::_internal_points_size() const {
  return points_.size();
}
inline int Geometry_Polygon::points_size() const {
  return _internal_points_size();
}
inline void Geometry_Polygon::clear_points() {
  points_.Clear();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Polygon::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Polygon.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >*
Geometry_Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Polygon.points)
  return &points_;
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry_Polygon::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry_Polygon::points(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Polygon.points)
  return _internal_points(index);
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Polygon::_internal_add_points() {
  return points_.Add();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Polygon::add_points() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Polygon.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >&
Geometry_Polygon::points() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Polygon.points)
  return points_;
}

// float base = 2;
inline void Geometry_Polygon::clear_base() {
  base_ = 0;
}
inline float Geometry_Polygon::_internal_base() const {
  return base_;
}
inline float Geometry_Polygon::base() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Polygon.base)
  return _internal_base();
}
inline void Geometry_Polygon::_internal_set_base(float value) {
  
  base_ = value;
}
inline void Geometry_Polygon::set_base(float value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.Polygon.base)
}

// float height = 3;
inline void Geometry_Polygon::clear_height() {
  height_ = 0;
}
inline float Geometry_Polygon::_internal_height() const {
  return height_;
}
inline float Geometry_Polygon::height() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Polygon.height)
  return _internal_height();
}
inline void Geometry_Polygon::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Geometry_Polygon::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.Polygon.height)
}

// -------------------------------------------------------------------

// Geometry_Mesh

// repeated .inhumate.rti.proto.Geometry.LocalPoint3D vertices = 1;
inline int Geometry_Mesh::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Geometry_Mesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void Geometry_Mesh::clear_vertices() {
  vertices_.Clear();
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Mesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Mesh.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D >*
Geometry_Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Mesh.vertices)
  return &vertices_;
}
inline const ::inhumate::rti::proto::Geometry_LocalPoint3D& Geometry_Mesh::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_LocalPoint3D& Geometry_Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Mesh.vertices)
  return _internal_vertices(index);
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Mesh::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Mesh::add_vertices() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Mesh.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D >&
Geometry_Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Mesh.vertices)
  return vertices_;
}

// repeated int32 indices = 2;
inline int Geometry_Mesh::_internal_indices_size() const {
  return indices_.size();
}
inline int Geometry_Mesh::indices_size() const {
  return _internal_indices_size();
}
inline void Geometry_Mesh::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Geometry_Mesh::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Geometry_Mesh::indices(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Mesh.indices)
  return _internal_indices(index);
}
inline void Geometry_Mesh::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.Mesh.indices)
}
inline void Geometry_Mesh::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void Geometry_Mesh::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Mesh.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Geometry_Mesh::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Geometry_Mesh::indices() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Mesh.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Geometry_Mesh::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Geometry_Mesh::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Mesh.indices)
  return _internal_mutable_indices();
}

// repeated .inhumate.rti.proto.Geometry.LocalPoint3D normals = 3;
inline int Geometry_Mesh::_internal_normals_size() const {
  return normals_.size();
}
inline int Geometry_Mesh::normals_size() const {
  return _internal_normals_size();
}
inline void Geometry_Mesh::clear_normals() {
  normals_.Clear();
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Mesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Mesh.normals)
  return normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D >*
Geometry_Mesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Mesh.normals)
  return &normals_;
}
inline const ::inhumate::rti::proto::Geometry_LocalPoint3D& Geometry_Mesh::_internal_normals(int index) const {
  return normals_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_LocalPoint3D& Geometry_Mesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Mesh.normals)
  return _internal_normals(index);
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Mesh::_internal_add_normals() {
  return normals_.Add();
}
inline ::inhumate::rti::proto::Geometry_LocalPoint3D* Geometry_Mesh::add_normals() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Mesh.normals)
  return _internal_add_normals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_LocalPoint3D >&
Geometry_Mesh::normals() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Mesh.normals)
  return normals_;
}

// -------------------------------------------------------------------

// Geometry_Spline2D

// repeated .inhumate.rti.proto.Geometry.Point2D points = 2;
inline int Geometry_Spline2D::_internal_points_size() const {
  return points_.size();
}
inline int Geometry_Spline2D::points_size() const {
  return _internal_points_size();
}
inline void Geometry_Spline2D::clear_points() {
  points_.Clear();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Spline2D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Spline2D.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >*
Geometry_Spline2D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Spline2D.points)
  return &points_;
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry_Spline2D::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry_Spline2D::points(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Spline2D.points)
  return _internal_points(index);
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Spline2D::_internal_add_points() {
  return points_.Add();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Spline2D::add_points() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Spline2D.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >&
Geometry_Spline2D::points() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Spline2D.points)
  return points_;
}

// repeated .inhumate.rti.proto.Geometry.Point2D control_points = 3;
inline int Geometry_Spline2D::_internal_control_points_size() const {
  return control_points_.size();
}
inline int Geometry_Spline2D::control_points_size() const {
  return _internal_control_points_size();
}
inline void Geometry_Spline2D::clear_control_points() {
  control_points_.Clear();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Spline2D::mutable_control_points(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Spline2D.control_points)
  return control_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >*
Geometry_Spline2D::mutable_control_points() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Spline2D.control_points)
  return &control_points_;
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry_Spline2D::_internal_control_points(int index) const {
  return control_points_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry_Spline2D::control_points(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Spline2D.control_points)
  return _internal_control_points(index);
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Spline2D::_internal_add_control_points() {
  return control_points_.Add();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry_Spline2D::add_control_points() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Spline2D.control_points)
  return _internal_add_control_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point2D >&
Geometry_Spline2D::control_points() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Spline2D.control_points)
  return control_points_;
}

// -------------------------------------------------------------------

// Geometry_Spline3D

// repeated .inhumate.rti.proto.Geometry.Point3D points = 2;
inline int Geometry_Spline3D::_internal_points_size() const {
  return points_.size();
}
inline int Geometry_Spline3D::points_size() const {
  return _internal_points_size();
}
inline void Geometry_Spline3D::clear_points() {
  points_.Clear();
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Spline3D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Spline3D.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >*
Geometry_Spline3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Spline3D.points)
  return &points_;
}
inline const ::inhumate::rti::proto::Geometry_Point3D& Geometry_Spline3D::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_Point3D& Geometry_Spline3D::points(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Spline3D.points)
  return _internal_points(index);
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Spline3D::_internal_add_points() {
  return points_.Add();
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Spline3D::add_points() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Spline3D.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >&
Geometry_Spline3D::points() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Spline3D.points)
  return points_;
}

// repeated .inhumate.rti.proto.Geometry.Point3D control_points = 3;
inline int Geometry_Spline3D::_internal_control_points_size() const {
  return control_points_.size();
}
inline int Geometry_Spline3D::control_points_size() const {
  return _internal_control_points_size();
}
inline void Geometry_Spline3D::clear_control_points() {
  control_points_.Clear();
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Spline3D::mutable_control_points(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.Spline3D.control_points)
  return control_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >*
Geometry_Spline3D::mutable_control_points() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Geometry.Spline3D.control_points)
  return &control_points_;
}
inline const ::inhumate::rti::proto::Geometry_Point3D& Geometry_Spline3D::_internal_control_points(int index) const {
  return control_points_.Get(index);
}
inline const ::inhumate::rti::proto::Geometry_Point3D& Geometry_Spline3D::control_points(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.Spline3D.control_points)
  return _internal_control_points(index);
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Spline3D::_internal_add_control_points() {
  return control_points_.Add();
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry_Spline3D::add_control_points() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Geometry.Spline3D.control_points)
  return _internal_add_control_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Geometry_Point3D >&
Geometry_Spline3D::control_points() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Geometry.Spline3D.control_points)
  return control_points_;
}

// -------------------------------------------------------------------

// Geometry

// string id = 1;
inline void Geometry::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Geometry::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.id)
  return _internal_id();
}
inline void Geometry::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.id)
}
inline std::string* Geometry::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.id)
  return _internal_mutable_id();
}
inline const std::string& Geometry::_internal_id() const {
  return id_.GetNoArena();
}
inline void Geometry::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Geometry::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Geometry.id)
}
inline void Geometry::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Geometry.id)
}
inline void Geometry::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Geometry.id)
}
inline std::string* Geometry::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Geometry::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Geometry::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.id)
}

// string owner_client_id = 2;
inline void Geometry::clear_owner_client_id() {
  owner_client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Geometry::owner_client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.owner_client_id)
  return _internal_owner_client_id();
}
inline void Geometry::set_owner_client_id(const std::string& value) {
  _internal_set_owner_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.owner_client_id)
}
inline std::string* Geometry::mutable_owner_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.owner_client_id)
  return _internal_mutable_owner_client_id();
}
inline const std::string& Geometry::_internal_owner_client_id() const {
  return owner_client_id_.GetNoArena();
}
inline void Geometry::_internal_set_owner_client_id(const std::string& value) {
  
  owner_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Geometry::set_owner_client_id(std::string&& value) {
  
  owner_client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Geometry.owner_client_id)
}
inline void Geometry::set_owner_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Geometry.owner_client_id)
}
inline void Geometry::set_owner_client_id(const char* value, size_t size) {
  
  owner_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Geometry.owner_client_id)
}
inline std::string* Geometry::_internal_mutable_owner_client_id() {
  
  return owner_client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Geometry::release_owner_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.owner_client_id)
  
  return owner_client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Geometry::set_allocated_owner_client_id(std::string* owner_client_id) {
  if (owner_client_id != nullptr) {
    
  } else {
    
  }
  owner_client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.owner_client_id)
}

// .inhumate.rti.proto.Geometry.Point2D point = 3;
inline bool Geometry::_internal_has_point() const {
  return shape_case() == kPoint;
}
inline bool Geometry::has_point() const {
  return _internal_has_point();
}
inline void Geometry::set_has_point() {
  _oneof_case_[0] = kPoint;
}
inline void Geometry::clear_point() {
  if (_internal_has_point()) {
    delete shape_.point_;
    clear_has_shape();
  }
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry::release_point() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.point)
  if (_internal_has_point()) {
    clear_has_shape();
      ::inhumate::rti::proto::Geometry_Point2D* temp = shape_.point_;
    shape_.point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry::_internal_point() const {
  return _internal_has_point()
      ? *shape_.point_
      : *reinterpret_cast< ::inhumate::rti::proto::Geometry_Point2D*>(&::inhumate::rti::proto::_Geometry_Point2D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_Point2D& Geometry::point() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.point)
  return _internal_point();
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry::_internal_mutable_point() {
  if (!_internal_has_point()) {
    clear_shape();
    set_has_point();
    shape_.point_ = CreateMaybeMessage< ::inhumate::rti::proto::Geometry_Point2D >(
        GetArenaNoVirtual());
  }
  return shape_.point_;
}
inline ::inhumate::rti::proto::Geometry_Point2D* Geometry::mutable_point() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.point)
  return _internal_mutable_point();
}

// .inhumate.rti.proto.Geometry.Point3D point3d = 4;
inline bool Geometry::_internal_has_point3d() const {
  return shape_case() == kPoint3D;
}
inline bool Geometry::has_point3d() const {
  return _internal_has_point3d();
}
inline void Geometry::set_has_point3d() {
  _oneof_case_[0] = kPoint3D;
}
inline void Geometry::clear_point3d() {
  if (_internal_has_point3d()) {
    delete shape_.point3d_;
    clear_has_shape();
  }
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry::release_point3d() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.point3d)
  if (_internal_has_point3d()) {
    clear_has_shape();
      ::inhumate::rti::proto::Geometry_Point3D* temp = shape_.point3d_;
    shape_.point3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Geometry_Point3D& Geometry::_internal_point3d() const {
  return _internal_has_point3d()
      ? *shape_.point3d_
      : *reinterpret_cast< ::inhumate::rti::proto::Geometry_Point3D*>(&::inhumate::rti::proto::_Geometry_Point3D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_Point3D& Geometry::point3d() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.point3d)
  return _internal_point3d();
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry::_internal_mutable_point3d() {
  if (!_internal_has_point3d()) {
    clear_shape();
    set_has_point3d();
    shape_.point3d_ = CreateMaybeMessage< ::inhumate::rti::proto::Geometry_Point3D >(
        GetArenaNoVirtual());
  }
  return shape_.point3d_;
}
inline ::inhumate::rti::proto::Geometry_Point3D* Geometry::mutable_point3d() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.point3d)
  return _internal_mutable_point3d();
}

// .inhumate.rti.proto.Geometry.Line2D line = 5;
inline bool Geometry::_internal_has_line() const {
  return shape_case() == kLine;
}
inline bool Geometry::has_line() const {
  return _internal_has_line();
}
inline void Geometry::set_has_line() {
  _oneof_case_[0] = kLine;
}
inline void Geometry::clear_line() {
  if (_internal_has_line()) {
    delete shape_.line_;
    clear_has_shape();
  }
}
inline ::inhumate::rti::proto::Geometry_Line2D* Geometry::release_line() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.line)
  if (_internal_has_line()) {
    clear_has_shape();
      ::inhumate::rti::proto::Geometry_Line2D* temp = shape_.line_;
    shape_.line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Geometry_Line2D& Geometry::_internal_line() const {
  return _internal_has_line()
      ? *shape_.line_
      : *reinterpret_cast< ::inhumate::rti::proto::Geometry_Line2D*>(&::inhumate::rti::proto::_Geometry_Line2D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_Line2D& Geometry::line() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.line)
  return _internal_line();
}
inline ::inhumate::rti::proto::Geometry_Line2D* Geometry::_internal_mutable_line() {
  if (!_internal_has_line()) {
    clear_shape();
    set_has_line();
    shape_.line_ = CreateMaybeMessage< ::inhumate::rti::proto::Geometry_Line2D >(
        GetArenaNoVirtual());
  }
  return shape_.line_;
}
inline ::inhumate::rti::proto::Geometry_Line2D* Geometry::mutable_line() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.line)
  return _internal_mutable_line();
}

// .inhumate.rti.proto.Geometry.Line3D line3d = 6;
inline bool Geometry::_internal_has_line3d() const {
  return shape_case() == kLine3D;
}
inline bool Geometry::has_line3d() const {
  return _internal_has_line3d();
}
inline void Geometry::set_has_line3d() {
  _oneof_case_[0] = kLine3D;
}
inline void Geometry::clear_line3d() {
  if (_internal_has_line3d()) {
    delete shape_.line3d_;
    clear_has_shape();
  }
}
inline ::inhumate::rti::proto::Geometry_Line3D* Geometry::release_line3d() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.line3d)
  if (_internal_has_line3d()) {
    clear_has_shape();
      ::inhumate::rti::proto::Geometry_Line3D* temp = shape_.line3d_;
    shape_.line3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Geometry_Line3D& Geometry::_internal_line3d() const {
  return _internal_has_line3d()
      ? *shape_.line3d_
      : *reinterpret_cast< ::inhumate::rti::proto::Geometry_Line3D*>(&::inhumate::rti::proto::_Geometry_Line3D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_Line3D& Geometry::line3d() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.line3d)
  return _internal_line3d();
}
inline ::inhumate::rti::proto::Geometry_Line3D* Geometry::_internal_mutable_line3d() {
  if (!_internal_has_line3d()) {
    clear_shape();
    set_has_line3d();
    shape_.line3d_ = CreateMaybeMessage< ::inhumate::rti::proto::Geometry_Line3D >(
        GetArenaNoVirtual());
  }
  return shape_.line3d_;
}
inline ::inhumate::rti::proto::Geometry_Line3D* Geometry::mutable_line3d() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.line3d)
  return _internal_mutable_line3d();
}

// .inhumate.rti.proto.Geometry.Polygon polygon = 7;
inline bool Geometry::_internal_has_polygon() const {
  return shape_case() == kPolygon;
}
inline bool Geometry::has_polygon() const {
  return _internal_has_polygon();
}
inline void Geometry::set_has_polygon() {
  _oneof_case_[0] = kPolygon;
}
inline void Geometry::clear_polygon() {
  if (_internal_has_polygon()) {
    delete shape_.polygon_;
    clear_has_shape();
  }
}
inline ::inhumate::rti::proto::Geometry_Polygon* Geometry::release_polygon() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.polygon)
  if (_internal_has_polygon()) {
    clear_has_shape();
      ::inhumate::rti::proto::Geometry_Polygon* temp = shape_.polygon_;
    shape_.polygon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Geometry_Polygon& Geometry::_internal_polygon() const {
  return _internal_has_polygon()
      ? *shape_.polygon_
      : *reinterpret_cast< ::inhumate::rti::proto::Geometry_Polygon*>(&::inhumate::rti::proto::_Geometry_Polygon_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_Polygon& Geometry::polygon() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.polygon)
  return _internal_polygon();
}
inline ::inhumate::rti::proto::Geometry_Polygon* Geometry::_internal_mutable_polygon() {
  if (!_internal_has_polygon()) {
    clear_shape();
    set_has_polygon();
    shape_.polygon_ = CreateMaybeMessage< ::inhumate::rti::proto::Geometry_Polygon >(
        GetArenaNoVirtual());
  }
  return shape_.polygon_;
}
inline ::inhumate::rti::proto::Geometry_Polygon* Geometry::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.polygon)
  return _internal_mutable_polygon();
}

// .inhumate.rti.proto.Geometry.Mesh mesh = 8;
inline bool Geometry::_internal_has_mesh() const {
  return shape_case() == kMesh;
}
inline bool Geometry::has_mesh() const {
  return _internal_has_mesh();
}
inline void Geometry::set_has_mesh() {
  _oneof_case_[0] = kMesh;
}
inline void Geometry::clear_mesh() {
  if (_internal_has_mesh()) {
    delete shape_.mesh_;
    clear_has_shape();
  }
}
inline ::inhumate::rti::proto::Geometry_Mesh* Geometry::release_mesh() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.mesh)
  if (_internal_has_mesh()) {
    clear_has_shape();
      ::inhumate::rti::proto::Geometry_Mesh* temp = shape_.mesh_;
    shape_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Geometry_Mesh& Geometry::_internal_mesh() const {
  return _internal_has_mesh()
      ? *shape_.mesh_
      : *reinterpret_cast< ::inhumate::rti::proto::Geometry_Mesh*>(&::inhumate::rti::proto::_Geometry_Mesh_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_Mesh& Geometry::mesh() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.mesh)
  return _internal_mesh();
}
inline ::inhumate::rti::proto::Geometry_Mesh* Geometry::_internal_mutable_mesh() {
  if (!_internal_has_mesh()) {
    clear_shape();
    set_has_mesh();
    shape_.mesh_ = CreateMaybeMessage< ::inhumate::rti::proto::Geometry_Mesh >(
        GetArenaNoVirtual());
  }
  return shape_.mesh_;
}
inline ::inhumate::rti::proto::Geometry_Mesh* Geometry::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.mesh)
  return _internal_mutable_mesh();
}

// .inhumate.rti.proto.Geometry.Spline2D spline = 9;
inline bool Geometry::_internal_has_spline() const {
  return shape_case() == kSpline;
}
inline bool Geometry::has_spline() const {
  return _internal_has_spline();
}
inline void Geometry::set_has_spline() {
  _oneof_case_[0] = kSpline;
}
inline void Geometry::clear_spline() {
  if (_internal_has_spline()) {
    delete shape_.spline_;
    clear_has_shape();
  }
}
inline ::inhumate::rti::proto::Geometry_Spline2D* Geometry::release_spline() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.spline)
  if (_internal_has_spline()) {
    clear_has_shape();
      ::inhumate::rti::proto::Geometry_Spline2D* temp = shape_.spline_;
    shape_.spline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Geometry_Spline2D& Geometry::_internal_spline() const {
  return _internal_has_spline()
      ? *shape_.spline_
      : *reinterpret_cast< ::inhumate::rti::proto::Geometry_Spline2D*>(&::inhumate::rti::proto::_Geometry_Spline2D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_Spline2D& Geometry::spline() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.spline)
  return _internal_spline();
}
inline ::inhumate::rti::proto::Geometry_Spline2D* Geometry::_internal_mutable_spline() {
  if (!_internal_has_spline()) {
    clear_shape();
    set_has_spline();
    shape_.spline_ = CreateMaybeMessage< ::inhumate::rti::proto::Geometry_Spline2D >(
        GetArenaNoVirtual());
  }
  return shape_.spline_;
}
inline ::inhumate::rti::proto::Geometry_Spline2D* Geometry::mutable_spline() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.spline)
  return _internal_mutable_spline();
}

// .inhumate.rti.proto.Geometry.Spline3D spline3d = 10;
inline bool Geometry::_internal_has_spline3d() const {
  return shape_case() == kSpline3D;
}
inline bool Geometry::has_spline3d() const {
  return _internal_has_spline3d();
}
inline void Geometry::set_has_spline3d() {
  _oneof_case_[0] = kSpline3D;
}
inline void Geometry::clear_spline3d() {
  if (_internal_has_spline3d()) {
    delete shape_.spline3d_;
    clear_has_shape();
  }
}
inline ::inhumate::rti::proto::Geometry_Spline3D* Geometry::release_spline3d() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.spline3d)
  if (_internal_has_spline3d()) {
    clear_has_shape();
      ::inhumate::rti::proto::Geometry_Spline3D* temp = shape_.spline3d_;
    shape_.spline3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Geometry_Spline3D& Geometry::_internal_spline3d() const {
  return _internal_has_spline3d()
      ? *shape_.spline3d_
      : *reinterpret_cast< ::inhumate::rti::proto::Geometry_Spline3D*>(&::inhumate::rti::proto::_Geometry_Spline3D_default_instance_);
}
inline const ::inhumate::rti::proto::Geometry_Spline3D& Geometry::spline3d() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.spline3d)
  return _internal_spline3d();
}
inline ::inhumate::rti::proto::Geometry_Spline3D* Geometry::_internal_mutable_spline3d() {
  if (!_internal_has_spline3d()) {
    clear_shape();
    set_has_spline3d();
    shape_.spline3d_ = CreateMaybeMessage< ::inhumate::rti::proto::Geometry_Spline3D >(
        GetArenaNoVirtual());
  }
  return shape_.spline3d_;
}
inline ::inhumate::rti::proto::Geometry_Spline3D* Geometry::mutable_spline3d() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.spline3d)
  return _internal_mutable_spline3d();
}

// .inhumate.rti.proto.Color color = 20;
inline bool Geometry::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Geometry::has_color() const {
  return _internal_has_color();
}
inline const ::inhumate::rti::proto::Color& Geometry::_internal_color() const {
  const ::inhumate::rti::proto::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Color*>(
      &::inhumate::rti::proto::_Color_default_instance_);
}
inline const ::inhumate::rti::proto::Color& Geometry::color() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.color)
  return _internal_color();
}
inline ::inhumate::rti::proto::Color* Geometry::release_color() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.color)
  
  ::inhumate::rti::proto::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Color* Geometry::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  return color_;
}
inline ::inhumate::rti::proto::Color* Geometry::mutable_color() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.color)
  return _internal_mutable_color();
}
inline void Geometry::set_allocated_color(::inhumate::rti::proto::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.color)
}

// float transparency = 21;
inline void Geometry::clear_transparency() {
  transparency_ = 0;
}
inline float Geometry::_internal_transparency() const {
  return transparency_;
}
inline float Geometry::transparency() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.transparency)
  return _internal_transparency();
}
inline void Geometry::_internal_set_transparency(float value) {
  
  transparency_ = value;
}
inline void Geometry::set_transparency(float value) {
  _internal_set_transparency(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.transparency)
}

// string title = 22;
inline void Geometry::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Geometry::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.title)
  return _internal_title();
}
inline void Geometry::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.title)
}
inline std::string* Geometry::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.title)
  return _internal_mutable_title();
}
inline const std::string& Geometry::_internal_title() const {
  return title_.GetNoArena();
}
inline void Geometry::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Geometry::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Geometry.title)
}
inline void Geometry::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Geometry.title)
}
inline void Geometry::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Geometry.title)
}
inline std::string* Geometry::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Geometry::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Geometry::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.title)
}

// .inhumate.rti.proto.Color label_color = 23;
inline bool Geometry::_internal_has_label_color() const {
  return this != internal_default_instance() && label_color_ != nullptr;
}
inline bool Geometry::has_label_color() const {
  return _internal_has_label_color();
}
inline const ::inhumate::rti::proto::Color& Geometry::_internal_label_color() const {
  const ::inhumate::rti::proto::Color* p = label_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Color*>(
      &::inhumate::rti::proto::_Color_default_instance_);
}
inline const ::inhumate::rti::proto::Color& Geometry::label_color() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.label_color)
  return _internal_label_color();
}
inline ::inhumate::rti::proto::Color* Geometry::release_label_color() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.label_color)
  
  ::inhumate::rti::proto::Color* temp = label_color_;
  label_color_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Color* Geometry::_internal_mutable_label_color() {
  
  if (label_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Color>(GetArenaNoVirtual());
    label_color_ = p;
  }
  return label_color_;
}
inline ::inhumate::rti::proto::Color* Geometry::mutable_label_color() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.label_color)
  return _internal_mutable_label_color();
}
inline void Geometry::set_allocated_label_color(::inhumate::rti::proto::Color* label_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_color_);
  }
  if (label_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      label_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_color, submessage_arena);
    }
    
  } else {
    
  }
  label_color_ = label_color;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.label_color)
}

// float label_transparency = 24;
inline void Geometry::clear_label_transparency() {
  label_transparency_ = 0;
}
inline float Geometry::_internal_label_transparency() const {
  return label_transparency_;
}
inline float Geometry::label_transparency() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.label_transparency)
  return _internal_label_transparency();
}
inline void Geometry::_internal_set_label_transparency(float value) {
  
  label_transparency_ = value;
}
inline void Geometry::set_label_transparency(float value) {
  _internal_set_label_transparency(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.label_transparency)
}

// bool scalable = 25;
inline void Geometry::clear_scalable() {
  scalable_ = false;
}
inline bool Geometry::_internal_scalable() const {
  return scalable_;
}
inline bool Geometry::scalable() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.scalable)
  return _internal_scalable();
}
inline void Geometry::_internal_set_scalable(bool value) {
  
  scalable_ = value;
}
inline void Geometry::set_scalable(bool value) {
  _internal_set_scalable(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.scalable)
}

// bool wireframe = 26;
inline void Geometry::clear_wireframe() {
  wireframe_ = false;
}
inline bool Geometry::_internal_wireframe() const {
  return wireframe_;
}
inline bool Geometry::wireframe() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.wireframe)
  return _internal_wireframe();
}
inline void Geometry::_internal_set_wireframe(bool value) {
  
  wireframe_ = value;
}
inline void Geometry::set_wireframe(bool value) {
  _internal_set_wireframe(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.wireframe)
}

// float line_width = 27;
inline void Geometry::clear_line_width() {
  line_width_ = 0;
}
inline float Geometry::_internal_line_width() const {
  return line_width_;
}
inline float Geometry::line_width() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.line_width)
  return _internal_line_width();
}
inline void Geometry::_internal_set_line_width(float value) {
  
  line_width_ = value;
}
inline void Geometry::set_line_width(float value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.line_width)
}

// .inhumate.rti.proto.Geometry.Usage usage = 30;
inline void Geometry::clear_usage() {
  usage_ = 0;
}
inline ::inhumate::rti::proto::Geometry_Usage Geometry::_internal_usage() const {
  return static_cast< ::inhumate::rti::proto::Geometry_Usage >(usage_);
}
inline ::inhumate::rti::proto::Geometry_Usage Geometry::usage() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.usage)
  return _internal_usage();
}
inline void Geometry::_internal_set_usage(::inhumate::rti::proto::Geometry_Usage value) {
  
  usage_ = value;
}
inline void Geometry::set_usage(::inhumate::rti::proto::Geometry_Usage value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.usage)
}

// string type = 31;
inline void Geometry::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Geometry::type() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.type)
  return _internal_type();
}
inline void Geometry::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.type)
}
inline std::string* Geometry::mutable_type() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Geometry.type)
  return _internal_mutable_type();
}
inline const std::string& Geometry::_internal_type() const {
  return type_.GetNoArena();
}
inline void Geometry::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Geometry::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Geometry.type)
}
inline void Geometry::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Geometry.type)
}
inline void Geometry::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Geometry.type)
}
inline std::string* Geometry::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Geometry::release_type() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Geometry.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Geometry::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Geometry.type)
}

// .inhumate.rti.proto.Geometry.Category category = 32;
inline void Geometry::clear_category() {
  category_ = 0;
}
inline ::inhumate::rti::proto::Geometry_Category Geometry::_internal_category() const {
  return static_cast< ::inhumate::rti::proto::Geometry_Category >(category_);
}
inline ::inhumate::rti::proto::Geometry_Category Geometry::category() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.category)
  return _internal_category();
}
inline void Geometry::_internal_set_category(::inhumate::rti::proto::Geometry_Category value) {
  
  category_ = value;
}
inline void Geometry::set_category(::inhumate::rti::proto::Geometry_Category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.category)
}

// bool disabled = 34;
inline void Geometry::clear_disabled() {
  disabled_ = false;
}
inline bool Geometry::_internal_disabled() const {
  return disabled_;
}
inline bool Geometry::disabled() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.disabled)
  return _internal_disabled();
}
inline void Geometry::_internal_set_disabled(bool value) {
  
  disabled_ = value;
}
inline void Geometry::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.disabled)
}

// bool deleted = 35;
inline void Geometry::clear_deleted() {
  deleted_ = false;
}
inline bool Geometry::_internal_deleted() const {
  return deleted_;
}
inline bool Geometry::deleted() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Geometry.deleted)
  return _internal_deleted();
}
inline void Geometry::_internal_set_deleted(bool value) {
  
  deleted_ = value;
}
inline void Geometry::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Geometry.deleted)
}

inline bool Geometry::has_shape() const {
  return shape_case() != SHAPE_NOT_SET;
}
inline void Geometry::clear_has_shape() {
  _oneof_case_[0] = SHAPE_NOT_SET;
}
inline Geometry::ShapeCase Geometry::shape_case() const {
  return Geometry::ShapeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::inhumate::rti::proto::Geometry_Usage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inhumate::rti::proto::Geometry_Usage>() {
  return ::inhumate::rti::proto::Geometry_Usage_descriptor();
}
template <> struct is_proto_enum< ::inhumate::rti::proto::Geometry_Category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inhumate::rti::proto::Geometry_Category>() {
  return ::inhumate::rti::proto::Geometry_Category_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Geometry_2eproto
