// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Commands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Commands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "Parameter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Commands_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Commands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Commands_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Command;
class CommandDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern CommandDefaultTypeInternal _Command_default_instance_;
class CommandResponse;
class CommandResponseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
class CommandResponse_ReturnValuesEntry_DoNotUse;
class CommandResponse_ReturnValuesEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern CommandResponse_ReturnValuesEntry_DoNotUseDefaultTypeInternal _CommandResponse_ReturnValuesEntry_DoNotUse_default_instance_;
class Commands;
class CommandsDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern CommandsDefaultTypeInternal _Commands_default_instance_;
class ExecuteCommand;
class ExecuteCommandDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ExecuteCommandDefaultTypeInternal _ExecuteCommand_default_instance_;
class ExecuteCommand_ArgumentsEntry_DoNotUse;
class ExecuteCommand_ArgumentsEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ExecuteCommand_ArgumentsEntry_DoNotUseDefaultTypeInternal _ExecuteCommand_ArgumentsEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Command* Arena::CreateMaybeMessage<::inhumate::rti::proto::Command>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::CommandResponse* Arena::CreateMaybeMessage<::inhumate::rti::proto::CommandResponse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::CommandResponse_ReturnValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::CommandResponse_ReturnValuesEntry_DoNotUse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Commands* Arena::CreateMaybeMessage<::inhumate::rti::proto::Commands>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ExecuteCommand* Arena::CreateMaybeMessage<::inhumate::rti::proto::ExecuteCommand>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ExecuteCommand_ArgumentsEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::ExecuteCommand_ArgumentsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Commands :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Commands) */ {
 public:
  Commands();
  virtual ~Commands();

  Commands(const Commands& from);
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commands& operator=(Commands&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Commands& default_instance();

  enum WhichCase {
    kRequestCommands = 1,
    kCommand = 2,
    kExecute = 3,
    kResponse = 4,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(Commands* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return CreateMaybeMessage<Commands>(nullptr);
  }

  Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Commands";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Commands_2eproto);
    return ::descriptor_table_Commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestCommandsFieldNumber = 1,
    kCommandFieldNumber = 2,
    kExecuteFieldNumber = 3,
    kResponseFieldNumber = 4,
  };
  // .google.protobuf.Empty request_commands = 1;
  bool has_request_commands() const;
  private:
  bool _internal_has_request_commands() const;
  public:
  void clear_request_commands();
  const PROTOBUF_NAMESPACE_ID::Empty& request_commands() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_commands();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_commands();
  void set_allocated_request_commands(PROTOBUF_NAMESPACE_ID::Empty* request_commands);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_commands() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_commands();
  public:

  // .inhumate.rti.proto.Command command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::inhumate::rti::proto::Command& command() const;
  ::inhumate::rti::proto::Command* release_command();
  ::inhumate::rti::proto::Command* mutable_command();
  void set_allocated_command(::inhumate::rti::proto::Command* command);
  private:
  const ::inhumate::rti::proto::Command& _internal_command() const;
  ::inhumate::rti::proto::Command* _internal_mutable_command();
  public:

  // .inhumate.rti.proto.ExecuteCommand execute = 3;
  bool has_execute() const;
  private:
  bool _internal_has_execute() const;
  public:
  void clear_execute();
  const ::inhumate::rti::proto::ExecuteCommand& execute() const;
  ::inhumate::rti::proto::ExecuteCommand* release_execute();
  ::inhumate::rti::proto::ExecuteCommand* mutable_execute();
  void set_allocated_execute(::inhumate::rti::proto::ExecuteCommand* execute);
  private:
  const ::inhumate::rti::proto::ExecuteCommand& _internal_execute() const;
  ::inhumate::rti::proto::ExecuteCommand* _internal_mutable_execute();
  public:

  // .inhumate.rti.proto.CommandResponse response = 4;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::inhumate::rti::proto::CommandResponse& response() const;
  ::inhumate::rti::proto::CommandResponse* release_response();
  ::inhumate::rti::proto::CommandResponse* mutable_response();
  void set_allocated_response(::inhumate::rti::proto::CommandResponse* response);
  private:
  const ::inhumate::rti::proto::CommandResponse& _internal_response() const;
  ::inhumate::rti::proto::CommandResponse* _internal_mutable_response();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Commands)
 private:
  class _Internal;
  void set_has_request_commands();
  void set_has_command();
  void set_has_execute();
  void set_has_response();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_commands_;
    ::inhumate::rti::proto::Command* command_;
    ::inhumate::rti::proto::ExecuteCommand* execute_;
    ::inhumate::rti::proto::CommandResponse* response_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Commands_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Commands_2eproto);
    return ::descriptor_table_Commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 3,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated .inhumate.rti.proto.Parameter arguments = 3;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::inhumate::rti::proto::Parameter* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >*
      mutable_arguments();
  private:
  const ::inhumate::rti::proto::Parameter& _internal_arguments(int index) const;
  ::inhumate::rti::proto::Parameter* _internal_add_arguments();
  public:
  const ::inhumate::rti::proto::Parameter& arguments(int index) const;
  ::inhumate::rti::proto::Parameter* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >&
      arguments() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Command)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter > arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Commands_2eproto;
};
// -------------------------------------------------------------------

class ExecuteCommand_ArgumentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExecuteCommand_ArgumentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExecuteCommand_ArgumentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ExecuteCommand_ArgumentsEntry_DoNotUse();
  ExecuteCommand_ArgumentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ExecuteCommand_ArgumentsEntry_DoNotUse& other);
  static const ExecuteCommand_ArgumentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExecuteCommand_ArgumentsEntry_DoNotUse*>(&_ExecuteCommand_ArgumentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.ExecuteCommand.ArgumentsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.ExecuteCommand.ArgumentsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Commands_2eproto);
    return ::descriptor_table_Commands_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT ExecuteCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.ExecuteCommand) */ {
 public:
  ExecuteCommand();
  virtual ~ExecuteCommand();

  ExecuteCommand(const ExecuteCommand& from);
  ExecuteCommand(ExecuteCommand&& from) noexcept
    : ExecuteCommand() {
    *this = ::std::move(from);
  }

  inline ExecuteCommand& operator=(const ExecuteCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteCommand& operator=(ExecuteCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteCommand* internal_default_instance() {
    return reinterpret_cast<const ExecuteCommand*>(
               &_ExecuteCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecuteCommand& a, ExecuteCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteCommand* New() const final {
    return CreateMaybeMessage<ExecuteCommand>(nullptr);
  }

  ExecuteCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteCommand& from);
  void MergeFrom(const ExecuteCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.ExecuteCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Commands_2eproto);
    return ::descriptor_table_Commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 3,
    kTransactionIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // map<string, string> arguments = 3;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_arguments();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      arguments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_arguments();

  // string transaction_id = 1;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.ExecuteCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ExecuteCommand_ArgumentsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Commands_2eproto;
};
// -------------------------------------------------------------------

class CommandResponse_ReturnValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommandResponse_ReturnValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommandResponse_ReturnValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CommandResponse_ReturnValuesEntry_DoNotUse();
  CommandResponse_ReturnValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommandResponse_ReturnValuesEntry_DoNotUse& other);
  static const CommandResponse_ReturnValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommandResponse_ReturnValuesEntry_DoNotUse*>(&_CommandResponse_ReturnValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.CommandResponse.ReturnValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.CommandResponse.ReturnValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Commands_2eproto);
    return ::descriptor_table_Commands_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT CommandResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.CommandResponse) */ {
 public:
  CommandResponse();
  virtual ~CommandResponse();

  CommandResponse(const CommandResponse& from);
  CommandResponse(CommandResponse&& from) noexcept
    : CommandResponse() {
    *this = ::std::move(from);
  }

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
               &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandResponse& a, CommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResponse* New() const final {
    return CreateMaybeMessage<CommandResponse>(nullptr);
  }

  CommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandResponse& from);
  void MergeFrom(const CommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.CommandResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Commands_2eproto);
    return ::descriptor_table_Commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kReturnValuesFieldNumber = 4,
    kTransactionIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kFailedFieldNumber = 2,
  };
  // map<string, string> return_values = 4;
  int return_values_size() const;
  private:
  int _internal_return_values_size() const;
  public:
  void clear_return_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_return_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_return_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      return_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_return_values();

  // string transaction_id = 1;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool failed = 2;
  void clear_failed();
  bool failed() const;
  void set_failed(bool value);
  private:
  bool _internal_failed() const;
  void _internal_set_failed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.CommandResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CommandResponse_ReturnValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > return_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool failed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Commands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Commands

// .google.protobuf.Empty request_commands = 1;
inline bool Commands::_internal_has_request_commands() const {
  return which_case() == kRequestCommands;
}
inline bool Commands::has_request_commands() const {
  return _internal_has_request_commands();
}
inline void Commands::set_has_request_commands() {
  _oneof_case_[0] = kRequestCommands;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Commands::release_request_commands() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Commands.request_commands)
  if (_internal_has_request_commands()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_commands_;
    which_.request_commands_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Commands::_internal_request_commands() const {
  return _internal_has_request_commands()
      ? *which_.request_commands_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Commands::request_commands() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Commands.request_commands)
  return _internal_request_commands();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Commands::_internal_mutable_request_commands() {
  if (!_internal_has_request_commands()) {
    clear_which();
    set_has_request_commands();
    which_.request_commands_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_commands_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Commands::mutable_request_commands() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Commands.request_commands)
  return _internal_mutable_request_commands();
}

// .inhumate.rti.proto.Command command = 2;
inline bool Commands::_internal_has_command() const {
  return which_case() == kCommand;
}
inline bool Commands::has_command() const {
  return _internal_has_command();
}
inline void Commands::set_has_command() {
  _oneof_case_[0] = kCommand;
}
inline void Commands::clear_command() {
  if (_internal_has_command()) {
    delete which_.command_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Command* Commands::release_command() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Commands.command)
  if (_internal_has_command()) {
    clear_has_which();
      ::inhumate::rti::proto::Command* temp = which_.command_;
    which_.command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Command& Commands::_internal_command() const {
  return _internal_has_command()
      ? *which_.command_
      : *reinterpret_cast< ::inhumate::rti::proto::Command*>(&::inhumate::rti::proto::_Command_default_instance_);
}
inline const ::inhumate::rti::proto::Command& Commands::command() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Commands.command)
  return _internal_command();
}
inline ::inhumate::rti::proto::Command* Commands::_internal_mutable_command() {
  if (!_internal_has_command()) {
    clear_which();
    set_has_command();
    which_.command_ = CreateMaybeMessage< ::inhumate::rti::proto::Command >(
        GetArenaNoVirtual());
  }
  return which_.command_;
}
inline ::inhumate::rti::proto::Command* Commands::mutable_command() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Commands.command)
  return _internal_mutable_command();
}

// .inhumate.rti.proto.ExecuteCommand execute = 3;
inline bool Commands::_internal_has_execute() const {
  return which_case() == kExecute;
}
inline bool Commands::has_execute() const {
  return _internal_has_execute();
}
inline void Commands::set_has_execute() {
  _oneof_case_[0] = kExecute;
}
inline void Commands::clear_execute() {
  if (_internal_has_execute()) {
    delete which_.execute_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::ExecuteCommand* Commands::release_execute() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Commands.execute)
  if (_internal_has_execute()) {
    clear_has_which();
      ::inhumate::rti::proto::ExecuteCommand* temp = which_.execute_;
    which_.execute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::ExecuteCommand& Commands::_internal_execute() const {
  return _internal_has_execute()
      ? *which_.execute_
      : *reinterpret_cast< ::inhumate::rti::proto::ExecuteCommand*>(&::inhumate::rti::proto::_ExecuteCommand_default_instance_);
}
inline const ::inhumate::rti::proto::ExecuteCommand& Commands::execute() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Commands.execute)
  return _internal_execute();
}
inline ::inhumate::rti::proto::ExecuteCommand* Commands::_internal_mutable_execute() {
  if (!_internal_has_execute()) {
    clear_which();
    set_has_execute();
    which_.execute_ = CreateMaybeMessage< ::inhumate::rti::proto::ExecuteCommand >(
        GetArenaNoVirtual());
  }
  return which_.execute_;
}
inline ::inhumate::rti::proto::ExecuteCommand* Commands::mutable_execute() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Commands.execute)
  return _internal_mutable_execute();
}

// .inhumate.rti.proto.CommandResponse response = 4;
inline bool Commands::_internal_has_response() const {
  return which_case() == kResponse;
}
inline bool Commands::has_response() const {
  return _internal_has_response();
}
inline void Commands::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void Commands::clear_response() {
  if (_internal_has_response()) {
    delete which_.response_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::CommandResponse* Commands::release_response() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Commands.response)
  if (_internal_has_response()) {
    clear_has_which();
      ::inhumate::rti::proto::CommandResponse* temp = which_.response_;
    which_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::CommandResponse& Commands::_internal_response() const {
  return _internal_has_response()
      ? *which_.response_
      : *reinterpret_cast< ::inhumate::rti::proto::CommandResponse*>(&::inhumate::rti::proto::_CommandResponse_default_instance_);
}
inline const ::inhumate::rti::proto::CommandResponse& Commands::response() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Commands.response)
  return _internal_response();
}
inline ::inhumate::rti::proto::CommandResponse* Commands::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_which();
    set_has_response();
    which_.response_ = CreateMaybeMessage< ::inhumate::rti::proto::CommandResponse >(
        GetArenaNoVirtual());
  }
  return which_.response_;
}
inline ::inhumate::rti::proto::CommandResponse* Commands::mutable_response() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Commands.response)
  return _internal_mutable_response();
}

inline bool Commands::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void Commands::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline Commands::WhichCase Commands::which_case() const {
  return Commands::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Command

// string name = 1;
inline void Command::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Command.name)
  return _internal_name();
}
inline void Command::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Command.name)
}
inline std::string* Command::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Command.name)
  return _internal_mutable_name();
}
inline const std::string& Command::_internal_name() const {
  return name_.GetNoArena();
}
inline void Command::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Command.name)
}
inline void Command::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Command.name)
}
inline void Command::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Command.name)
}
inline std::string* Command::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Command.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Command.name)
}

// string description = 2;
inline void Command::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::description() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Command.description)
  return _internal_description();
}
inline void Command::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Command.description)
}
inline std::string* Command::mutable_description() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Command.description)
  return _internal_mutable_description();
}
inline const std::string& Command::_internal_description() const {
  return description_.GetNoArena();
}
inline void Command::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Command.description)
}
inline void Command::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Command.description)
}
inline void Command::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Command.description)
}
inline std::string* Command::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_description() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Command.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Command.description)
}

// repeated .inhumate.rti.proto.Parameter arguments = 3;
inline int Command::_internal_arguments_size() const {
  return arguments_.size();
}
inline int Command::arguments_size() const {
  return _internal_arguments_size();
}
inline ::inhumate::rti::proto::Parameter* Command::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Command.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >*
Command::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Command.arguments)
  return &arguments_;
}
inline const ::inhumate::rti::proto::Parameter& Command::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::inhumate::rti::proto::Parameter& Command::arguments(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Command.arguments)
  return _internal_arguments(index);
}
inline ::inhumate::rti::proto::Parameter* Command::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::inhumate::rti::proto::Parameter* Command::add_arguments() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Command.arguments)
  return _internal_add_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >&
Command::arguments() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Command.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExecuteCommand

// string transaction_id = 1;
inline void ExecuteCommand::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExecuteCommand::transaction_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ExecuteCommand.transaction_id)
  return _internal_transaction_id();
}
inline void ExecuteCommand::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ExecuteCommand.transaction_id)
}
inline std::string* ExecuteCommand::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ExecuteCommand.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& ExecuteCommand::_internal_transaction_id() const {
  return transaction_id_.GetNoArena();
}
inline void ExecuteCommand::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExecuteCommand::set_transaction_id(std::string&& value) {
  
  transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ExecuteCommand.transaction_id)
}
inline void ExecuteCommand::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ExecuteCommand.transaction_id)
}
inline void ExecuteCommand::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ExecuteCommand.transaction_id)
}
inline std::string* ExecuteCommand::_internal_mutable_transaction_id() {
  
  return transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExecuteCommand::release_transaction_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ExecuteCommand.transaction_id)
  
  return transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteCommand::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ExecuteCommand.transaction_id)
}

// string name = 2;
inline void ExecuteCommand::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExecuteCommand::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ExecuteCommand.name)
  return _internal_name();
}
inline void ExecuteCommand::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ExecuteCommand.name)
}
inline std::string* ExecuteCommand::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ExecuteCommand.name)
  return _internal_mutable_name();
}
inline const std::string& ExecuteCommand::_internal_name() const {
  return name_.GetNoArena();
}
inline void ExecuteCommand::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExecuteCommand::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ExecuteCommand.name)
}
inline void ExecuteCommand::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ExecuteCommand.name)
}
inline void ExecuteCommand::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ExecuteCommand.name)
}
inline std::string* ExecuteCommand::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExecuteCommand::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ExecuteCommand.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteCommand::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ExecuteCommand.name)
}

// map<string, string> arguments = 3;
inline int ExecuteCommand::_internal_arguments_size() const {
  return arguments_.size();
}
inline int ExecuteCommand::arguments_size() const {
  return _internal_arguments_size();
}
inline void ExecuteCommand::clear_arguments() {
  arguments_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ExecuteCommand::_internal_arguments() const {
  return arguments_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ExecuteCommand::arguments() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.ExecuteCommand.arguments)
  return _internal_arguments();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ExecuteCommand::_internal_mutable_arguments() {
  return arguments_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ExecuteCommand::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.ExecuteCommand.arguments)
  return _internal_mutable_arguments();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CommandResponse

// string transaction_id = 1;
inline void CommandResponse::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.CommandResponse.transaction_id)
  return _internal_transaction_id();
}
inline void CommandResponse::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.CommandResponse.transaction_id)
}
inline std::string* CommandResponse::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.CommandResponse.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& CommandResponse::_internal_transaction_id() const {
  return transaction_id_.GetNoArena();
}
inline void CommandResponse::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandResponse::set_transaction_id(std::string&& value) {
  
  transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.CommandResponse.transaction_id)
}
inline void CommandResponse::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.CommandResponse.transaction_id)
}
inline void CommandResponse::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.CommandResponse.transaction_id)
}
inline std::string* CommandResponse::_internal_mutable_transaction_id() {
  
  return transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandResponse::release_transaction_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.CommandResponse.transaction_id)
  
  return transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandResponse::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.CommandResponse.transaction_id)
}

// bool failed = 2;
inline void CommandResponse::clear_failed() {
  failed_ = false;
}
inline bool CommandResponse::_internal_failed() const {
  return failed_;
}
inline bool CommandResponse::failed() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.CommandResponse.failed)
  return _internal_failed();
}
inline void CommandResponse::_internal_set_failed(bool value) {
  
  failed_ = value;
}
inline void CommandResponse::set_failed(bool value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.CommandResponse.failed)
}

// string message = 3;
inline void CommandResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommandResponse::message() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.CommandResponse.message)
  return _internal_message();
}
inline void CommandResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.CommandResponse.message)
}
inline std::string* CommandResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.CommandResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CommandResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void CommandResponse::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.CommandResponse.message)
}
inline void CommandResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.CommandResponse.message)
}
inline void CommandResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.CommandResponse.message)
}
inline std::string* CommandResponse::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandResponse::release_message() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.CommandResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommandResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.CommandResponse.message)
}

// map<string, string> return_values = 4;
inline int CommandResponse::_internal_return_values_size() const {
  return return_values_.size();
}
inline int CommandResponse::return_values_size() const {
  return _internal_return_values_size();
}
inline void CommandResponse::clear_return_values() {
  return_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommandResponse::_internal_return_values() const {
  return return_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommandResponse::return_values() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.CommandResponse.return_values)
  return _internal_return_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommandResponse::_internal_mutable_return_values() {
  return return_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommandResponse::mutable_return_values() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.CommandResponse.return_values)
  return _internal_mutable_return_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Commands_2eproto
