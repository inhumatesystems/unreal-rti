// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MeasurementBundle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MeasurementBundle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MeasurementBundle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Measures.pb.h"
#include "Measurement.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MeasurementBundle_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_MeasurementBundle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MeasurementBundle_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class MeasurementBundle;
class MeasurementBundleDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MeasurementBundleDefaultTypeInternal _MeasurementBundle_default_instance_;
class MeasurementBundle_HistoricMeasurement;
class MeasurementBundle_HistoricMeasurementDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MeasurementBundle_HistoricMeasurementDefaultTypeInternal _MeasurementBundle_HistoricMeasurement_default_instance_;
class MeasurementBundle_MeasureResponse;
class MeasurementBundle_MeasureResponseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MeasurementBundle_MeasureResponseDefaultTypeInternal _MeasurementBundle_MeasureResponse_default_instance_;
class MeasurementBundle_Request;
class MeasurementBundle_RequestDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MeasurementBundle_RequestDefaultTypeInternal _MeasurementBundle_Request_default_instance_;
class MeasurementBundle_Response;
class MeasurementBundle_ResponseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MeasurementBundle_ResponseDefaultTypeInternal _MeasurementBundle_Response_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MeasurementBundle* Arena::CreateMaybeMessage<::inhumate::rti::proto::MeasurementBundle>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement* Arena::CreateMaybeMessage<::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MeasurementBundle_MeasureResponse* Arena::CreateMaybeMessage<::inhumate::rti::proto::MeasurementBundle_MeasureResponse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MeasurementBundle_Request* Arena::CreateMaybeMessage<::inhumate::rti::proto::MeasurementBundle_Request>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::MeasurementBundle_Response* Arena::CreateMaybeMessage<::inhumate::rti::proto::MeasurementBundle_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT MeasurementBundle_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MeasurementBundle.Request) */ {
 public:
  MeasurementBundle_Request();
  virtual ~MeasurementBundle_Request();

  MeasurementBundle_Request(const MeasurementBundle_Request& from);
  MeasurementBundle_Request(MeasurementBundle_Request&& from) noexcept
    : MeasurementBundle_Request() {
    *this = ::std::move(from);
  }

  inline MeasurementBundle_Request& operator=(const MeasurementBundle_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementBundle_Request& operator=(MeasurementBundle_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeasurementBundle_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasurementBundle_Request* internal_default_instance() {
    return reinterpret_cast<const MeasurementBundle_Request*>(
               &_MeasurementBundle_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MeasurementBundle_Request& a, MeasurementBundle_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementBundle_Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasurementBundle_Request* New() const final {
    return CreateMaybeMessage<MeasurementBundle_Request>(nullptr);
  }

  MeasurementBundle_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasurementBundle_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeasurementBundle_Request& from);
  void MergeFrom(const MeasurementBundle_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementBundle_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MeasurementBundle.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MeasurementBundle_2eproto);
    return ::descriptor_table_MeasurementBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasuresFieldNumber = 2,
    kClientsFieldNumber = 3,
    kApplicationsFieldNumber = 4,
    kResponseChannelFieldNumber = 1,
    kFromTimeFieldNumber = 8,
    kToTimeFieldNumber = 9,
    kResolutionFieldNumber = 10,
    kLimitFieldNumber = 11,
    kOffsetFieldNumber = 12,
    kReverseFieldNumber = 13,
    kPerMeasureFieldNumber = 14,
  };
  // repeated string measures = 2;
  int measures_size() const;
  private:
  int _internal_measures_size() const;
  public:
  void clear_measures();
  const std::string& measures(int index) const;
  std::string* mutable_measures(int index);
  void set_measures(int index, const std::string& value);
  void set_measures(int index, std::string&& value);
  void set_measures(int index, const char* value);
  void set_measures(int index, const char* value, size_t size);
  std::string* add_measures();
  void add_measures(const std::string& value);
  void add_measures(std::string&& value);
  void add_measures(const char* value);
  void add_measures(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& measures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_measures();
  private:
  const std::string& _internal_measures(int index) const;
  std::string* _internal_add_measures();
  public:

  // repeated string clients = 3;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  const std::string& clients(int index) const;
  std::string* mutable_clients(int index);
  void set_clients(int index, const std::string& value);
  void set_clients(int index, std::string&& value);
  void set_clients(int index, const char* value);
  void set_clients(int index, const char* value, size_t size);
  std::string* add_clients();
  void add_clients(const std::string& value);
  void add_clients(std::string&& value);
  void add_clients(const char* value);
  void add_clients(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& clients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_clients();
  private:
  const std::string& _internal_clients(int index) const;
  std::string* _internal_add_clients();
  public:

  // repeated string applications = 4;
  int applications_size() const;
  private:
  int _internal_applications_size() const;
  public:
  void clear_applications();
  const std::string& applications(int index) const;
  std::string* mutable_applications(int index);
  void set_applications(int index, const std::string& value);
  void set_applications(int index, std::string&& value);
  void set_applications(int index, const char* value);
  void set_applications(int index, const char* value, size_t size);
  std::string* add_applications();
  void add_applications(const std::string& value);
  void add_applications(std::string&& value);
  void add_applications(const char* value);
  void add_applications(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& applications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_applications();
  private:
  const std::string& _internal_applications(int index) const;
  std::string* _internal_add_applications();
  public:

  // string response_channel = 1;
  void clear_response_channel();
  const std::string& response_channel() const;
  void set_response_channel(const std::string& value);
  void set_response_channel(std::string&& value);
  void set_response_channel(const char* value);
  void set_response_channel(const char* value, size_t size);
  std::string* mutable_response_channel();
  std::string* release_response_channel();
  void set_allocated_response_channel(std::string* response_channel);
  private:
  const std::string& _internal_response_channel() const;
  void _internal_set_response_channel(const std::string& value);
  std::string* _internal_mutable_response_channel();
  public:

  // double from_time = 8;
  void clear_from_time();
  double from_time() const;
  void set_from_time(double value);
  private:
  double _internal_from_time() const;
  void _internal_set_from_time(double value);
  public:

  // double to_time = 9;
  void clear_to_time();
  double to_time() const;
  void set_to_time(double value);
  private:
  double _internal_to_time() const;
  void _internal_set_to_time(double value);
  public:

  // double resolution = 10;
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // int32 limit = 11;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset = 12;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool reverse = 13;
  void clear_reverse();
  bool reverse() const;
  void set_reverse(bool value);
  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);
  public:

  // bool per_measure = 14;
  void clear_per_measure();
  bool per_measure() const;
  void set_per_measure(bool value);
  private:
  bool _internal_per_measure() const;
  void _internal_set_per_measure(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MeasurementBundle.Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> measures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> clients_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> applications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_channel_;
  double from_time_;
  double to_time_;
  double resolution_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  bool reverse_;
  bool per_measure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MeasurementBundle_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT MeasurementBundle_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MeasurementBundle.Response) */ {
 public:
  MeasurementBundle_Response();
  virtual ~MeasurementBundle_Response();

  MeasurementBundle_Response(const MeasurementBundle_Response& from);
  MeasurementBundle_Response(MeasurementBundle_Response&& from) noexcept
    : MeasurementBundle_Response() {
    *this = ::std::move(from);
  }

  inline MeasurementBundle_Response& operator=(const MeasurementBundle_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementBundle_Response& operator=(MeasurementBundle_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeasurementBundle_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasurementBundle_Response* internal_default_instance() {
    return reinterpret_cast<const MeasurementBundle_Response*>(
               &_MeasurementBundle_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MeasurementBundle_Response& a, MeasurementBundle_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementBundle_Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasurementBundle_Response* New() const final {
    return CreateMaybeMessage<MeasurementBundle_Response>(nullptr);
  }

  MeasurementBundle_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasurementBundle_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeasurementBundle_Response& from);
  void MergeFrom(const MeasurementBundle_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementBundle_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MeasurementBundle.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MeasurementBundle_2eproto);
    return ::descriptor_table_MeasurementBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasuresFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .inhumate.rti.proto.MeasurementBundle.MeasureResponse measures = 1;
  int measures_size() const;
  private:
  int _internal_measures_size() const;
  public:
  void clear_measures();
  ::inhumate::rti::proto::MeasurementBundle_MeasureResponse* mutable_measures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_MeasureResponse >*
      mutable_measures();
  private:
  const ::inhumate::rti::proto::MeasurementBundle_MeasureResponse& _internal_measures(int index) const;
  ::inhumate::rti::proto::MeasurementBundle_MeasureResponse* _internal_add_measures();
  public:
  const ::inhumate::rti::proto::MeasurementBundle_MeasureResponse& measures(int index) const;
  ::inhumate::rti::proto::MeasurementBundle_MeasureResponse* add_measures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_MeasureResponse >&
      measures() const;

  // int64 total_count = 2;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int64 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MeasurementBundle.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_MeasureResponse > measures_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MeasurementBundle_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT MeasurementBundle_MeasureResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MeasurementBundle.MeasureResponse) */ {
 public:
  MeasurementBundle_MeasureResponse();
  virtual ~MeasurementBundle_MeasureResponse();

  MeasurementBundle_MeasureResponse(const MeasurementBundle_MeasureResponse& from);
  MeasurementBundle_MeasureResponse(MeasurementBundle_MeasureResponse&& from) noexcept
    : MeasurementBundle_MeasureResponse() {
    *this = ::std::move(from);
  }

  inline MeasurementBundle_MeasureResponse& operator=(const MeasurementBundle_MeasureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementBundle_MeasureResponse& operator=(MeasurementBundle_MeasureResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeasurementBundle_MeasureResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasurementBundle_MeasureResponse* internal_default_instance() {
    return reinterpret_cast<const MeasurementBundle_MeasureResponse*>(
               &_MeasurementBundle_MeasureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MeasurementBundle_MeasureResponse& a, MeasurementBundle_MeasureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementBundle_MeasureResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasurementBundle_MeasureResponse* New() const final {
    return CreateMaybeMessage<MeasurementBundle_MeasureResponse>(nullptr);
  }

  MeasurementBundle_MeasureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasurementBundle_MeasureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeasurementBundle_MeasureResponse& from);
  void MergeFrom(const MeasurementBundle_MeasureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementBundle_MeasureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MeasurementBundle.MeasureResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MeasurementBundle_2eproto);
    return ::descriptor_table_MeasurementBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurementsFieldNumber = 3,
    kClientIdFieldNumber = 2,
    kMeasureFieldNumber = 1,
  };
  // repeated .inhumate.rti.proto.MeasurementBundle.HistoricMeasurement measurements = 3;
  int measurements_size() const;
  private:
  int _internal_measurements_size() const;
  public:
  void clear_measurements();
  ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement* mutable_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement >*
      mutable_measurements();
  private:
  const ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement& _internal_measurements(int index) const;
  ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement* _internal_add_measurements();
  public:
  const ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement& measurements(int index) const;
  ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement* add_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement >&
      measurements() const;

  // string client_id = 2;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // .inhumate.rti.proto.Measure measure = 1;
  bool has_measure() const;
  private:
  bool _internal_has_measure() const;
  public:
  void clear_measure();
  const ::inhumate::rti::proto::Measure& measure() const;
  ::inhumate::rti::proto::Measure* release_measure();
  ::inhumate::rti::proto::Measure* mutable_measure();
  void set_allocated_measure(::inhumate::rti::proto::Measure* measure);
  private:
  const ::inhumate::rti::proto::Measure& _internal_measure() const;
  ::inhumate::rti::proto::Measure* _internal_mutable_measure();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MeasurementBundle.MeasureResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement > measurements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::inhumate::rti::proto::Measure* measure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MeasurementBundle_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT MeasurementBundle_HistoricMeasurement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement) */ {
 public:
  MeasurementBundle_HistoricMeasurement();
  virtual ~MeasurementBundle_HistoricMeasurement();

  MeasurementBundle_HistoricMeasurement(const MeasurementBundle_HistoricMeasurement& from);
  MeasurementBundle_HistoricMeasurement(MeasurementBundle_HistoricMeasurement&& from) noexcept
    : MeasurementBundle_HistoricMeasurement() {
    *this = ::std::move(from);
  }

  inline MeasurementBundle_HistoricMeasurement& operator=(const MeasurementBundle_HistoricMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementBundle_HistoricMeasurement& operator=(MeasurementBundle_HistoricMeasurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeasurementBundle_HistoricMeasurement& default_instance();

  enum WhichCase {
    kValue = 3,
    kWindow = 4,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasurementBundle_HistoricMeasurement* internal_default_instance() {
    return reinterpret_cast<const MeasurementBundle_HistoricMeasurement*>(
               &_MeasurementBundle_HistoricMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MeasurementBundle_HistoricMeasurement& a, MeasurementBundle_HistoricMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementBundle_HistoricMeasurement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasurementBundle_HistoricMeasurement* New() const final {
    return CreateMaybeMessage<MeasurementBundle_HistoricMeasurement>(nullptr);
  }

  MeasurementBundle_HistoricMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasurementBundle_HistoricMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeasurementBundle_HistoricMeasurement& from);
  void MergeFrom(const MeasurementBundle_HistoricMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementBundle_HistoricMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MeasurementBundle.HistoricMeasurement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MeasurementBundle_2eproto);
    return ::descriptor_table_MeasurementBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kValueFieldNumber = 3,
    kWindowFieldNumber = 4,
  };
  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // float value = 3;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // .inhumate.rti.proto.Measurement.Window window = 4;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::inhumate::rti::proto::Measurement_Window& window() const;
  ::inhumate::rti::proto::Measurement_Window* release_window();
  ::inhumate::rti::proto::Measurement_Window* mutable_window();
  void set_allocated_window(::inhumate::rti::proto::Measurement_Window* window);
  private:
  const ::inhumate::rti::proto::Measurement_Window& _internal_window() const;
  ::inhumate::rti::proto::Measurement_Window* _internal_mutable_window();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement)
 private:
  class _Internal;
  void set_has_value();
  void set_has_window();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  union WhichUnion {
    WhichUnion() {}
    float value_;
    ::inhumate::rti::proto::Measurement_Window* window_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MeasurementBundle_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT MeasurementBundle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.MeasurementBundle) */ {
 public:
  MeasurementBundle();
  virtual ~MeasurementBundle();

  MeasurementBundle(const MeasurementBundle& from);
  MeasurementBundle(MeasurementBundle&& from) noexcept
    : MeasurementBundle() {
    *this = ::std::move(from);
  }

  inline MeasurementBundle& operator=(const MeasurementBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementBundle& operator=(MeasurementBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeasurementBundle& default_instance();

  enum WhichCase {
    kRequest = 1,
    kResponse = 2,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasurementBundle* internal_default_instance() {
    return reinterpret_cast<const MeasurementBundle*>(
               &_MeasurementBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MeasurementBundle& a, MeasurementBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementBundle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasurementBundle* New() const final {
    return CreateMaybeMessage<MeasurementBundle>(nullptr);
  }

  MeasurementBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasurementBundle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeasurementBundle& from);
  void MergeFrom(const MeasurementBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.MeasurementBundle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MeasurementBundle_2eproto);
    return ::descriptor_table_MeasurementBundle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MeasurementBundle_Request Request;
  typedef MeasurementBundle_Response Response;
  typedef MeasurementBundle_MeasureResponse MeasureResponse;
  typedef MeasurementBundle_HistoricMeasurement HistoricMeasurement;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .inhumate.rti.proto.MeasurementBundle.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::inhumate::rti::proto::MeasurementBundle_Request& request() const;
  ::inhumate::rti::proto::MeasurementBundle_Request* release_request();
  ::inhumate::rti::proto::MeasurementBundle_Request* mutable_request();
  void set_allocated_request(::inhumate::rti::proto::MeasurementBundle_Request* request);
  private:
  const ::inhumate::rti::proto::MeasurementBundle_Request& _internal_request() const;
  ::inhumate::rti::proto::MeasurementBundle_Request* _internal_mutable_request();
  public:

  // .inhumate.rti.proto.MeasurementBundle.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::inhumate::rti::proto::MeasurementBundle_Response& response() const;
  ::inhumate::rti::proto::MeasurementBundle_Response* release_response();
  ::inhumate::rti::proto::MeasurementBundle_Response* mutable_response();
  void set_allocated_response(::inhumate::rti::proto::MeasurementBundle_Response* response);
  private:
  const ::inhumate::rti::proto::MeasurementBundle_Response& _internal_response() const;
  ::inhumate::rti::proto::MeasurementBundle_Response* _internal_mutable_response();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.MeasurementBundle)
 private:
  class _Internal;
  void set_has_request();
  void set_has_response();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    ::inhumate::rti::proto::MeasurementBundle_Request* request_;
    ::inhumate::rti::proto::MeasurementBundle_Response* response_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_MeasurementBundle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MeasurementBundle_Request

// string response_channel = 1;
inline void MeasurementBundle_Request::clear_response_channel() {
  response_channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MeasurementBundle_Request::response_channel() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.response_channel)
  return _internal_response_channel();
}
inline void MeasurementBundle_Request::set_response_channel(const std::string& value) {
  _internal_set_response_channel(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.response_channel)
}
inline std::string* MeasurementBundle_Request::mutable_response_channel() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.Request.response_channel)
  return _internal_mutable_response_channel();
}
inline const std::string& MeasurementBundle_Request::_internal_response_channel() const {
  return response_channel_.GetNoArena();
}
inline void MeasurementBundle_Request::_internal_set_response_channel(const std::string& value) {
  
  response_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MeasurementBundle_Request::set_response_channel(std::string&& value) {
  
  response_channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.MeasurementBundle.Request.response_channel)
}
inline void MeasurementBundle_Request::set_response_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MeasurementBundle.Request.response_channel)
}
inline void MeasurementBundle_Request::set_response_channel(const char* value, size_t size) {
  
  response_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MeasurementBundle.Request.response_channel)
}
inline std::string* MeasurementBundle_Request::_internal_mutable_response_channel() {
  
  return response_channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeasurementBundle_Request::release_response_channel() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MeasurementBundle.Request.response_channel)
  
  return response_channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeasurementBundle_Request::set_allocated_response_channel(std::string* response_channel) {
  if (response_channel != nullptr) {
    
  } else {
    
  }
  response_channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_channel);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.MeasurementBundle.Request.response_channel)
}

// repeated string measures = 2;
inline int MeasurementBundle_Request::_internal_measures_size() const {
  return measures_.size();
}
inline int MeasurementBundle_Request::measures_size() const {
  return _internal_measures_size();
}
inline void MeasurementBundle_Request::clear_measures() {
  measures_.Clear();
}
inline std::string* MeasurementBundle_Request::add_measures() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.MeasurementBundle.Request.measures)
  return _internal_add_measures();
}
inline const std::string& MeasurementBundle_Request::_internal_measures(int index) const {
  return measures_.Get(index);
}
inline const std::string& MeasurementBundle_Request::measures(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.measures)
  return _internal_measures(index);
}
inline std::string* MeasurementBundle_Request::mutable_measures(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.Request.measures)
  return measures_.Mutable(index);
}
inline void MeasurementBundle_Request::set_measures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.measures)
  measures_.Mutable(index)->assign(value);
}
inline void MeasurementBundle_Request::set_measures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.measures)
  measures_.Mutable(index)->assign(std::move(value));
}
inline void MeasurementBundle_Request::set_measures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  measures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MeasurementBundle.Request.measures)
}
inline void MeasurementBundle_Request::set_measures(int index, const char* value, size_t size) {
  measures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MeasurementBundle.Request.measures)
}
inline std::string* MeasurementBundle_Request::_internal_add_measures() {
  return measures_.Add();
}
inline void MeasurementBundle_Request::add_measures(const std::string& value) {
  measures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MeasurementBundle.Request.measures)
}
inline void MeasurementBundle_Request::add_measures(std::string&& value) {
  measures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MeasurementBundle.Request.measures)
}
inline void MeasurementBundle_Request::add_measures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  measures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.MeasurementBundle.Request.measures)
}
inline void MeasurementBundle_Request::add_measures(const char* value, size_t size) {
  measures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.MeasurementBundle.Request.measures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MeasurementBundle_Request::measures() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MeasurementBundle.Request.measures)
  return measures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MeasurementBundle_Request::mutable_measures() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MeasurementBundle.Request.measures)
  return &measures_;
}

// repeated string clients = 3;
inline int MeasurementBundle_Request::_internal_clients_size() const {
  return clients_.size();
}
inline int MeasurementBundle_Request::clients_size() const {
  return _internal_clients_size();
}
inline void MeasurementBundle_Request::clear_clients() {
  clients_.Clear();
}
inline std::string* MeasurementBundle_Request::add_clients() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.MeasurementBundle.Request.clients)
  return _internal_add_clients();
}
inline const std::string& MeasurementBundle_Request::_internal_clients(int index) const {
  return clients_.Get(index);
}
inline const std::string& MeasurementBundle_Request::clients(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.clients)
  return _internal_clients(index);
}
inline std::string* MeasurementBundle_Request::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.Request.clients)
  return clients_.Mutable(index);
}
inline void MeasurementBundle_Request::set_clients(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.clients)
  clients_.Mutable(index)->assign(value);
}
inline void MeasurementBundle_Request::set_clients(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.clients)
  clients_.Mutable(index)->assign(std::move(value));
}
inline void MeasurementBundle_Request::set_clients(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MeasurementBundle.Request.clients)
}
inline void MeasurementBundle_Request::set_clients(int index, const char* value, size_t size) {
  clients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MeasurementBundle.Request.clients)
}
inline std::string* MeasurementBundle_Request::_internal_add_clients() {
  return clients_.Add();
}
inline void MeasurementBundle_Request::add_clients(const std::string& value) {
  clients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MeasurementBundle.Request.clients)
}
inline void MeasurementBundle_Request::add_clients(std::string&& value) {
  clients_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MeasurementBundle.Request.clients)
}
inline void MeasurementBundle_Request::add_clients(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.MeasurementBundle.Request.clients)
}
inline void MeasurementBundle_Request::add_clients(const char* value, size_t size) {
  clients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.MeasurementBundle.Request.clients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MeasurementBundle_Request::clients() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MeasurementBundle.Request.clients)
  return clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MeasurementBundle_Request::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MeasurementBundle.Request.clients)
  return &clients_;
}

// repeated string applications = 4;
inline int MeasurementBundle_Request::_internal_applications_size() const {
  return applications_.size();
}
inline int MeasurementBundle_Request::applications_size() const {
  return _internal_applications_size();
}
inline void MeasurementBundle_Request::clear_applications() {
  applications_.Clear();
}
inline std::string* MeasurementBundle_Request::add_applications() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.MeasurementBundle.Request.applications)
  return _internal_add_applications();
}
inline const std::string& MeasurementBundle_Request::_internal_applications(int index) const {
  return applications_.Get(index);
}
inline const std::string& MeasurementBundle_Request::applications(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.applications)
  return _internal_applications(index);
}
inline std::string* MeasurementBundle_Request::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.Request.applications)
  return applications_.Mutable(index);
}
inline void MeasurementBundle_Request::set_applications(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.applications)
  applications_.Mutable(index)->assign(value);
}
inline void MeasurementBundle_Request::set_applications(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.applications)
  applications_.Mutable(index)->assign(std::move(value));
}
inline void MeasurementBundle_Request::set_applications(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  applications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MeasurementBundle.Request.applications)
}
inline void MeasurementBundle_Request::set_applications(int index, const char* value, size_t size) {
  applications_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MeasurementBundle.Request.applications)
}
inline std::string* MeasurementBundle_Request::_internal_add_applications() {
  return applications_.Add();
}
inline void MeasurementBundle_Request::add_applications(const std::string& value) {
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MeasurementBundle.Request.applications)
}
inline void MeasurementBundle_Request::add_applications(std::string&& value) {
  applications_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MeasurementBundle.Request.applications)
}
inline void MeasurementBundle_Request::add_applications(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.MeasurementBundle.Request.applications)
}
inline void MeasurementBundle_Request::add_applications(const char* value, size_t size) {
  applications_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.MeasurementBundle.Request.applications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MeasurementBundle_Request::applications() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MeasurementBundle.Request.applications)
  return applications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MeasurementBundle_Request::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MeasurementBundle.Request.applications)
  return &applications_;
}

// double from_time = 8;
inline void MeasurementBundle_Request::clear_from_time() {
  from_time_ = 0;
}
inline double MeasurementBundle_Request::_internal_from_time() const {
  return from_time_;
}
inline double MeasurementBundle_Request::from_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.from_time)
  return _internal_from_time();
}
inline void MeasurementBundle_Request::_internal_set_from_time(double value) {
  
  from_time_ = value;
}
inline void MeasurementBundle_Request::set_from_time(double value) {
  _internal_set_from_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.from_time)
}

// double to_time = 9;
inline void MeasurementBundle_Request::clear_to_time() {
  to_time_ = 0;
}
inline double MeasurementBundle_Request::_internal_to_time() const {
  return to_time_;
}
inline double MeasurementBundle_Request::to_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.to_time)
  return _internal_to_time();
}
inline void MeasurementBundle_Request::_internal_set_to_time(double value) {
  
  to_time_ = value;
}
inline void MeasurementBundle_Request::set_to_time(double value) {
  _internal_set_to_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.to_time)
}

// double resolution = 10;
inline void MeasurementBundle_Request::clear_resolution() {
  resolution_ = 0;
}
inline double MeasurementBundle_Request::_internal_resolution() const {
  return resolution_;
}
inline double MeasurementBundle_Request::resolution() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.resolution)
  return _internal_resolution();
}
inline void MeasurementBundle_Request::_internal_set_resolution(double value) {
  
  resolution_ = value;
}
inline void MeasurementBundle_Request::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.resolution)
}

// int32 limit = 11;
inline void MeasurementBundle_Request::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeasurementBundle_Request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeasurementBundle_Request::limit() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.limit)
  return _internal_limit();
}
inline void MeasurementBundle_Request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void MeasurementBundle_Request::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.limit)
}

// int32 offset = 12;
inline void MeasurementBundle_Request::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeasurementBundle_Request::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeasurementBundle_Request::offset() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.offset)
  return _internal_offset();
}
inline void MeasurementBundle_Request::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void MeasurementBundle_Request::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.offset)
}

// bool reverse = 13;
inline void MeasurementBundle_Request::clear_reverse() {
  reverse_ = false;
}
inline bool MeasurementBundle_Request::_internal_reverse() const {
  return reverse_;
}
inline bool MeasurementBundle_Request::reverse() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.reverse)
  return _internal_reverse();
}
inline void MeasurementBundle_Request::_internal_set_reverse(bool value) {
  
  reverse_ = value;
}
inline void MeasurementBundle_Request::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.reverse)
}

// bool per_measure = 14;
inline void MeasurementBundle_Request::clear_per_measure() {
  per_measure_ = false;
}
inline bool MeasurementBundle_Request::_internal_per_measure() const {
  return per_measure_;
}
inline bool MeasurementBundle_Request::per_measure() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Request.per_measure)
  return _internal_per_measure();
}
inline void MeasurementBundle_Request::_internal_set_per_measure(bool value) {
  
  per_measure_ = value;
}
inline void MeasurementBundle_Request::set_per_measure(bool value) {
  _internal_set_per_measure(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Request.per_measure)
}

// -------------------------------------------------------------------

// MeasurementBundle_Response

// repeated .inhumate.rti.proto.MeasurementBundle.MeasureResponse measures = 1;
inline int MeasurementBundle_Response::_internal_measures_size() const {
  return measures_.size();
}
inline int MeasurementBundle_Response::measures_size() const {
  return _internal_measures_size();
}
inline void MeasurementBundle_Response::clear_measures() {
  measures_.Clear();
}
inline ::inhumate::rti::proto::MeasurementBundle_MeasureResponse* MeasurementBundle_Response::mutable_measures(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.Response.measures)
  return measures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_MeasureResponse >*
MeasurementBundle_Response::mutable_measures() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MeasurementBundle.Response.measures)
  return &measures_;
}
inline const ::inhumate::rti::proto::MeasurementBundle_MeasureResponse& MeasurementBundle_Response::_internal_measures(int index) const {
  return measures_.Get(index);
}
inline const ::inhumate::rti::proto::MeasurementBundle_MeasureResponse& MeasurementBundle_Response::measures(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Response.measures)
  return _internal_measures(index);
}
inline ::inhumate::rti::proto::MeasurementBundle_MeasureResponse* MeasurementBundle_Response::_internal_add_measures() {
  return measures_.Add();
}
inline ::inhumate::rti::proto::MeasurementBundle_MeasureResponse* MeasurementBundle_Response::add_measures() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MeasurementBundle.Response.measures)
  return _internal_add_measures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_MeasureResponse >&
MeasurementBundle_Response::measures() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MeasurementBundle.Response.measures)
  return measures_;
}

// int64 total_count = 2;
inline void MeasurementBundle_Response::clear_total_count() {
  total_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeasurementBundle_Response::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeasurementBundle_Response::total_count() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.Response.total_count)
  return _internal_total_count();
}
inline void MeasurementBundle_Response::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_count_ = value;
}
inline void MeasurementBundle_Response::set_total_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.Response.total_count)
}

// -------------------------------------------------------------------

// MeasurementBundle_MeasureResponse

// .inhumate.rti.proto.Measure measure = 1;
inline bool MeasurementBundle_MeasureResponse::_internal_has_measure() const {
  return this != internal_default_instance() && measure_ != nullptr;
}
inline bool MeasurementBundle_MeasureResponse::has_measure() const {
  return _internal_has_measure();
}
inline const ::inhumate::rti::proto::Measure& MeasurementBundle_MeasureResponse::_internal_measure() const {
  const ::inhumate::rti::proto::Measure* p = measure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Measure*>(
      &::inhumate::rti::proto::_Measure_default_instance_);
}
inline const ::inhumate::rti::proto::Measure& MeasurementBundle_MeasureResponse::measure() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measure)
  return _internal_measure();
}
inline ::inhumate::rti::proto::Measure* MeasurementBundle_MeasureResponse::release_measure() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measure)
  
  ::inhumate::rti::proto::Measure* temp = measure_;
  measure_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Measure* MeasurementBundle_MeasureResponse::_internal_mutable_measure() {
  
  if (measure_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Measure>(GetArenaNoVirtual());
    measure_ = p;
  }
  return measure_;
}
inline ::inhumate::rti::proto::Measure* MeasurementBundle_MeasureResponse::mutable_measure() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measure)
  return _internal_mutable_measure();
}
inline void MeasurementBundle_MeasureResponse::set_allocated_measure(::inhumate::rti::proto::Measure* measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure_);
  }
  if (measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    
  } else {
    
  }
  measure_ = measure;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measure)
}

// string client_id = 2;
inline void MeasurementBundle_MeasureResponse::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MeasurementBundle_MeasureResponse::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.MeasureResponse.client_id)
  return _internal_client_id();
}
inline void MeasurementBundle_MeasureResponse::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.MeasureResponse.client_id)
}
inline std::string* MeasurementBundle_MeasureResponse::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.MeasureResponse.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& MeasurementBundle_MeasureResponse::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void MeasurementBundle_MeasureResponse::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MeasurementBundle_MeasureResponse::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.MeasurementBundle.MeasureResponse.client_id)
}
inline void MeasurementBundle_MeasureResponse::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.MeasurementBundle.MeasureResponse.client_id)
}
inline void MeasurementBundle_MeasureResponse::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.MeasurementBundle.MeasureResponse.client_id)
}
inline std::string* MeasurementBundle_MeasureResponse::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeasurementBundle_MeasureResponse::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MeasurementBundle.MeasureResponse.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeasurementBundle_MeasureResponse::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.MeasurementBundle.MeasureResponse.client_id)
}

// repeated .inhumate.rti.proto.MeasurementBundle.HistoricMeasurement measurements = 3;
inline int MeasurementBundle_MeasureResponse::_internal_measurements_size() const {
  return measurements_.size();
}
inline int MeasurementBundle_MeasureResponse::measurements_size() const {
  return _internal_measurements_size();
}
inline void MeasurementBundle_MeasureResponse::clear_measurements() {
  measurements_.Clear();
}
inline ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement* MeasurementBundle_MeasureResponse::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measurements)
  return measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement >*
MeasurementBundle_MeasureResponse::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measurements)
  return &measurements_;
}
inline const ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement& MeasurementBundle_MeasureResponse::_internal_measurements(int index) const {
  return measurements_.Get(index);
}
inline const ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement& MeasurementBundle_MeasureResponse::measurements(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measurements)
  return _internal_measurements(index);
}
inline ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement* MeasurementBundle_MeasureResponse::_internal_add_measurements() {
  return measurements_.Add();
}
inline ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement* MeasurementBundle_MeasureResponse::add_measurements() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measurements)
  return _internal_add_measurements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::MeasurementBundle_HistoricMeasurement >&
MeasurementBundle_MeasureResponse::measurements() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.MeasurementBundle.MeasureResponse.measurements)
  return measurements_;
}

// -------------------------------------------------------------------

// MeasurementBundle_HistoricMeasurement

// double time = 1;
inline void MeasurementBundle_HistoricMeasurement::clear_time() {
  time_ = 0;
}
inline double MeasurementBundle_HistoricMeasurement::_internal_time() const {
  return time_;
}
inline double MeasurementBundle_HistoricMeasurement::time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement.time)
  return _internal_time();
}
inline void MeasurementBundle_HistoricMeasurement::_internal_set_time(double value) {
  
  time_ = value;
}
inline void MeasurementBundle_HistoricMeasurement::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement.time)
}

// float value = 3;
inline bool MeasurementBundle_HistoricMeasurement::_internal_has_value() const {
  return which_case() == kValue;
}
inline void MeasurementBundle_HistoricMeasurement::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void MeasurementBundle_HistoricMeasurement::clear_value() {
  if (_internal_has_value()) {
    which_.value_ = 0;
    clear_has_which();
  }
}
inline float MeasurementBundle_HistoricMeasurement::_internal_value() const {
  if (_internal_has_value()) {
    return which_.value_;
  }
  return 0;
}
inline void MeasurementBundle_HistoricMeasurement::_internal_set_value(float value) {
  if (!_internal_has_value()) {
    clear_which();
    set_has_value();
  }
  which_.value_ = value;
}
inline float MeasurementBundle_HistoricMeasurement::value() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement.value)
  return _internal_value();
}
inline void MeasurementBundle_HistoricMeasurement::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement.value)
}

// .inhumate.rti.proto.Measurement.Window window = 4;
inline bool MeasurementBundle_HistoricMeasurement::_internal_has_window() const {
  return which_case() == kWindow;
}
inline bool MeasurementBundle_HistoricMeasurement::has_window() const {
  return _internal_has_window();
}
inline void MeasurementBundle_HistoricMeasurement::set_has_window() {
  _oneof_case_[0] = kWindow;
}
inline ::inhumate::rti::proto::Measurement_Window* MeasurementBundle_HistoricMeasurement::release_window() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement.window)
  if (_internal_has_window()) {
    clear_has_which();
      ::inhumate::rti::proto::Measurement_Window* temp = which_.window_;
    which_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Measurement_Window& MeasurementBundle_HistoricMeasurement::_internal_window() const {
  return _internal_has_window()
      ? *which_.window_
      : *reinterpret_cast< ::inhumate::rti::proto::Measurement_Window*>(&::inhumate::rti::proto::_Measurement_Window_default_instance_);
}
inline const ::inhumate::rti::proto::Measurement_Window& MeasurementBundle_HistoricMeasurement::window() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement.window)
  return _internal_window();
}
inline ::inhumate::rti::proto::Measurement_Window* MeasurementBundle_HistoricMeasurement::_internal_mutable_window() {
  if (!_internal_has_window()) {
    clear_which();
    set_has_window();
    which_.window_ = CreateMaybeMessage< ::inhumate::rti::proto::Measurement_Window >(
        GetArenaNoVirtual());
  }
  return which_.window_;
}
inline ::inhumate::rti::proto::Measurement_Window* MeasurementBundle_HistoricMeasurement::mutable_window() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.HistoricMeasurement.window)
  return _internal_mutable_window();
}

inline bool MeasurementBundle_HistoricMeasurement::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void MeasurementBundle_HistoricMeasurement::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline MeasurementBundle_HistoricMeasurement::WhichCase MeasurementBundle_HistoricMeasurement::which_case() const {
  return MeasurementBundle_HistoricMeasurement::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MeasurementBundle

// .inhumate.rti.proto.MeasurementBundle.Request request = 1;
inline bool MeasurementBundle::_internal_has_request() const {
  return which_case() == kRequest;
}
inline bool MeasurementBundle::has_request() const {
  return _internal_has_request();
}
inline void MeasurementBundle::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void MeasurementBundle::clear_request() {
  if (_internal_has_request()) {
    delete which_.request_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::MeasurementBundle_Request* MeasurementBundle::release_request() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MeasurementBundle.request)
  if (_internal_has_request()) {
    clear_has_which();
      ::inhumate::rti::proto::MeasurementBundle_Request* temp = which_.request_;
    which_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::MeasurementBundle_Request& MeasurementBundle::_internal_request() const {
  return _internal_has_request()
      ? *which_.request_
      : *reinterpret_cast< ::inhumate::rti::proto::MeasurementBundle_Request*>(&::inhumate::rti::proto::_MeasurementBundle_Request_default_instance_);
}
inline const ::inhumate::rti::proto::MeasurementBundle_Request& MeasurementBundle::request() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.request)
  return _internal_request();
}
inline ::inhumate::rti::proto::MeasurementBundle_Request* MeasurementBundle::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_which();
    set_has_request();
    which_.request_ = CreateMaybeMessage< ::inhumate::rti::proto::MeasurementBundle_Request >(
        GetArenaNoVirtual());
  }
  return which_.request_;
}
inline ::inhumate::rti::proto::MeasurementBundle_Request* MeasurementBundle::mutable_request() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.request)
  return _internal_mutable_request();
}

// .inhumate.rti.proto.MeasurementBundle.Response response = 2;
inline bool MeasurementBundle::_internal_has_response() const {
  return which_case() == kResponse;
}
inline bool MeasurementBundle::has_response() const {
  return _internal_has_response();
}
inline void MeasurementBundle::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void MeasurementBundle::clear_response() {
  if (_internal_has_response()) {
    delete which_.response_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::MeasurementBundle_Response* MeasurementBundle::release_response() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.MeasurementBundle.response)
  if (_internal_has_response()) {
    clear_has_which();
      ::inhumate::rti::proto::MeasurementBundle_Response* temp = which_.response_;
    which_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::MeasurementBundle_Response& MeasurementBundle::_internal_response() const {
  return _internal_has_response()
      ? *which_.response_
      : *reinterpret_cast< ::inhumate::rti::proto::MeasurementBundle_Response*>(&::inhumate::rti::proto::_MeasurementBundle_Response_default_instance_);
}
inline const ::inhumate::rti::proto::MeasurementBundle_Response& MeasurementBundle::response() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.MeasurementBundle.response)
  return _internal_response();
}
inline ::inhumate::rti::proto::MeasurementBundle_Response* MeasurementBundle::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_which();
    set_has_response();
    which_.response_ = CreateMaybeMessage< ::inhumate::rti::proto::MeasurementBundle_Response >(
        GetArenaNoVirtual());
  }
  return which_.response_;
}
inline ::inhumate::rti::proto::MeasurementBundle_Response* MeasurementBundle::mutable_response() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.MeasurementBundle.response)
  return _internal_mutable_response();
}

inline bool MeasurementBundle::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void MeasurementBundle::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline MeasurementBundle::WhichCase MeasurementBundle::which_case() const {
  return MeasurementBundle::WhichCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MeasurementBundle_2eproto
