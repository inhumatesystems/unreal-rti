// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Injectables.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Injectables_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Injectables_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "Parameter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Injectables_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Injectables_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Injectables_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Injectable;
class InjectableDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectableDefaultTypeInternal _Injectable_default_instance_;
class Injectables;
class InjectablesDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectablesDefaultTypeInternal _Injectables_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Injectable* Arena::CreateMaybeMessage<::inhumate::rti::proto::Injectable>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Injectables* Arena::CreateMaybeMessage<::inhumate::rti::proto::Injectables>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

enum Injectable_ControlMode : int {
  Injectable_ControlMode_IMMEDIATE = 0,
  Injectable_ControlMode_AUTO = 1,
  Injectable_ControlMode_MANUAL = 2,
  Injectable_ControlMode_AUTO_OR_MANUAL = 3,
  Injectable_ControlMode_Injectable_ControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Injectable_ControlMode_Injectable_ControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
INHUMATE_RTI_PROTOS_EXPORT bool Injectable_ControlMode_IsValid(int value);
constexpr Injectable_ControlMode Injectable_ControlMode_ControlMode_MIN = Injectable_ControlMode_IMMEDIATE;
constexpr Injectable_ControlMode Injectable_ControlMode_ControlMode_MAX = Injectable_ControlMode_AUTO_OR_MANUAL;
constexpr int Injectable_ControlMode_ControlMode_ARRAYSIZE = Injectable_ControlMode_ControlMode_MAX + 1;

INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Injectable_ControlMode_descriptor();
template<typename T>
inline const std::string& Injectable_ControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Injectable_ControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Injectable_ControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Injectable_ControlMode_descriptor(), enum_t_value);
}
inline bool Injectable_ControlMode_Parse(
    const std::string& name, Injectable_ControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Injectable_ControlMode>(
    Injectable_ControlMode_descriptor(), name, value);
}
// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Injectables :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Injectables) */ {
 public:
  Injectables();
  virtual ~Injectables();

  Injectables(const Injectables& from);
  Injectables(Injectables&& from) noexcept
    : Injectables() {
    *this = ::std::move(from);
  }

  inline Injectables& operator=(const Injectables& from) {
    CopyFrom(from);
    return *this;
  }
  inline Injectables& operator=(Injectables&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Injectables& default_instance();

  enum WhichCase {
    kRequestInjectables = 1,
    kInjectable = 2,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Injectables* internal_default_instance() {
    return reinterpret_cast<const Injectables*>(
               &_Injectables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Injectables& a, Injectables& b) {
    a.Swap(&b);
  }
  inline void Swap(Injectables* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Injectables* New() const final {
    return CreateMaybeMessage<Injectables>(nullptr);
  }

  Injectables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Injectables>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Injectables& from);
  void MergeFrom(const Injectables& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Injectables* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Injectables";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injectables_2eproto);
    return ::descriptor_table_Injectables_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestInjectablesFieldNumber = 1,
    kInjectableFieldNumber = 2,
  };
  // .google.protobuf.Empty request_injectables = 1;
  bool has_request_injectables() const;
  private:
  bool _internal_has_request_injectables() const;
  public:
  void clear_request_injectables();
  const PROTOBUF_NAMESPACE_ID::Empty& request_injectables() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_injectables();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_injectables();
  void set_allocated_request_injectables(PROTOBUF_NAMESPACE_ID::Empty* request_injectables);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_injectables() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_injectables();
  public:

  // .inhumate.rti.proto.Injectable injectable = 2;
  bool has_injectable() const;
  private:
  bool _internal_has_injectable() const;
  public:
  void clear_injectable();
  const ::inhumate::rti::proto::Injectable& injectable() const;
  ::inhumate::rti::proto::Injectable* release_injectable();
  ::inhumate::rti::proto::Injectable* mutable_injectable();
  void set_allocated_injectable(::inhumate::rti::proto::Injectable* injectable);
  private:
  const ::inhumate::rti::proto::Injectable& _internal_injectable() const;
  ::inhumate::rti::proto::Injectable* _internal_mutable_injectable();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Injectables)
 private:
  class _Internal;
  void set_has_request_injectables();
  void set_has_injectable();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_injectables_;
    ::inhumate::rti::proto::Injectable* injectable_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Injectables_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Injectable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Injectable) */ {
 public:
  Injectable();
  virtual ~Injectable();

  Injectable(const Injectable& from);
  Injectable(Injectable&& from) noexcept
    : Injectable() {
    *this = ::std::move(from);
  }

  inline Injectable& operator=(const Injectable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Injectable& operator=(Injectable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Injectable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Injectable* internal_default_instance() {
    return reinterpret_cast<const Injectable*>(
               &_Injectable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Injectable& a, Injectable& b) {
    a.Swap(&b);
  }
  inline void Swap(Injectable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Injectable* New() const final {
    return CreateMaybeMessage<Injectable>(nullptr);
  }

  Injectable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Injectable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Injectable& from);
  void MergeFrom(const Injectable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Injectable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Injectable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injectables_2eproto);
    return ::descriptor_table_Injectables_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Injectable_ControlMode ControlMode;
  static constexpr ControlMode IMMEDIATE =
    Injectable_ControlMode_IMMEDIATE;
  static constexpr ControlMode AUTO =
    Injectable_ControlMode_AUTO;
  static constexpr ControlMode MANUAL =
    Injectable_ControlMode_MANUAL;
  static constexpr ControlMode AUTO_OR_MANUAL =
    Injectable_ControlMode_AUTO_OR_MANUAL;
  static inline bool ControlMode_IsValid(int value) {
    return Injectable_ControlMode_IsValid(value);
  }
  static constexpr ControlMode ControlMode_MIN =
    Injectable_ControlMode_ControlMode_MIN;
  static constexpr ControlMode ControlMode_MAX =
    Injectable_ControlMode_ControlMode_MAX;
  static constexpr int ControlMode_ARRAYSIZE =
    Injectable_ControlMode_ControlMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ControlMode_descriptor() {
    return Injectable_ControlMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ControlMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ControlMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ControlMode_Name.");
    return Injectable_ControlMode_Name(enum_t_value);
  }
  static inline bool ControlMode_Parse(const std::string& name,
      ControlMode* value) {
    return Injectable_ControlMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 12,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kConcurrentFieldNumber = 3,
    kStartModeFieldNumber = 10,
    kEndModeFieldNumber = 11,
  };
  // repeated .inhumate.rti.proto.Parameter parameters = 12;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::inhumate::rti::proto::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >*
      mutable_parameters();
  private:
  const ::inhumate::rti::proto::Parameter& _internal_parameters(int index) const;
  ::inhumate::rti::proto::Parameter* _internal_add_parameters();
  public:
  const ::inhumate::rti::proto::Parameter& parameters(int index) const;
  ::inhumate::rti::proto::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >&
      parameters() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool concurrent = 3;
  void clear_concurrent();
  bool concurrent() const;
  void set_concurrent(bool value);
  private:
  bool _internal_concurrent() const;
  void _internal_set_concurrent(bool value);
  public:

  // .inhumate.rti.proto.Injectable.ControlMode start_mode = 10;
  void clear_start_mode();
  ::inhumate::rti::proto::Injectable_ControlMode start_mode() const;
  void set_start_mode(::inhumate::rti::proto::Injectable_ControlMode value);
  private:
  ::inhumate::rti::proto::Injectable_ControlMode _internal_start_mode() const;
  void _internal_set_start_mode(::inhumate::rti::proto::Injectable_ControlMode value);
  public:

  // .inhumate.rti.proto.Injectable.ControlMode end_mode = 11;
  void clear_end_mode();
  ::inhumate::rti::proto::Injectable_ControlMode end_mode() const;
  void set_end_mode(::inhumate::rti::proto::Injectable_ControlMode value);
  private:
  ::inhumate::rti::proto::Injectable_ControlMode _internal_end_mode() const;
  void _internal_set_end_mode(::inhumate::rti::proto::Injectable_ControlMode value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Injectable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool concurrent_;
  int start_mode_;
  int end_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Injectables_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Injectables

// .google.protobuf.Empty request_injectables = 1;
inline bool Injectables::_internal_has_request_injectables() const {
  return which_case() == kRequestInjectables;
}
inline bool Injectables::has_request_injectables() const {
  return _internal_has_request_injectables();
}
inline void Injectables::set_has_request_injectables() {
  _oneof_case_[0] = kRequestInjectables;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Injectables::release_request_injectables() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injectables.request_injectables)
  if (_internal_has_request_injectables()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_injectables_;
    which_.request_injectables_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Injectables::_internal_request_injectables() const {
  return _internal_has_request_injectables()
      ? *which_.request_injectables_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Injectables::request_injectables() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injectables.request_injectables)
  return _internal_request_injectables();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Injectables::_internal_mutable_request_injectables() {
  if (!_internal_has_request_injectables()) {
    clear_which();
    set_has_request_injectables();
    which_.request_injectables_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_injectables_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Injectables::mutable_request_injectables() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injectables.request_injectables)
  return _internal_mutable_request_injectables();
}

// .inhumate.rti.proto.Injectable injectable = 2;
inline bool Injectables::_internal_has_injectable() const {
  return which_case() == kInjectable;
}
inline bool Injectables::has_injectable() const {
  return _internal_has_injectable();
}
inline void Injectables::set_has_injectable() {
  _oneof_case_[0] = kInjectable;
}
inline void Injectables::clear_injectable() {
  if (_internal_has_injectable()) {
    delete which_.injectable_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Injectable* Injectables::release_injectable() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injectables.injectable)
  if (_internal_has_injectable()) {
    clear_has_which();
      ::inhumate::rti::proto::Injectable* temp = which_.injectable_;
    which_.injectable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Injectable& Injectables::_internal_injectable() const {
  return _internal_has_injectable()
      ? *which_.injectable_
      : *reinterpret_cast< ::inhumate::rti::proto::Injectable*>(&::inhumate::rti::proto::_Injectable_default_instance_);
}
inline const ::inhumate::rti::proto::Injectable& Injectables::injectable() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injectables.injectable)
  return _internal_injectable();
}
inline ::inhumate::rti::proto::Injectable* Injectables::_internal_mutable_injectable() {
  if (!_internal_has_injectable()) {
    clear_which();
    set_has_injectable();
    which_.injectable_ = CreateMaybeMessage< ::inhumate::rti::proto::Injectable >(
        GetArenaNoVirtual());
  }
  return which_.injectable_;
}
inline ::inhumate::rti::proto::Injectable* Injectables::mutable_injectable() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injectables.injectable)
  return _internal_mutable_injectable();
}

inline bool Injectables::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void Injectables::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline Injectables::WhichCase Injectables::which_case() const {
  return Injectables::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Injectable

// string name = 1;
inline void Injectable::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Injectable::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injectable.name)
  return _internal_name();
}
inline void Injectable::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injectable.name)
}
inline std::string* Injectable::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injectable.name)
  return _internal_mutable_name();
}
inline const std::string& Injectable::_internal_name() const {
  return name_.GetNoArena();
}
inline void Injectable::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Injectable::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Injectable.name)
}
inline void Injectable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Injectable.name)
}
inline void Injectable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Injectable.name)
}
inline std::string* Injectable::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Injectable::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injectable.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Injectable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Injectable.name)
}

// string description = 2;
inline void Injectable::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Injectable::description() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injectable.description)
  return _internal_description();
}
inline void Injectable::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injectable.description)
}
inline std::string* Injectable::mutable_description() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injectable.description)
  return _internal_mutable_description();
}
inline const std::string& Injectable::_internal_description() const {
  return description_.GetNoArena();
}
inline void Injectable::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Injectable::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Injectable.description)
}
inline void Injectable::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Injectable.description)
}
inline void Injectable::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Injectable.description)
}
inline std::string* Injectable::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Injectable::release_description() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injectable.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Injectable::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Injectable.description)
}

// bool concurrent = 3;
inline void Injectable::clear_concurrent() {
  concurrent_ = false;
}
inline bool Injectable::_internal_concurrent() const {
  return concurrent_;
}
inline bool Injectable::concurrent() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injectable.concurrent)
  return _internal_concurrent();
}
inline void Injectable::_internal_set_concurrent(bool value) {
  
  concurrent_ = value;
}
inline void Injectable::set_concurrent(bool value) {
  _internal_set_concurrent(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injectable.concurrent)
}

// .inhumate.rti.proto.Injectable.ControlMode start_mode = 10;
inline void Injectable::clear_start_mode() {
  start_mode_ = 0;
}
inline ::inhumate::rti::proto::Injectable_ControlMode Injectable::_internal_start_mode() const {
  return static_cast< ::inhumate::rti::proto::Injectable_ControlMode >(start_mode_);
}
inline ::inhumate::rti::proto::Injectable_ControlMode Injectable::start_mode() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injectable.start_mode)
  return _internal_start_mode();
}
inline void Injectable::_internal_set_start_mode(::inhumate::rti::proto::Injectable_ControlMode value) {
  
  start_mode_ = value;
}
inline void Injectable::set_start_mode(::inhumate::rti::proto::Injectable_ControlMode value) {
  _internal_set_start_mode(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injectable.start_mode)
}

// .inhumate.rti.proto.Injectable.ControlMode end_mode = 11;
inline void Injectable::clear_end_mode() {
  end_mode_ = 0;
}
inline ::inhumate::rti::proto::Injectable_ControlMode Injectable::_internal_end_mode() const {
  return static_cast< ::inhumate::rti::proto::Injectable_ControlMode >(end_mode_);
}
inline ::inhumate::rti::proto::Injectable_ControlMode Injectable::end_mode() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injectable.end_mode)
  return _internal_end_mode();
}
inline void Injectable::_internal_set_end_mode(::inhumate::rti::proto::Injectable_ControlMode value) {
  
  end_mode_ = value;
}
inline void Injectable::set_end_mode(::inhumate::rti::proto::Injectable_ControlMode value) {
  _internal_set_end_mode(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injectable.end_mode)
}

// repeated .inhumate.rti.proto.Parameter parameters = 12;
inline int Injectable::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Injectable::parameters_size() const {
  return _internal_parameters_size();
}
inline ::inhumate::rti::proto::Parameter* Injectable::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injectable.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >*
Injectable::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Injectable.parameters)
  return &parameters_;
}
inline const ::inhumate::rti::proto::Parameter& Injectable::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::inhumate::rti::proto::Parameter& Injectable::parameters(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injectable.parameters)
  return _internal_parameters(index);
}
inline ::inhumate::rti::proto::Parameter* Injectable::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::inhumate::rti::proto::Parameter* Injectable::add_parameters() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Injectable.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >&
Injectable::parameters() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Injectable.parameters)
  return parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::inhumate::rti::proto::Injectable_ControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inhumate::rti::proto::Injectable_ControlMode>() {
  return ::inhumate::rti::proto::Injectable_ControlMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Injectables_2eproto
