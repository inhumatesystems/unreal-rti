// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Injections.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Injections_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Injections_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Injections_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Injections_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Injections_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Injection;
class InjectionDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectionDefaultTypeInternal _Injection_default_instance_;
class InjectionOperation;
class InjectionOperationDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectionOperationDefaultTypeInternal _InjectionOperation_default_instance_;
class InjectionOperation_Inject;
class InjectionOperation_InjectDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectionOperation_InjectDefaultTypeInternal _InjectionOperation_Inject_default_instance_;
class InjectionOperation_Inject_ParameterValuesEntry_DoNotUse;
class InjectionOperation_Inject_ParameterValuesEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectionOperation_Inject_ParameterValuesEntry_DoNotUseDefaultTypeInternal _InjectionOperation_Inject_ParameterValuesEntry_DoNotUse_default_instance_;
class InjectionOperation_Schedule;
class InjectionOperation_ScheduleDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectionOperation_ScheduleDefaultTypeInternal _InjectionOperation_Schedule_default_instance_;
class InjectionOperation_UpdateTitle;
class InjectionOperation_UpdateTitleDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectionOperation_UpdateTitleDefaultTypeInternal _InjectionOperation_UpdateTitle_default_instance_;
class Injection_ParameterValuesEntry_DoNotUse;
class Injection_ParameterValuesEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Injection_ParameterValuesEntry_DoNotUseDefaultTypeInternal _Injection_ParameterValuesEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Injection* Arena::CreateMaybeMessage<::inhumate::rti::proto::Injection>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::InjectionOperation* Arena::CreateMaybeMessage<::inhumate::rti::proto::InjectionOperation>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::InjectionOperation_Inject* Arena::CreateMaybeMessage<::inhumate::rti::proto::InjectionOperation_Inject>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::InjectionOperation_Inject_ParameterValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::InjectionOperation_Inject_ParameterValuesEntry_DoNotUse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::InjectionOperation_Schedule* Arena::CreateMaybeMessage<::inhumate::rti::proto::InjectionOperation_Schedule>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::InjectionOperation_UpdateTitle* Arena::CreateMaybeMessage<::inhumate::rti::proto::InjectionOperation_UpdateTitle>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Injection_ParameterValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::Injection_ParameterValuesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

enum Injection_State : int {
  Injection_State_UNKNOWN = 0,
  Injection_State_DISABLED = 10,
  Injection_State_ENABLED = 20,
  Injection_State_RUNNING = 30,
  Injection_State_END = 40,
  Injection_State_STOPPED = 41,
  Injection_State_CANCELED = 42,
  Injection_State_Injection_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Injection_State_Injection_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
INHUMATE_RTI_PROTOS_EXPORT bool Injection_State_IsValid(int value);
constexpr Injection_State Injection_State_State_MIN = Injection_State_UNKNOWN;
constexpr Injection_State Injection_State_State_MAX = Injection_State_CANCELED;
constexpr int Injection_State_State_ARRAYSIZE = Injection_State_State_MAX + 1;

INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Injection_State_descriptor();
template<typename T>
inline const std::string& Injection_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Injection_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Injection_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Injection_State_descriptor(), enum_t_value);
}
inline bool Injection_State_Parse(
    const std::string& name, Injection_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Injection_State>(
    Injection_State_descriptor(), name, value);
}
// ===================================================================

class InjectionOperation_Inject_ParameterValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InjectionOperation_Inject_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InjectionOperation_Inject_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InjectionOperation_Inject_ParameterValuesEntry_DoNotUse();
  InjectionOperation_Inject_ParameterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InjectionOperation_Inject_ParameterValuesEntry_DoNotUse& other);
  static const InjectionOperation_Inject_ParameterValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InjectionOperation_Inject_ParameterValuesEntry_DoNotUse*>(&_InjectionOperation_Inject_ParameterValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.InjectionOperation.Inject.ParameterValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.InjectionOperation.Inject.ParameterValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injections_2eproto);
    return ::descriptor_table_Injections_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT InjectionOperation_Inject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.InjectionOperation.Inject) */ {
 public:
  InjectionOperation_Inject();
  virtual ~InjectionOperation_Inject();

  InjectionOperation_Inject(const InjectionOperation_Inject& from);
  InjectionOperation_Inject(InjectionOperation_Inject&& from) noexcept
    : InjectionOperation_Inject() {
    *this = ::std::move(from);
  }

  inline InjectionOperation_Inject& operator=(const InjectionOperation_Inject& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectionOperation_Inject& operator=(InjectionOperation_Inject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InjectionOperation_Inject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectionOperation_Inject* internal_default_instance() {
    return reinterpret_cast<const InjectionOperation_Inject*>(
               &_InjectionOperation_Inject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InjectionOperation_Inject& a, InjectionOperation_Inject& b) {
    a.Swap(&b);
  }
  inline void Swap(InjectionOperation_Inject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InjectionOperation_Inject* New() const final {
    return CreateMaybeMessage<InjectionOperation_Inject>(nullptr);
  }

  InjectionOperation_Inject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InjectionOperation_Inject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InjectionOperation_Inject& from);
  void MergeFrom(const InjectionOperation_Inject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InjectionOperation_Inject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.InjectionOperation.Inject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injections_2eproto);
    return ::descriptor_table_Injections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParameterValuesFieldNumber = 4,
    kInjectableFieldNumber = 1,
    kEnableTimeFieldNumber = 2,
    kDisabledFieldNumber = 3,
  };
  // map<string, string> parameter_values = 4;
  int parameter_values_size() const;
  private:
  int _internal_parameter_values_size() const;
  public:
  void clear_parameter_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameter_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameter_values();

  // string injectable = 1;
  void clear_injectable();
  const std::string& injectable() const;
  void set_injectable(const std::string& value);
  void set_injectable(std::string&& value);
  void set_injectable(const char* value);
  void set_injectable(const char* value, size_t size);
  std::string* mutable_injectable();
  std::string* release_injectable();
  void set_allocated_injectable(std::string* injectable);
  private:
  const std::string& _internal_injectable() const;
  void _internal_set_injectable(const std::string& value);
  std::string* _internal_mutable_injectable();
  public:

  // double enable_time = 2;
  void clear_enable_time();
  double enable_time() const;
  void set_enable_time(double value);
  private:
  double _internal_enable_time() const;
  void _internal_set_enable_time(double value);
  public:

  // bool disabled = 3;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.InjectionOperation.Inject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InjectionOperation_Inject_ParameterValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > parameter_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr injectable_;
  double enable_time_;
  bool disabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Injections_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT InjectionOperation_Schedule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.InjectionOperation.Schedule) */ {
 public:
  InjectionOperation_Schedule();
  virtual ~InjectionOperation_Schedule();

  InjectionOperation_Schedule(const InjectionOperation_Schedule& from);
  InjectionOperation_Schedule(InjectionOperation_Schedule&& from) noexcept
    : InjectionOperation_Schedule() {
    *this = ::std::move(from);
  }

  inline InjectionOperation_Schedule& operator=(const InjectionOperation_Schedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectionOperation_Schedule& operator=(InjectionOperation_Schedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InjectionOperation_Schedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectionOperation_Schedule* internal_default_instance() {
    return reinterpret_cast<const InjectionOperation_Schedule*>(
               &_InjectionOperation_Schedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InjectionOperation_Schedule& a, InjectionOperation_Schedule& b) {
    a.Swap(&b);
  }
  inline void Swap(InjectionOperation_Schedule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InjectionOperation_Schedule* New() const final {
    return CreateMaybeMessage<InjectionOperation_Schedule>(nullptr);
  }

  InjectionOperation_Schedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InjectionOperation_Schedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InjectionOperation_Schedule& from);
  void MergeFrom(const InjectionOperation_Schedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InjectionOperation_Schedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.InjectionOperation.Schedule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injections_2eproto);
    return ::descriptor_table_Injections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInjectionIdFieldNumber = 1,
    kEnableTimeFieldNumber = 2,
  };
  // string injection_id = 1;
  void clear_injection_id();
  const std::string& injection_id() const;
  void set_injection_id(const std::string& value);
  void set_injection_id(std::string&& value);
  void set_injection_id(const char* value);
  void set_injection_id(const char* value, size_t size);
  std::string* mutable_injection_id();
  std::string* release_injection_id();
  void set_allocated_injection_id(std::string* injection_id);
  private:
  const std::string& _internal_injection_id() const;
  void _internal_set_injection_id(const std::string& value);
  std::string* _internal_mutable_injection_id();
  public:

  // double enable_time = 2;
  void clear_enable_time();
  double enable_time() const;
  void set_enable_time(double value);
  private:
  double _internal_enable_time() const;
  void _internal_set_enable_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.InjectionOperation.Schedule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr injection_id_;
  double enable_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Injections_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT InjectionOperation_UpdateTitle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.InjectionOperation.UpdateTitle) */ {
 public:
  InjectionOperation_UpdateTitle();
  virtual ~InjectionOperation_UpdateTitle();

  InjectionOperation_UpdateTitle(const InjectionOperation_UpdateTitle& from);
  InjectionOperation_UpdateTitle(InjectionOperation_UpdateTitle&& from) noexcept
    : InjectionOperation_UpdateTitle() {
    *this = ::std::move(from);
  }

  inline InjectionOperation_UpdateTitle& operator=(const InjectionOperation_UpdateTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectionOperation_UpdateTitle& operator=(InjectionOperation_UpdateTitle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InjectionOperation_UpdateTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectionOperation_UpdateTitle* internal_default_instance() {
    return reinterpret_cast<const InjectionOperation_UpdateTitle*>(
               &_InjectionOperation_UpdateTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InjectionOperation_UpdateTitle& a, InjectionOperation_UpdateTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(InjectionOperation_UpdateTitle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InjectionOperation_UpdateTitle* New() const final {
    return CreateMaybeMessage<InjectionOperation_UpdateTitle>(nullptr);
  }

  InjectionOperation_UpdateTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InjectionOperation_UpdateTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InjectionOperation_UpdateTitle& from);
  void MergeFrom(const InjectionOperation_UpdateTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InjectionOperation_UpdateTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.InjectionOperation.UpdateTitle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injections_2eproto);
    return ::descriptor_table_Injections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInjectionIdFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // string injection_id = 1;
  void clear_injection_id();
  const std::string& injection_id() const;
  void set_injection_id(const std::string& value);
  void set_injection_id(std::string&& value);
  void set_injection_id(const char* value);
  void set_injection_id(const char* value, size_t size);
  std::string* mutable_injection_id();
  std::string* release_injection_id();
  void set_allocated_injection_id(std::string* injection_id);
  private:
  const std::string& _internal_injection_id() const;
  void _internal_set_injection_id(const std::string& value);
  std::string* _internal_mutable_injection_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.InjectionOperation.UpdateTitle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr injection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Injections_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT InjectionOperation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.InjectionOperation) */ {
 public:
  InjectionOperation();
  virtual ~InjectionOperation();

  InjectionOperation(const InjectionOperation& from);
  InjectionOperation(InjectionOperation&& from) noexcept
    : InjectionOperation() {
    *this = ::std::move(from);
  }

  inline InjectionOperation& operator=(const InjectionOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectionOperation& operator=(InjectionOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InjectionOperation& default_instance();

  enum WhichCase {
    kRequestInjections = 1,
    kInject = 3,
    kDisable = 4,
    kEnable = 5,
    kStart = 6,
    kEnd = 7,
    kStop = 8,
    kCancel = 9,
    kClear = 10,
    kSchedule = 11,
    kUpdateTitle = 12,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectionOperation* internal_default_instance() {
    return reinterpret_cast<const InjectionOperation*>(
               &_InjectionOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InjectionOperation& a, InjectionOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(InjectionOperation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InjectionOperation* New() const final {
    return CreateMaybeMessage<InjectionOperation>(nullptr);
  }

  InjectionOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InjectionOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InjectionOperation& from);
  void MergeFrom(const InjectionOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InjectionOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.InjectionOperation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injections_2eproto);
    return ::descriptor_table_Injections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InjectionOperation_Inject Inject;
  typedef InjectionOperation_Schedule Schedule;
  typedef InjectionOperation_UpdateTitle UpdateTitle;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestInjectionsFieldNumber = 1,
    kInjectFieldNumber = 3,
    kDisableFieldNumber = 4,
    kEnableFieldNumber = 5,
    kStartFieldNumber = 6,
    kEndFieldNumber = 7,
    kStopFieldNumber = 8,
    kCancelFieldNumber = 9,
    kClearFieldNumber = 10,
    kScheduleFieldNumber = 11,
    kUpdateTitleFieldNumber = 12,
  };
  // .google.protobuf.Empty request_injections = 1;
  bool has_request_injections() const;
  private:
  bool _internal_has_request_injections() const;
  public:
  void clear_request_injections();
  const PROTOBUF_NAMESPACE_ID::Empty& request_injections() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_injections();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_injections();
  void set_allocated_request_injections(PROTOBUF_NAMESPACE_ID::Empty* request_injections);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_injections() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_injections();
  public:

  // .inhumate.rti.proto.InjectionOperation.Inject inject = 3;
  bool has_inject() const;
  private:
  bool _internal_has_inject() const;
  public:
  void clear_inject();
  const ::inhumate::rti::proto::InjectionOperation_Inject& inject() const;
  ::inhumate::rti::proto::InjectionOperation_Inject* release_inject();
  ::inhumate::rti::proto::InjectionOperation_Inject* mutable_inject();
  void set_allocated_inject(::inhumate::rti::proto::InjectionOperation_Inject* inject);
  private:
  const ::inhumate::rti::proto::InjectionOperation_Inject& _internal_inject() const;
  ::inhumate::rti::proto::InjectionOperation_Inject* _internal_mutable_inject();
  public:

  // string disable = 4;
  private:
  bool _internal_has_disable() const;
  public:
  void clear_disable();
  const std::string& disable() const;
  void set_disable(const std::string& value);
  void set_disable(std::string&& value);
  void set_disable(const char* value);
  void set_disable(const char* value, size_t size);
  std::string* mutable_disable();
  std::string* release_disable();
  void set_allocated_disable(std::string* disable);
  private:
  const std::string& _internal_disable() const;
  void _internal_set_disable(const std::string& value);
  std::string* _internal_mutable_disable();
  public:

  // string enable = 5;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const std::string& enable() const;
  void set_enable(const std::string& value);
  void set_enable(std::string&& value);
  void set_enable(const char* value);
  void set_enable(const char* value, size_t size);
  std::string* mutable_enable();
  std::string* release_enable();
  void set_allocated_enable(std::string* enable);
  private:
  const std::string& _internal_enable() const;
  void _internal_set_enable(const std::string& value);
  std::string* _internal_mutable_enable();
  public:

  // string start = 6;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string end = 7;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const std::string& end() const;
  void set_end(const std::string& value);
  void set_end(std::string&& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  std::string* mutable_end();
  std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // string stop = 8;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  const std::string& stop() const;
  void set_stop(const std::string& value);
  void set_stop(std::string&& value);
  void set_stop(const char* value);
  void set_stop(const char* value, size_t size);
  std::string* mutable_stop();
  std::string* release_stop();
  void set_allocated_stop(std::string* stop);
  private:
  const std::string& _internal_stop() const;
  void _internal_set_stop(const std::string& value);
  std::string* _internal_mutable_stop();
  public:

  // string cancel = 9;
  private:
  bool _internal_has_cancel() const;
  public:
  void clear_cancel();
  const std::string& cancel() const;
  void set_cancel(const std::string& value);
  void set_cancel(std::string&& value);
  void set_cancel(const char* value);
  void set_cancel(const char* value, size_t size);
  std::string* mutable_cancel();
  std::string* release_cancel();
  void set_allocated_cancel(std::string* cancel);
  private:
  const std::string& _internal_cancel() const;
  void _internal_set_cancel(const std::string& value);
  std::string* _internal_mutable_cancel();
  public:

  // string clear = 10;
  private:
  bool _internal_has_clear() const;
  public:
  void clear_clear();
  const std::string& clear() const;
  void set_clear(const std::string& value);
  void set_clear(std::string&& value);
  void set_clear(const char* value);
  void set_clear(const char* value, size_t size);
  std::string* mutable_clear();
  std::string* release_clear();
  void set_allocated_clear(std::string* clear);
  private:
  const std::string& _internal_clear() const;
  void _internal_set_clear(const std::string& value);
  std::string* _internal_mutable_clear();
  public:

  // .inhumate.rti.proto.InjectionOperation.Schedule schedule = 11;
  bool has_schedule() const;
  private:
  bool _internal_has_schedule() const;
  public:
  void clear_schedule();
  const ::inhumate::rti::proto::InjectionOperation_Schedule& schedule() const;
  ::inhumate::rti::proto::InjectionOperation_Schedule* release_schedule();
  ::inhumate::rti::proto::InjectionOperation_Schedule* mutable_schedule();
  void set_allocated_schedule(::inhumate::rti::proto::InjectionOperation_Schedule* schedule);
  private:
  const ::inhumate::rti::proto::InjectionOperation_Schedule& _internal_schedule() const;
  ::inhumate::rti::proto::InjectionOperation_Schedule* _internal_mutable_schedule();
  public:

  // .inhumate.rti.proto.InjectionOperation.UpdateTitle update_title = 12;
  bool has_update_title() const;
  private:
  bool _internal_has_update_title() const;
  public:
  void clear_update_title();
  const ::inhumate::rti::proto::InjectionOperation_UpdateTitle& update_title() const;
  ::inhumate::rti::proto::InjectionOperation_UpdateTitle* release_update_title();
  ::inhumate::rti::proto::InjectionOperation_UpdateTitle* mutable_update_title();
  void set_allocated_update_title(::inhumate::rti::proto::InjectionOperation_UpdateTitle* update_title);
  private:
  const ::inhumate::rti::proto::InjectionOperation_UpdateTitle& _internal_update_title() const;
  ::inhumate::rti::proto::InjectionOperation_UpdateTitle* _internal_mutable_update_title();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.InjectionOperation)
 private:
  class _Internal;
  void set_has_request_injections();
  void set_has_inject();
  void set_has_disable();
  void set_has_enable();
  void set_has_start();
  void set_has_end();
  void set_has_stop();
  void set_has_cancel();
  void set_has_clear();
  void set_has_schedule();
  void set_has_update_title();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_injections_;
    ::inhumate::rti::proto::InjectionOperation_Inject* inject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clear_;
    ::inhumate::rti::proto::InjectionOperation_Schedule* schedule_;
    ::inhumate::rti::proto::InjectionOperation_UpdateTitle* update_title_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Injections_2eproto;
};
// -------------------------------------------------------------------

class Injection_ParameterValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Injection_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Injection_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Injection_ParameterValuesEntry_DoNotUse();
  Injection_ParameterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Injection_ParameterValuesEntry_DoNotUse& other);
  static const Injection_ParameterValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Injection_ParameterValuesEntry_DoNotUse*>(&_Injection_ParameterValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.Injection.ParameterValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.Injection.ParameterValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injections_2eproto);
    return ::descriptor_table_Injections_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Injection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Injection) */ {
 public:
  Injection();
  virtual ~Injection();

  Injection(const Injection& from);
  Injection(Injection&& from) noexcept
    : Injection() {
    *this = ::std::move(from);
  }

  inline Injection& operator=(const Injection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Injection& operator=(Injection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Injection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Injection* internal_default_instance() {
    return reinterpret_cast<const Injection*>(
               &_Injection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Injection& a, Injection& b) {
    a.Swap(&b);
  }
  inline void Swap(Injection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Injection* New() const final {
    return CreateMaybeMessage<Injection>(nullptr);
  }

  Injection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Injection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Injection& from);
  void MergeFrom(const Injection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Injection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Injection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injections_2eproto);
    return ::descriptor_table_Injections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef Injection_State State;
  static constexpr State UNKNOWN =
    Injection_State_UNKNOWN;
  static constexpr State DISABLED =
    Injection_State_DISABLED;
  static constexpr State ENABLED =
    Injection_State_ENABLED;
  static constexpr State RUNNING =
    Injection_State_RUNNING;
  static constexpr State END =
    Injection_State_END;
  static constexpr State STOPPED =
    Injection_State_STOPPED;
  static constexpr State CANCELED =
    Injection_State_CANCELED;
  static inline bool State_IsValid(int value) {
    return Injection_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Injection_State_State_MIN;
  static constexpr State State_MAX =
    Injection_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Injection_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Injection_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Injection_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Injection_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParameterValuesFieldNumber = 5,
    kIdFieldNumber = 1,
    kInjectableFieldNumber = 2,
    kTitleFieldNumber = 4,
    kStateFieldNumber = 3,
    kEnableTimeFieldNumber = 10,
    kStartTimeFieldNumber = 11,
    kEndTimeFieldNumber = 12,
  };
  // map<string, string> parameter_values = 5;
  int parameter_values_size() const;
  private:
  int _internal_parameter_values_size() const;
  public:
  void clear_parameter_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameter_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameter_values();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string injectable = 2;
  void clear_injectable();
  const std::string& injectable() const;
  void set_injectable(const std::string& value);
  void set_injectable(std::string&& value);
  void set_injectable(const char* value);
  void set_injectable(const char* value, size_t size);
  std::string* mutable_injectable();
  std::string* release_injectable();
  void set_allocated_injectable(std::string* injectable);
  private:
  const std::string& _internal_injectable() const;
  void _internal_set_injectable(const std::string& value);
  std::string* _internal_mutable_injectable();
  public:

  // string title = 4;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .inhumate.rti.proto.Injection.State state = 3;
  void clear_state();
  ::inhumate::rti::proto::Injection_State state() const;
  void set_state(::inhumate::rti::proto::Injection_State value);
  private:
  ::inhumate::rti::proto::Injection_State _internal_state() const;
  void _internal_set_state(::inhumate::rti::proto::Injection_State value);
  public:

  // double enable_time = 10;
  void clear_enable_time();
  double enable_time() const;
  void set_enable_time(double value);
  private:
  double _internal_enable_time() const;
  void _internal_set_enable_time(double value);
  public:

  // double start_time = 11;
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // double end_time = 12;
  void clear_end_time();
  double end_time() const;
  void set_end_time(double value);
  private:
  double _internal_end_time() const;
  void _internal_set_end_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Injection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Injection_ParameterValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > parameter_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr injectable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  int state_;
  double enable_time_;
  double start_time_;
  double end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Injections_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InjectionOperation_Inject

// string injectable = 1;
inline void InjectionOperation_Inject::clear_injectable() {
  injectable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InjectionOperation_Inject::injectable() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.Inject.injectable)
  return _internal_injectable();
}
inline void InjectionOperation_Inject::set_injectable(const std::string& value) {
  _internal_set_injectable(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.Inject.injectable)
}
inline std::string* InjectionOperation_Inject::mutable_injectable() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.Inject.injectable)
  return _internal_mutable_injectable();
}
inline const std::string& InjectionOperation_Inject::_internal_injectable() const {
  return injectable_.GetNoArena();
}
inline void InjectionOperation_Inject::_internal_set_injectable(const std::string& value) {
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation_Inject::set_injectable(std::string&& value) {
  
  injectable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.Inject.injectable)
}
inline void InjectionOperation_Inject::set_injectable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.Inject.injectable)
}
inline void InjectionOperation_Inject::set_injectable(const char* value, size_t size) {
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.Inject.injectable)
}
inline std::string* InjectionOperation_Inject::_internal_mutable_injectable() {
  
  return injectable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation_Inject::release_injectable() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.Inject.injectable)
  
  return injectable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InjectionOperation_Inject::set_allocated_injectable(std::string* injectable) {
  if (injectable != nullptr) {
    
  } else {
    
  }
  injectable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), injectable);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.Inject.injectable)
}

// double enable_time = 2;
inline void InjectionOperation_Inject::clear_enable_time() {
  enable_time_ = 0;
}
inline double InjectionOperation_Inject::_internal_enable_time() const {
  return enable_time_;
}
inline double InjectionOperation_Inject::enable_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.Inject.enable_time)
  return _internal_enable_time();
}
inline void InjectionOperation_Inject::_internal_set_enable_time(double value) {
  
  enable_time_ = value;
}
inline void InjectionOperation_Inject::set_enable_time(double value) {
  _internal_set_enable_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.Inject.enable_time)
}

// bool disabled = 3;
inline void InjectionOperation_Inject::clear_disabled() {
  disabled_ = false;
}
inline bool InjectionOperation_Inject::_internal_disabled() const {
  return disabled_;
}
inline bool InjectionOperation_Inject::disabled() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.Inject.disabled)
  return _internal_disabled();
}
inline void InjectionOperation_Inject::_internal_set_disabled(bool value) {
  
  disabled_ = value;
}
inline void InjectionOperation_Inject::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.Inject.disabled)
}

// map<string, string> parameter_values = 4;
inline int InjectionOperation_Inject::_internal_parameter_values_size() const {
  return parameter_values_.size();
}
inline int InjectionOperation_Inject::parameter_values_size() const {
  return _internal_parameter_values_size();
}
inline void InjectionOperation_Inject::clear_parameter_values() {
  parameter_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InjectionOperation_Inject::_internal_parameter_values() const {
  return parameter_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InjectionOperation_Inject::parameter_values() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.InjectionOperation.Inject.parameter_values)
  return _internal_parameter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InjectionOperation_Inject::_internal_mutable_parameter_values() {
  return parameter_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InjectionOperation_Inject::mutable_parameter_values() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.InjectionOperation.Inject.parameter_values)
  return _internal_mutable_parameter_values();
}

// -------------------------------------------------------------------

// InjectionOperation_Schedule

// string injection_id = 1;
inline void InjectionOperation_Schedule::clear_injection_id() {
  injection_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InjectionOperation_Schedule::injection_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.Schedule.injection_id)
  return _internal_injection_id();
}
inline void InjectionOperation_Schedule::set_injection_id(const std::string& value) {
  _internal_set_injection_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.Schedule.injection_id)
}
inline std::string* InjectionOperation_Schedule::mutable_injection_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.Schedule.injection_id)
  return _internal_mutable_injection_id();
}
inline const std::string& InjectionOperation_Schedule::_internal_injection_id() const {
  return injection_id_.GetNoArena();
}
inline void InjectionOperation_Schedule::_internal_set_injection_id(const std::string& value) {
  
  injection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation_Schedule::set_injection_id(std::string&& value) {
  
  injection_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.Schedule.injection_id)
}
inline void InjectionOperation_Schedule::set_injection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  injection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.Schedule.injection_id)
}
inline void InjectionOperation_Schedule::set_injection_id(const char* value, size_t size) {
  
  injection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.Schedule.injection_id)
}
inline std::string* InjectionOperation_Schedule::_internal_mutable_injection_id() {
  
  return injection_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation_Schedule::release_injection_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.Schedule.injection_id)
  
  return injection_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InjectionOperation_Schedule::set_allocated_injection_id(std::string* injection_id) {
  if (injection_id != nullptr) {
    
  } else {
    
  }
  injection_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), injection_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.Schedule.injection_id)
}

// double enable_time = 2;
inline void InjectionOperation_Schedule::clear_enable_time() {
  enable_time_ = 0;
}
inline double InjectionOperation_Schedule::_internal_enable_time() const {
  return enable_time_;
}
inline double InjectionOperation_Schedule::enable_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.Schedule.enable_time)
  return _internal_enable_time();
}
inline void InjectionOperation_Schedule::_internal_set_enable_time(double value) {
  
  enable_time_ = value;
}
inline void InjectionOperation_Schedule::set_enable_time(double value) {
  _internal_set_enable_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.Schedule.enable_time)
}

// -------------------------------------------------------------------

// InjectionOperation_UpdateTitle

// string injection_id = 1;
inline void InjectionOperation_UpdateTitle::clear_injection_id() {
  injection_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InjectionOperation_UpdateTitle::injection_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.UpdateTitle.injection_id)
  return _internal_injection_id();
}
inline void InjectionOperation_UpdateTitle::set_injection_id(const std::string& value) {
  _internal_set_injection_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.UpdateTitle.injection_id)
}
inline std::string* InjectionOperation_UpdateTitle::mutable_injection_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.UpdateTitle.injection_id)
  return _internal_mutable_injection_id();
}
inline const std::string& InjectionOperation_UpdateTitle::_internal_injection_id() const {
  return injection_id_.GetNoArena();
}
inline void InjectionOperation_UpdateTitle::_internal_set_injection_id(const std::string& value) {
  
  injection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation_UpdateTitle::set_injection_id(std::string&& value) {
  
  injection_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.UpdateTitle.injection_id)
}
inline void InjectionOperation_UpdateTitle::set_injection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  injection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.UpdateTitle.injection_id)
}
inline void InjectionOperation_UpdateTitle::set_injection_id(const char* value, size_t size) {
  
  injection_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.UpdateTitle.injection_id)
}
inline std::string* InjectionOperation_UpdateTitle::_internal_mutable_injection_id() {
  
  return injection_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation_UpdateTitle::release_injection_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.UpdateTitle.injection_id)
  
  return injection_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InjectionOperation_UpdateTitle::set_allocated_injection_id(std::string* injection_id) {
  if (injection_id != nullptr) {
    
  } else {
    
  }
  injection_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), injection_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.UpdateTitle.injection_id)
}

// string title = 2;
inline void InjectionOperation_UpdateTitle::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InjectionOperation_UpdateTitle::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.UpdateTitle.title)
  return _internal_title();
}
inline void InjectionOperation_UpdateTitle::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.UpdateTitle.title)
}
inline std::string* InjectionOperation_UpdateTitle::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.UpdateTitle.title)
  return _internal_mutable_title();
}
inline const std::string& InjectionOperation_UpdateTitle::_internal_title() const {
  return title_.GetNoArena();
}
inline void InjectionOperation_UpdateTitle::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation_UpdateTitle::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.UpdateTitle.title)
}
inline void InjectionOperation_UpdateTitle::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.UpdateTitle.title)
}
inline void InjectionOperation_UpdateTitle::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.UpdateTitle.title)
}
inline std::string* InjectionOperation_UpdateTitle::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation_UpdateTitle::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.UpdateTitle.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InjectionOperation_UpdateTitle::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.UpdateTitle.title)
}

// -------------------------------------------------------------------

// InjectionOperation

// .google.protobuf.Empty request_injections = 1;
inline bool InjectionOperation::_internal_has_request_injections() const {
  return which_case() == kRequestInjections;
}
inline bool InjectionOperation::has_request_injections() const {
  return _internal_has_request_injections();
}
inline void InjectionOperation::set_has_request_injections() {
  _oneof_case_[0] = kRequestInjections;
}
inline PROTOBUF_NAMESPACE_ID::Empty* InjectionOperation::release_request_injections() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.request_injections)
  if (_internal_has_request_injections()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_injections_;
    which_.request_injections_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& InjectionOperation::_internal_request_injections() const {
  return _internal_has_request_injections()
      ? *which_.request_injections_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& InjectionOperation::request_injections() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.request_injections)
  return _internal_request_injections();
}
inline PROTOBUF_NAMESPACE_ID::Empty* InjectionOperation::_internal_mutable_request_injections() {
  if (!_internal_has_request_injections()) {
    clear_which();
    set_has_request_injections();
    which_.request_injections_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_injections_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* InjectionOperation::mutable_request_injections() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.request_injections)
  return _internal_mutable_request_injections();
}

// .inhumate.rti.proto.InjectionOperation.Inject inject = 3;
inline bool InjectionOperation::_internal_has_inject() const {
  return which_case() == kInject;
}
inline bool InjectionOperation::has_inject() const {
  return _internal_has_inject();
}
inline void InjectionOperation::set_has_inject() {
  _oneof_case_[0] = kInject;
}
inline void InjectionOperation::clear_inject() {
  if (_internal_has_inject()) {
    delete which_.inject_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::InjectionOperation_Inject* InjectionOperation::release_inject() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.inject)
  if (_internal_has_inject()) {
    clear_has_which();
      ::inhumate::rti::proto::InjectionOperation_Inject* temp = which_.inject_;
    which_.inject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::InjectionOperation_Inject& InjectionOperation::_internal_inject() const {
  return _internal_has_inject()
      ? *which_.inject_
      : *reinterpret_cast< ::inhumate::rti::proto::InjectionOperation_Inject*>(&::inhumate::rti::proto::_InjectionOperation_Inject_default_instance_);
}
inline const ::inhumate::rti::proto::InjectionOperation_Inject& InjectionOperation::inject() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.inject)
  return _internal_inject();
}
inline ::inhumate::rti::proto::InjectionOperation_Inject* InjectionOperation::_internal_mutable_inject() {
  if (!_internal_has_inject()) {
    clear_which();
    set_has_inject();
    which_.inject_ = CreateMaybeMessage< ::inhumate::rti::proto::InjectionOperation_Inject >(
        GetArenaNoVirtual());
  }
  return which_.inject_;
}
inline ::inhumate::rti::proto::InjectionOperation_Inject* InjectionOperation::mutable_inject() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.inject)
  return _internal_mutable_inject();
}

// string disable = 4;
inline bool InjectionOperation::_internal_has_disable() const {
  return which_case() == kDisable;
}
inline void InjectionOperation::set_has_disable() {
  _oneof_case_[0] = kDisable;
}
inline void InjectionOperation::clear_disable() {
  if (_internal_has_disable()) {
    which_.disable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& InjectionOperation::disable() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.disable)
  return _internal_disable();
}
inline void InjectionOperation::set_disable(const std::string& value) {
  _internal_set_disable(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.disable)
}
inline std::string* InjectionOperation::mutable_disable() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.disable)
  return _internal_mutable_disable();
}
inline const std::string& InjectionOperation::_internal_disable() const {
  if (_internal_has_disable()) {
    return which_.disable_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InjectionOperation::_internal_set_disable(const std::string& value) {
  if (!_internal_has_disable()) {
    clear_which();
    set_has_disable();
    which_.disable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.disable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation::set_disable(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.disable)
  if (!_internal_has_disable()) {
    clear_which();
    set_has_disable();
    which_.disable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.disable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.disable)
}
inline void InjectionOperation::set_disable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_disable()) {
    clear_which();
    set_has_disable();
    which_.disable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.disable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.disable)
}
inline void InjectionOperation::set_disable(const char* value, size_t size) {
  if (!_internal_has_disable()) {
    clear_which();
    set_has_disable();
    which_.disable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.disable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.disable)
}
inline std::string* InjectionOperation::_internal_mutable_disable() {
  if (!_internal_has_disable()) {
    clear_which();
    set_has_disable();
    which_.disable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.disable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation::release_disable() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.disable)
  if (_internal_has_disable()) {
    clear_has_which();
    return which_.disable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InjectionOperation::set_allocated_disable(std::string* disable) {
  if (has_which()) {
    clear_which();
  }
  if (disable != nullptr) {
    set_has_disable();
    which_.disable_.UnsafeSetDefault(disable);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.disable)
}

// string enable = 5;
inline bool InjectionOperation::_internal_has_enable() const {
  return which_case() == kEnable;
}
inline void InjectionOperation::set_has_enable() {
  _oneof_case_[0] = kEnable;
}
inline void InjectionOperation::clear_enable() {
  if (_internal_has_enable()) {
    which_.enable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& InjectionOperation::enable() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.enable)
  return _internal_enable();
}
inline void InjectionOperation::set_enable(const std::string& value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.enable)
}
inline std::string* InjectionOperation::mutable_enable() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.enable)
  return _internal_mutable_enable();
}
inline const std::string& InjectionOperation::_internal_enable() const {
  if (_internal_has_enable()) {
    return which_.enable_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InjectionOperation::_internal_set_enable(const std::string& value) {
  if (!_internal_has_enable()) {
    clear_which();
    set_has_enable();
    which_.enable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.enable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation::set_enable(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.enable)
  if (!_internal_has_enable()) {
    clear_which();
    set_has_enable();
    which_.enable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.enable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.enable)
}
inline void InjectionOperation::set_enable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_enable()) {
    clear_which();
    set_has_enable();
    which_.enable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.enable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.enable)
}
inline void InjectionOperation::set_enable(const char* value, size_t size) {
  if (!_internal_has_enable()) {
    clear_which();
    set_has_enable();
    which_.enable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.enable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.enable)
}
inline std::string* InjectionOperation::_internal_mutable_enable() {
  if (!_internal_has_enable()) {
    clear_which();
    set_has_enable();
    which_.enable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.enable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation::release_enable() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.enable)
  if (_internal_has_enable()) {
    clear_has_which();
    return which_.enable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InjectionOperation::set_allocated_enable(std::string* enable) {
  if (has_which()) {
    clear_which();
  }
  if (enable != nullptr) {
    set_has_enable();
    which_.enable_.UnsafeSetDefault(enable);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.enable)
}

// string start = 6;
inline bool InjectionOperation::_internal_has_start() const {
  return which_case() == kStart;
}
inline void InjectionOperation::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void InjectionOperation::clear_start() {
  if (_internal_has_start()) {
    which_.start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& InjectionOperation::start() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.start)
  return _internal_start();
}
inline void InjectionOperation::set_start(const std::string& value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.start)
}
inline std::string* InjectionOperation::mutable_start() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.start)
  return _internal_mutable_start();
}
inline const std::string& InjectionOperation::_internal_start() const {
  if (_internal_has_start()) {
    return which_.start_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InjectionOperation::_internal_set_start(const std::string& value) {
  if (!_internal_has_start()) {
    clear_which();
    set_has_start();
    which_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation::set_start(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.start)
  if (!_internal_has_start()) {
    clear_which();
    set_has_start();
    which_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.start)
}
inline void InjectionOperation::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_start()) {
    clear_which();
    set_has_start();
    which_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.start)
}
inline void InjectionOperation::set_start(const char* value, size_t size) {
  if (!_internal_has_start()) {
    clear_which();
    set_has_start();
    which_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.start)
}
inline std::string* InjectionOperation::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_which();
    set_has_start();
    which_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.start_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation::release_start() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.start)
  if (_internal_has_start()) {
    clear_has_which();
    return which_.start_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InjectionOperation::set_allocated_start(std::string* start) {
  if (has_which()) {
    clear_which();
  }
  if (start != nullptr) {
    set_has_start();
    which_.start_.UnsafeSetDefault(start);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.start)
}

// string end = 7;
inline bool InjectionOperation::_internal_has_end() const {
  return which_case() == kEnd;
}
inline void InjectionOperation::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline void InjectionOperation::clear_end() {
  if (_internal_has_end()) {
    which_.end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& InjectionOperation::end() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.end)
  return _internal_end();
}
inline void InjectionOperation::set_end(const std::string& value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.end)
}
inline std::string* InjectionOperation::mutable_end() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.end)
  return _internal_mutable_end();
}
inline const std::string& InjectionOperation::_internal_end() const {
  if (_internal_has_end()) {
    return which_.end_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InjectionOperation::_internal_set_end(const std::string& value) {
  if (!_internal_has_end()) {
    clear_which();
    set_has_end();
    which_.end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation::set_end(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.end)
  if (!_internal_has_end()) {
    clear_which();
    set_has_end();
    which_.end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.end)
}
inline void InjectionOperation::set_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_end()) {
    clear_which();
    set_has_end();
    which_.end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.end)
}
inline void InjectionOperation::set_end(const char* value, size_t size) {
  if (!_internal_has_end()) {
    clear_which();
    set_has_end();
    which_.end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.end)
}
inline std::string* InjectionOperation::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_which();
    set_has_end();
    which_.end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation::release_end() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.end)
  if (_internal_has_end()) {
    clear_has_which();
    return which_.end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InjectionOperation::set_allocated_end(std::string* end) {
  if (has_which()) {
    clear_which();
  }
  if (end != nullptr) {
    set_has_end();
    which_.end_.UnsafeSetDefault(end);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.end)
}

// string stop = 8;
inline bool InjectionOperation::_internal_has_stop() const {
  return which_case() == kStop;
}
inline void InjectionOperation::set_has_stop() {
  _oneof_case_[0] = kStop;
}
inline void InjectionOperation::clear_stop() {
  if (_internal_has_stop()) {
    which_.stop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& InjectionOperation::stop() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.stop)
  return _internal_stop();
}
inline void InjectionOperation::set_stop(const std::string& value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.stop)
}
inline std::string* InjectionOperation::mutable_stop() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.stop)
  return _internal_mutable_stop();
}
inline const std::string& InjectionOperation::_internal_stop() const {
  if (_internal_has_stop()) {
    return which_.stop_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InjectionOperation::_internal_set_stop(const std::string& value) {
  if (!_internal_has_stop()) {
    clear_which();
    set_has_stop();
    which_.stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.stop_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation::set_stop(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.stop)
  if (!_internal_has_stop()) {
    clear_which();
    set_has_stop();
    which_.stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.stop_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.stop)
}
inline void InjectionOperation::set_stop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_stop()) {
    clear_which();
    set_has_stop();
    which_.stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.stop_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.stop)
}
inline void InjectionOperation::set_stop(const char* value, size_t size) {
  if (!_internal_has_stop()) {
    clear_which();
    set_has_stop();
    which_.stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.stop_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.stop)
}
inline std::string* InjectionOperation::_internal_mutable_stop() {
  if (!_internal_has_stop()) {
    clear_which();
    set_has_stop();
    which_.stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.stop_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation::release_stop() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.stop)
  if (_internal_has_stop()) {
    clear_has_which();
    return which_.stop_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InjectionOperation::set_allocated_stop(std::string* stop) {
  if (has_which()) {
    clear_which();
  }
  if (stop != nullptr) {
    set_has_stop();
    which_.stop_.UnsafeSetDefault(stop);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.stop)
}

// string cancel = 9;
inline bool InjectionOperation::_internal_has_cancel() const {
  return which_case() == kCancel;
}
inline void InjectionOperation::set_has_cancel() {
  _oneof_case_[0] = kCancel;
}
inline void InjectionOperation::clear_cancel() {
  if (_internal_has_cancel()) {
    which_.cancel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& InjectionOperation::cancel() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.cancel)
  return _internal_cancel();
}
inline void InjectionOperation::set_cancel(const std::string& value) {
  _internal_set_cancel(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.cancel)
}
inline std::string* InjectionOperation::mutable_cancel() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.cancel)
  return _internal_mutable_cancel();
}
inline const std::string& InjectionOperation::_internal_cancel() const {
  if (_internal_has_cancel()) {
    return which_.cancel_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InjectionOperation::_internal_set_cancel(const std::string& value) {
  if (!_internal_has_cancel()) {
    clear_which();
    set_has_cancel();
    which_.cancel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.cancel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation::set_cancel(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.cancel)
  if (!_internal_has_cancel()) {
    clear_which();
    set_has_cancel();
    which_.cancel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.cancel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.cancel)
}
inline void InjectionOperation::set_cancel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_cancel()) {
    clear_which();
    set_has_cancel();
    which_.cancel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.cancel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.cancel)
}
inline void InjectionOperation::set_cancel(const char* value, size_t size) {
  if (!_internal_has_cancel()) {
    clear_which();
    set_has_cancel();
    which_.cancel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.cancel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.cancel)
}
inline std::string* InjectionOperation::_internal_mutable_cancel() {
  if (!_internal_has_cancel()) {
    clear_which();
    set_has_cancel();
    which_.cancel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.cancel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation::release_cancel() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.cancel)
  if (_internal_has_cancel()) {
    clear_has_which();
    return which_.cancel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InjectionOperation::set_allocated_cancel(std::string* cancel) {
  if (has_which()) {
    clear_which();
  }
  if (cancel != nullptr) {
    set_has_cancel();
    which_.cancel_.UnsafeSetDefault(cancel);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.cancel)
}

// string clear = 10;
inline bool InjectionOperation::_internal_has_clear() const {
  return which_case() == kClear;
}
inline void InjectionOperation::set_has_clear() {
  _oneof_case_[0] = kClear;
}
inline void InjectionOperation::clear_clear() {
  if (_internal_has_clear()) {
    which_.clear_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_which();
  }
}
inline const std::string& InjectionOperation::clear() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.clear)
  return _internal_clear();
}
inline void InjectionOperation::set_clear(const std::string& value) {
  _internal_set_clear(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.clear)
}
inline std::string* InjectionOperation::mutable_clear() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.clear)
  return _internal_mutable_clear();
}
inline const std::string& InjectionOperation::_internal_clear() const {
  if (_internal_has_clear()) {
    return which_.clear_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void InjectionOperation::_internal_set_clear(const std::string& value) {
  if (!_internal_has_clear()) {
    clear_which();
    set_has_clear();
    which_.clear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.clear_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InjectionOperation::set_clear(std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.InjectionOperation.clear)
  if (!_internal_has_clear()) {
    clear_which();
    set_has_clear();
    which_.clear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.clear_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.InjectionOperation.clear)
}
inline void InjectionOperation::set_clear(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_clear()) {
    clear_which();
    set_has_clear();
    which_.clear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.clear_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.InjectionOperation.clear)
}
inline void InjectionOperation::set_clear(const char* value, size_t size) {
  if (!_internal_has_clear()) {
    clear_which();
    set_has_clear();
    which_.clear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  which_.clear_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.InjectionOperation.clear)
}
inline std::string* InjectionOperation::_internal_mutable_clear() {
  if (!_internal_has_clear()) {
    clear_which();
    set_has_clear();
    which_.clear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return which_.clear_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InjectionOperation::release_clear() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.clear)
  if (_internal_has_clear()) {
    clear_has_which();
    return which_.clear_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void InjectionOperation::set_allocated_clear(std::string* clear) {
  if (has_which()) {
    clear_which();
  }
  if (clear != nullptr) {
    set_has_clear();
    which_.clear_.UnsafeSetDefault(clear);
  }
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.InjectionOperation.clear)
}

// .inhumate.rti.proto.InjectionOperation.Schedule schedule = 11;
inline bool InjectionOperation::_internal_has_schedule() const {
  return which_case() == kSchedule;
}
inline bool InjectionOperation::has_schedule() const {
  return _internal_has_schedule();
}
inline void InjectionOperation::set_has_schedule() {
  _oneof_case_[0] = kSchedule;
}
inline void InjectionOperation::clear_schedule() {
  if (_internal_has_schedule()) {
    delete which_.schedule_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::InjectionOperation_Schedule* InjectionOperation::release_schedule() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.schedule)
  if (_internal_has_schedule()) {
    clear_has_which();
      ::inhumate::rti::proto::InjectionOperation_Schedule* temp = which_.schedule_;
    which_.schedule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::InjectionOperation_Schedule& InjectionOperation::_internal_schedule() const {
  return _internal_has_schedule()
      ? *which_.schedule_
      : *reinterpret_cast< ::inhumate::rti::proto::InjectionOperation_Schedule*>(&::inhumate::rti::proto::_InjectionOperation_Schedule_default_instance_);
}
inline const ::inhumate::rti::proto::InjectionOperation_Schedule& InjectionOperation::schedule() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.schedule)
  return _internal_schedule();
}
inline ::inhumate::rti::proto::InjectionOperation_Schedule* InjectionOperation::_internal_mutable_schedule() {
  if (!_internal_has_schedule()) {
    clear_which();
    set_has_schedule();
    which_.schedule_ = CreateMaybeMessage< ::inhumate::rti::proto::InjectionOperation_Schedule >(
        GetArenaNoVirtual());
  }
  return which_.schedule_;
}
inline ::inhumate::rti::proto::InjectionOperation_Schedule* InjectionOperation::mutable_schedule() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.schedule)
  return _internal_mutable_schedule();
}

// .inhumate.rti.proto.InjectionOperation.UpdateTitle update_title = 12;
inline bool InjectionOperation::_internal_has_update_title() const {
  return which_case() == kUpdateTitle;
}
inline bool InjectionOperation::has_update_title() const {
  return _internal_has_update_title();
}
inline void InjectionOperation::set_has_update_title() {
  _oneof_case_[0] = kUpdateTitle;
}
inline void InjectionOperation::clear_update_title() {
  if (_internal_has_update_title()) {
    delete which_.update_title_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::InjectionOperation_UpdateTitle* InjectionOperation::release_update_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectionOperation.update_title)
  if (_internal_has_update_title()) {
    clear_has_which();
      ::inhumate::rti::proto::InjectionOperation_UpdateTitle* temp = which_.update_title_;
    which_.update_title_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::InjectionOperation_UpdateTitle& InjectionOperation::_internal_update_title() const {
  return _internal_has_update_title()
      ? *which_.update_title_
      : *reinterpret_cast< ::inhumate::rti::proto::InjectionOperation_UpdateTitle*>(&::inhumate::rti::proto::_InjectionOperation_UpdateTitle_default_instance_);
}
inline const ::inhumate::rti::proto::InjectionOperation_UpdateTitle& InjectionOperation::update_title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectionOperation.update_title)
  return _internal_update_title();
}
inline ::inhumate::rti::proto::InjectionOperation_UpdateTitle* InjectionOperation::_internal_mutable_update_title() {
  if (!_internal_has_update_title()) {
    clear_which();
    set_has_update_title();
    which_.update_title_ = CreateMaybeMessage< ::inhumate::rti::proto::InjectionOperation_UpdateTitle >(
        GetArenaNoVirtual());
  }
  return which_.update_title_;
}
inline ::inhumate::rti::proto::InjectionOperation_UpdateTitle* InjectionOperation::mutable_update_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectionOperation.update_title)
  return _internal_mutable_update_title();
}

inline bool InjectionOperation::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void InjectionOperation::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline InjectionOperation::WhichCase InjectionOperation::which_case() const {
  return InjectionOperation::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Injection

// string id = 1;
inline void Injection::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Injection::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.id)
  return _internal_id();
}
inline void Injection::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.id)
}
inline std::string* Injection::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injection.id)
  return _internal_mutable_id();
}
inline const std::string& Injection::_internal_id() const {
  return id_.GetNoArena();
}
inline void Injection::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Injection::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Injection.id)
}
inline void Injection::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Injection.id)
}
inline void Injection::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Injection.id)
}
inline std::string* Injection::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Injection::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injection.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Injection::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Injection.id)
}

// string injectable = 2;
inline void Injection::clear_injectable() {
  injectable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Injection::injectable() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.injectable)
  return _internal_injectable();
}
inline void Injection::set_injectable(const std::string& value) {
  _internal_set_injectable(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.injectable)
}
inline std::string* Injection::mutable_injectable() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injection.injectable)
  return _internal_mutable_injectable();
}
inline const std::string& Injection::_internal_injectable() const {
  return injectable_.GetNoArena();
}
inline void Injection::_internal_set_injectable(const std::string& value) {
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Injection::set_injectable(std::string&& value) {
  
  injectable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Injection.injectable)
}
inline void Injection::set_injectable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Injection.injectable)
}
inline void Injection::set_injectable(const char* value, size_t size) {
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Injection.injectable)
}
inline std::string* Injection::_internal_mutable_injectable() {
  
  return injectable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Injection::release_injectable() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injection.injectable)
  
  return injectable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Injection::set_allocated_injectable(std::string* injectable) {
  if (injectable != nullptr) {
    
  } else {
    
  }
  injectable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), injectable);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Injection.injectable)
}

// .inhumate.rti.proto.Injection.State state = 3;
inline void Injection::clear_state() {
  state_ = 0;
}
inline ::inhumate::rti::proto::Injection_State Injection::_internal_state() const {
  return static_cast< ::inhumate::rti::proto::Injection_State >(state_);
}
inline ::inhumate::rti::proto::Injection_State Injection::state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.state)
  return _internal_state();
}
inline void Injection::_internal_set_state(::inhumate::rti::proto::Injection_State value) {
  
  state_ = value;
}
inline void Injection::set_state(::inhumate::rti::proto::Injection_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.state)
}

// string title = 4;
inline void Injection::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Injection::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.title)
  return _internal_title();
}
inline void Injection::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.title)
}
inline std::string* Injection::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injection.title)
  return _internal_mutable_title();
}
inline const std::string& Injection::_internal_title() const {
  return title_.GetNoArena();
}
inline void Injection::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Injection::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Injection.title)
}
inline void Injection::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Injection.title)
}
inline void Injection::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Injection.title)
}
inline std::string* Injection::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Injection::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injection.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Injection::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Injection.title)
}

// map<string, string> parameter_values = 5;
inline int Injection::_internal_parameter_values_size() const {
  return parameter_values_.size();
}
inline int Injection::parameter_values_size() const {
  return _internal_parameter_values_size();
}
inline void Injection::clear_parameter_values() {
  parameter_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Injection::_internal_parameter_values() const {
  return parameter_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Injection::parameter_values() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.Injection.parameter_values)
  return _internal_parameter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Injection::_internal_mutable_parameter_values() {
  return parameter_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Injection::mutable_parameter_values() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.Injection.parameter_values)
  return _internal_mutable_parameter_values();
}

// double enable_time = 10;
inline void Injection::clear_enable_time() {
  enable_time_ = 0;
}
inline double Injection::_internal_enable_time() const {
  return enable_time_;
}
inline double Injection::enable_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.enable_time)
  return _internal_enable_time();
}
inline void Injection::_internal_set_enable_time(double value) {
  
  enable_time_ = value;
}
inline void Injection::set_enable_time(double value) {
  _internal_set_enable_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.enable_time)
}

// double start_time = 11;
inline void Injection::clear_start_time() {
  start_time_ = 0;
}
inline double Injection::_internal_start_time() const {
  return start_time_;
}
inline double Injection::start_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.start_time)
  return _internal_start_time();
}
inline void Injection::_internal_set_start_time(double value) {
  
  start_time_ = value;
}
inline void Injection::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.start_time)
}

// double end_time = 12;
inline void Injection::clear_end_time() {
  end_time_ = 0;
}
inline double Injection::_internal_end_time() const {
  return end_time_;
}
inline double Injection::end_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.end_time)
  return _internal_end_time();
}
inline void Injection::_internal_set_end_time(double value) {
  
  end_time_ = value;
}
inline void Injection::set_end_time(double value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.end_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::inhumate::rti::proto::Injection_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inhumate::rti::proto::Injection_State>() {
  return ::inhumate::rti::proto::Injection_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Injections_2eproto
