// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Measurement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Measurement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Measurement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Measurement_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Measurement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Measurement_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Measurement;
class MeasurementDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class Measurement_Window;
class Measurement_WindowDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Measurement_WindowDefaultTypeInternal _Measurement_Window_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Measurement* Arena::CreateMaybeMessage<::inhumate::rti::proto::Measurement>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Measurement_Window* Arena::CreateMaybeMessage<::inhumate::rti::proto::Measurement_Window>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Measurement_Window :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Measurement.Window) */ {
 public:
  Measurement_Window();
  virtual ~Measurement_Window();

  Measurement_Window(const Measurement_Window& from);
  Measurement_Window(Measurement_Window&& from) noexcept
    : Measurement_Window() {
    *this = ::std::move(from);
  }

  inline Measurement_Window& operator=(const Measurement_Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline Measurement_Window& operator=(Measurement_Window&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Measurement_Window& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurement_Window* internal_default_instance() {
    return reinterpret_cast<const Measurement_Window*>(
               &_Measurement_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Measurement_Window& a, Measurement_Window& b) {
    a.Swap(&b);
  }
  inline void Swap(Measurement_Window* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Measurement_Window* New() const final {
    return CreateMaybeMessage<Measurement_Window>(nullptr);
  }

  Measurement_Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Measurement_Window>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Measurement_Window& from);
  void MergeFrom(const Measurement_Window& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurement_Window* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Measurement.Window";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Measurement_2eproto);
    return ::descriptor_table_Measurement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanFieldNumber = 1,
    kMaxFieldNumber = 2,
    kMinFieldNumber = 3,
    kDurationFieldNumber = 4,
    kCountFieldNumber = 5,
  };
  // float mean = 1;
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // float max = 2;
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // float min = 3;
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // float duration = 4;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // int32 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Measurement.Window)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float mean_;
  float max_;
  float min_;
  float duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Measurement_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Measurement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Measurement) */ {
 public:
  Measurement();
  virtual ~Measurement();

  Measurement(const Measurement& from);
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Measurement& operator=(Measurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Measurement& default_instance();

  enum WhichCase {
    kValue = 3,
    kWindow = 4,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }
  inline void Swap(Measurement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Measurement* New() const final {
    return CreateMaybeMessage<Measurement>(nullptr);
  }

  Measurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Measurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Measurement& from);
  void MergeFrom(const Measurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Measurement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Measurement_2eproto);
    return ::descriptor_table_Measurement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Measurement_Window Window;

  // accessors -------------------------------------------------------

  enum : int {
    kMeasureIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kValueFieldNumber = 3,
    kWindowFieldNumber = 4,
  };
  // string measure_id = 1;
  void clear_measure_id();
  const std::string& measure_id() const;
  void set_measure_id(const std::string& value);
  void set_measure_id(std::string&& value);
  void set_measure_id(const char* value);
  void set_measure_id(const char* value, size_t size);
  std::string* mutable_measure_id();
  std::string* release_measure_id();
  void set_allocated_measure_id(std::string* measure_id);
  private:
  const std::string& _internal_measure_id() const;
  void _internal_set_measure_id(const std::string& value);
  std::string* _internal_mutable_measure_id();
  public:

  // string client_id = 2;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // float value = 3;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // .inhumate.rti.proto.Measurement.Window window = 4;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::inhumate::rti::proto::Measurement_Window& window() const;
  ::inhumate::rti::proto::Measurement_Window* release_window();
  ::inhumate::rti::proto::Measurement_Window* mutable_window();
  void set_allocated_window(::inhumate::rti::proto::Measurement_Window* window);
  private:
  const ::inhumate::rti::proto::Measurement_Window& _internal_window() const;
  ::inhumate::rti::proto::Measurement_Window* _internal_mutable_window();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Measurement)
 private:
  class _Internal;
  void set_has_value();
  void set_has_window();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr measure_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  union WhichUnion {
    WhichUnion() {}
    float value_;
    ::inhumate::rti::proto::Measurement_Window* window_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Measurement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Measurement_Window

// float mean = 1;
inline void Measurement_Window::clear_mean() {
  mean_ = 0;
}
inline float Measurement_Window::_internal_mean() const {
  return mean_;
}
inline float Measurement_Window::mean() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.Window.mean)
  return _internal_mean();
}
inline void Measurement_Window::_internal_set_mean(float value) {
  
  mean_ = value;
}
inline void Measurement_Window::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measurement.Window.mean)
}

// float max = 2;
inline void Measurement_Window::clear_max() {
  max_ = 0;
}
inline float Measurement_Window::_internal_max() const {
  return max_;
}
inline float Measurement_Window::max() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.Window.max)
  return _internal_max();
}
inline void Measurement_Window::_internal_set_max(float value) {
  
  max_ = value;
}
inline void Measurement_Window::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measurement.Window.max)
}

// float min = 3;
inline void Measurement_Window::clear_min() {
  min_ = 0;
}
inline float Measurement_Window::_internal_min() const {
  return min_;
}
inline float Measurement_Window::min() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.Window.min)
  return _internal_min();
}
inline void Measurement_Window::_internal_set_min(float value) {
  
  min_ = value;
}
inline void Measurement_Window::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measurement.Window.min)
}

// float duration = 4;
inline void Measurement_Window::clear_duration() {
  duration_ = 0;
}
inline float Measurement_Window::_internal_duration() const {
  return duration_;
}
inline float Measurement_Window::duration() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.Window.duration)
  return _internal_duration();
}
inline void Measurement_Window::_internal_set_duration(float value) {
  
  duration_ = value;
}
inline void Measurement_Window::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measurement.Window.duration)
}

// int32 count = 5;
inline void Measurement_Window::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement_Window::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Measurement_Window::count() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.Window.count)
  return _internal_count();
}
inline void Measurement_Window::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void Measurement_Window::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measurement.Window.count)
}

// -------------------------------------------------------------------

// Measurement

// string measure_id = 1;
inline void Measurement::clear_measure_id() {
  measure_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measurement::measure_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.measure_id)
  return _internal_measure_id();
}
inline void Measurement::set_measure_id(const std::string& value) {
  _internal_set_measure_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measurement.measure_id)
}
inline std::string* Measurement::mutable_measure_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measurement.measure_id)
  return _internal_mutable_measure_id();
}
inline const std::string& Measurement::_internal_measure_id() const {
  return measure_id_.GetNoArena();
}
inline void Measurement::_internal_set_measure_id(const std::string& value) {
  
  measure_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measurement::set_measure_id(std::string&& value) {
  
  measure_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Measurement.measure_id)
}
inline void Measurement::set_measure_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  measure_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Measurement.measure_id)
}
inline void Measurement::set_measure_id(const char* value, size_t size) {
  
  measure_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Measurement.measure_id)
}
inline std::string* Measurement::_internal_mutable_measure_id() {
  
  return measure_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measurement::release_measure_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measurement.measure_id)
  
  return measure_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measurement::set_allocated_measure_id(std::string* measure_id) {
  if (measure_id != nullptr) {
    
  } else {
    
  }
  measure_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), measure_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Measurement.measure_id)
}

// string client_id = 2;
inline void Measurement::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measurement::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.client_id)
  return _internal_client_id();
}
inline void Measurement::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measurement.client_id)
}
inline std::string* Measurement::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measurement.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& Measurement::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void Measurement::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measurement::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Measurement.client_id)
}
inline void Measurement::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Measurement.client_id)
}
inline void Measurement::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Measurement.client_id)
}
inline std::string* Measurement::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measurement::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measurement.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measurement::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Measurement.client_id)
}

// float value = 3;
inline bool Measurement::_internal_has_value() const {
  return which_case() == kValue;
}
inline void Measurement::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void Measurement::clear_value() {
  if (_internal_has_value()) {
    which_.value_ = 0;
    clear_has_which();
  }
}
inline float Measurement::_internal_value() const {
  if (_internal_has_value()) {
    return which_.value_;
  }
  return 0;
}
inline void Measurement::_internal_set_value(float value) {
  if (!_internal_has_value()) {
    clear_which();
    set_has_value();
  }
  which_.value_ = value;
}
inline float Measurement::value() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.value)
  return _internal_value();
}
inline void Measurement::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measurement.value)
}

// .inhumate.rti.proto.Measurement.Window window = 4;
inline bool Measurement::_internal_has_window() const {
  return which_case() == kWindow;
}
inline bool Measurement::has_window() const {
  return _internal_has_window();
}
inline void Measurement::set_has_window() {
  _oneof_case_[0] = kWindow;
}
inline void Measurement::clear_window() {
  if (_internal_has_window()) {
    delete which_.window_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Measurement_Window* Measurement::release_window() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measurement.window)
  if (_internal_has_window()) {
    clear_has_which();
      ::inhumate::rti::proto::Measurement_Window* temp = which_.window_;
    which_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Measurement_Window& Measurement::_internal_window() const {
  return _internal_has_window()
      ? *which_.window_
      : *reinterpret_cast< ::inhumate::rti::proto::Measurement_Window*>(&::inhumate::rti::proto::_Measurement_Window_default_instance_);
}
inline const ::inhumate::rti::proto::Measurement_Window& Measurement::window() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measurement.window)
  return _internal_window();
}
inline ::inhumate::rti::proto::Measurement_Window* Measurement::_internal_mutable_window() {
  if (!_internal_has_window()) {
    clear_which();
    set_has_window();
    which_.window_ = CreateMaybeMessage< ::inhumate::rti::proto::Measurement_Window >(
        GetArenaNoVirtual());
  }
  return which_.window_;
}
inline ::inhumate::rti::proto::Measurement_Window* Measurement::mutable_window() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measurement.window)
  return _internal_mutable_window();
}

inline bool Measurement::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void Measurement::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline Measurement::WhichCase Measurement::which_case() const {
  return Measurement::WhichCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Measurement_2eproto
