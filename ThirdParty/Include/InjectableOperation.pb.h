// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InjectableOperation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_InjectableOperation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_InjectableOperation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_InjectableOperation_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_InjectableOperation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InjectableOperation_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class InjectableOperation;
class InjectableOperationDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectableOperationDefaultTypeInternal _InjectableOperation_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::InjectableOperation* Arena::CreateMaybeMessage<::inhumate::rti::proto::InjectableOperation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT InjectableOperation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.InjectableOperation) */ {
 public:
  InjectableOperation();
  virtual ~InjectableOperation();

  InjectableOperation(const InjectableOperation& from);
  InjectableOperation(InjectableOperation&& from) noexcept
    : InjectableOperation() {
    *this = ::std::move(from);
  }

  inline InjectableOperation& operator=(const InjectableOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectableOperation& operator=(InjectableOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InjectableOperation& default_instance();

  enum WhichCase {
    kRequestUpdate = 1,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectableOperation* internal_default_instance() {
    return reinterpret_cast<const InjectableOperation*>(
               &_InjectableOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InjectableOperation& a, InjectableOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(InjectableOperation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InjectableOperation* New() const final {
    return CreateMaybeMessage<InjectableOperation>(nullptr);
  }

  InjectableOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InjectableOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InjectableOperation& from);
  void MergeFrom(const InjectableOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InjectableOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.InjectableOperation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_InjectableOperation_2eproto);
    return ::descriptor_table_InjectableOperation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestUpdateFieldNumber = 1,
  };
  // .google.protobuf.Empty request_update = 1;
  bool has_request_update() const;
  private:
  bool _internal_has_request_update() const;
  public:
  void clear_request_update();
  const PROTOBUF_NAMESPACE_ID::Empty& request_update() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_update();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_update();
  void set_allocated_request_update(PROTOBUF_NAMESPACE_ID::Empty* request_update);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_update() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_update();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.InjectableOperation)
 private:
  class _Internal;
  void set_has_request_update();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_update_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_InjectableOperation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InjectableOperation

// .google.protobuf.Empty request_update = 1;
inline bool InjectableOperation::_internal_has_request_update() const {
  return which_case() == kRequestUpdate;
}
inline bool InjectableOperation::has_request_update() const {
  return _internal_has_request_update();
}
inline void InjectableOperation::set_has_request_update() {
  _oneof_case_[0] = kRequestUpdate;
}
inline PROTOBUF_NAMESPACE_ID::Empty* InjectableOperation::release_request_update() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.InjectableOperation.request_update)
  if (_internal_has_request_update()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_update_;
    which_.request_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& InjectableOperation::_internal_request_update() const {
  return _internal_has_request_update()
      ? *which_.request_update_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& InjectableOperation::request_update() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.InjectableOperation.request_update)
  return _internal_request_update();
}
inline PROTOBUF_NAMESPACE_ID::Empty* InjectableOperation::_internal_mutable_request_update() {
  if (!_internal_has_request_update()) {
    clear_which();
    set_has_request_update();
    which_.request_update_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_update_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* InjectableOperation::mutable_request_update() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.InjectableOperation.request_update)
  return _internal_mutable_request_update();
}

inline bool InjectableOperation::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void InjectableOperation::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline InjectableOperation::WhichCase InjectableOperation::which_case() const {
  return InjectableOperation::WhichCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_InjectableOperation_2eproto
