// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scenarios.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Scenarios_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Scenarios_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "Parameter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Scenarios_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Scenarios_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Scenarios_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Scenario;
class ScenarioDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ScenarioDefaultTypeInternal _Scenario_default_instance_;
class Scenarios;
class ScenariosDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ScenariosDefaultTypeInternal _Scenarios_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Scenario* Arena::CreateMaybeMessage<::inhumate::rti::proto::Scenario>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Scenarios* Arena::CreateMaybeMessage<::inhumate::rti::proto::Scenarios>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Scenarios :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Scenarios) */ {
 public:
  Scenarios();
  virtual ~Scenarios();

  Scenarios(const Scenarios& from);
  Scenarios(Scenarios&& from) noexcept
    : Scenarios() {
    *this = ::std::move(from);
  }

  inline Scenarios& operator=(const Scenarios& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenarios& operator=(Scenarios&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenarios& default_instance();

  enum WhichCase {
    kRequestScenarios = 1,
    kScenario = 2,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scenarios* internal_default_instance() {
    return reinterpret_cast<const Scenarios*>(
               &_Scenarios_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scenarios& a, Scenarios& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenarios* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenarios* New() const final {
    return CreateMaybeMessage<Scenarios>(nullptr);
  }

  Scenarios* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenarios>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenarios& from);
  void MergeFrom(const Scenarios& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenarios* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Scenarios";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Scenarios_2eproto);
    return ::descriptor_table_Scenarios_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestScenariosFieldNumber = 1,
    kScenarioFieldNumber = 2,
  };
  // .google.protobuf.Empty request_scenarios = 1;
  bool has_request_scenarios() const;
  private:
  bool _internal_has_request_scenarios() const;
  public:
  void clear_request_scenarios();
  const PROTOBUF_NAMESPACE_ID::Empty& request_scenarios() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_scenarios();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_scenarios();
  void set_allocated_request_scenarios(PROTOBUF_NAMESPACE_ID::Empty* request_scenarios);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_scenarios() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_scenarios();
  public:

  // .inhumate.rti.proto.Scenario scenario = 2;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::inhumate::rti::proto::Scenario& scenario() const;
  ::inhumate::rti::proto::Scenario* release_scenario();
  ::inhumate::rti::proto::Scenario* mutable_scenario();
  void set_allocated_scenario(::inhumate::rti::proto::Scenario* scenario);
  private:
  const ::inhumate::rti::proto::Scenario& _internal_scenario() const;
  ::inhumate::rti::proto::Scenario* _internal_mutable_scenario();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Scenarios)
 private:
  class _Internal;
  void set_has_request_scenarios();
  void set_has_scenario();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_scenarios_;
    ::inhumate::rti::proto::Scenario* scenario_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Scenarios_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Scenario :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Scenario) */ {
 public:
  Scenario();
  virtual ~Scenario();

  Scenario(const Scenario& from);
  Scenario(Scenario&& from) noexcept
    : Scenario() {
    *this = ::std::move(from);
  }

  inline Scenario& operator=(const Scenario& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario& operator=(Scenario&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenario& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scenario* internal_default_instance() {
    return reinterpret_cast<const Scenario*>(
               &_Scenario_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Scenario& a, Scenario& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenario* New() const final {
    return CreateMaybeMessage<Scenario>(nullptr);
  }

  Scenario* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenario>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenario& from);
  void MergeFrom(const Scenario& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Scenario";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Scenarios_2eproto);
    return ::descriptor_table_Scenarios_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 3,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated .inhumate.rti.proto.Parameter parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::inhumate::rti::proto::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >*
      mutable_parameters();
  private:
  const ::inhumate::rti::proto::Parameter& _internal_parameters(int index) const;
  ::inhumate::rti::proto::Parameter* _internal_add_parameters();
  public:
  const ::inhumate::rti::proto::Parameter& parameters(int index) const;
  ::inhumate::rti::proto::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >&
      parameters() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Scenario)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Scenarios_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scenarios

// .google.protobuf.Empty request_scenarios = 1;
inline bool Scenarios::_internal_has_request_scenarios() const {
  return which_case() == kRequestScenarios;
}
inline bool Scenarios::has_request_scenarios() const {
  return _internal_has_request_scenarios();
}
inline void Scenarios::set_has_request_scenarios() {
  _oneof_case_[0] = kRequestScenarios;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Scenarios::release_request_scenarios() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Scenarios.request_scenarios)
  if (_internal_has_request_scenarios()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_scenarios_;
    which_.request_scenarios_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Scenarios::_internal_request_scenarios() const {
  return _internal_has_request_scenarios()
      ? *which_.request_scenarios_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Scenarios::request_scenarios() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Scenarios.request_scenarios)
  return _internal_request_scenarios();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Scenarios::_internal_mutable_request_scenarios() {
  if (!_internal_has_request_scenarios()) {
    clear_which();
    set_has_request_scenarios();
    which_.request_scenarios_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_scenarios_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Scenarios::mutable_request_scenarios() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Scenarios.request_scenarios)
  return _internal_mutable_request_scenarios();
}

// .inhumate.rti.proto.Scenario scenario = 2;
inline bool Scenarios::_internal_has_scenario() const {
  return which_case() == kScenario;
}
inline bool Scenarios::has_scenario() const {
  return _internal_has_scenario();
}
inline void Scenarios::set_has_scenario() {
  _oneof_case_[0] = kScenario;
}
inline void Scenarios::clear_scenario() {
  if (_internal_has_scenario()) {
    delete which_.scenario_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Scenario* Scenarios::release_scenario() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Scenarios.scenario)
  if (_internal_has_scenario()) {
    clear_has_which();
      ::inhumate::rti::proto::Scenario* temp = which_.scenario_;
    which_.scenario_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Scenario& Scenarios::_internal_scenario() const {
  return _internal_has_scenario()
      ? *which_.scenario_
      : *reinterpret_cast< ::inhumate::rti::proto::Scenario*>(&::inhumate::rti::proto::_Scenario_default_instance_);
}
inline const ::inhumate::rti::proto::Scenario& Scenarios::scenario() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Scenarios.scenario)
  return _internal_scenario();
}
inline ::inhumate::rti::proto::Scenario* Scenarios::_internal_mutable_scenario() {
  if (!_internal_has_scenario()) {
    clear_which();
    set_has_scenario();
    which_.scenario_ = CreateMaybeMessage< ::inhumate::rti::proto::Scenario >(
        GetArenaNoVirtual());
  }
  return which_.scenario_;
}
inline ::inhumate::rti::proto::Scenario* Scenarios::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Scenarios.scenario)
  return _internal_mutable_scenario();
}

inline bool Scenarios::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void Scenarios::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline Scenarios::WhichCase Scenarios::which_case() const {
  return Scenarios::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Scenario

// string name = 1;
inline void Scenario::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Scenario::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Scenario.name)
  return _internal_name();
}
inline void Scenario::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Scenario.name)
}
inline std::string* Scenario::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Scenario.name)
  return _internal_mutable_name();
}
inline const std::string& Scenario::_internal_name() const {
  return name_.GetNoArena();
}
inline void Scenario::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Scenario::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Scenario.name)
}
inline void Scenario::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Scenario.name)
}
inline void Scenario::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Scenario.name)
}
inline std::string* Scenario::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Scenario::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Scenario.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Scenario::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Scenario.name)
}

// string description = 2;
inline void Scenario::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Scenario::description() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Scenario.description)
  return _internal_description();
}
inline void Scenario::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Scenario.description)
}
inline std::string* Scenario::mutable_description() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Scenario.description)
  return _internal_mutable_description();
}
inline const std::string& Scenario::_internal_description() const {
  return description_.GetNoArena();
}
inline void Scenario::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Scenario::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Scenario.description)
}
inline void Scenario::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Scenario.description)
}
inline void Scenario::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Scenario.description)
}
inline std::string* Scenario::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Scenario::release_description() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Scenario.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Scenario::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Scenario.description)
}

// repeated .inhumate.rti.proto.Parameter parameters = 3;
inline int Scenario::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Scenario::parameters_size() const {
  return _internal_parameters_size();
}
inline ::inhumate::rti::proto::Parameter* Scenario::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Scenario.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >*
Scenario::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Scenario.parameters)
  return &parameters_;
}
inline const ::inhumate::rti::proto::Parameter& Scenario::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::inhumate::rti::proto::Parameter& Scenario::parameters(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Scenario.parameters)
  return _internal_parameters(index);
}
inline ::inhumate::rti::proto::Parameter* Scenario::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::inhumate::rti::proto::Parameter* Scenario::add_parameters() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Scenario.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >&
Scenario::parameters() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Scenario.parameters)
  return parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Scenarios_2eproto
