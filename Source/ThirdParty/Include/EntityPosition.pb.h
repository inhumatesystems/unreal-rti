// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityPosition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EntityPosition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EntityPosition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EntityPosition_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_EntityPosition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EntityPosition_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class EntityPosition;
class EntityPositionDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern EntityPositionDefaultTypeInternal _EntityPosition_default_instance_;
class EntityPosition_EulerRotation;
class EntityPosition_EulerRotationDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern EntityPosition_EulerRotationDefaultTypeInternal _EntityPosition_EulerRotation_default_instance_;
class EntityPosition_GeodeticPosition;
class EntityPosition_GeodeticPositionDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern EntityPosition_GeodeticPositionDefaultTypeInternal _EntityPosition_GeodeticPosition_default_instance_;
class EntityPosition_LocalPosition;
class EntityPosition_LocalPositionDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern EntityPosition_LocalPositionDefaultTypeInternal _EntityPosition_LocalPosition_default_instance_;
class EntityPosition_LocalRotation;
class EntityPosition_LocalRotationDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern EntityPosition_LocalRotationDefaultTypeInternal _EntityPosition_LocalRotation_default_instance_;
class EntityPosition_VelocityVector;
class EntityPosition_VelocityVectorDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern EntityPosition_VelocityVectorDefaultTypeInternal _EntityPosition_VelocityVector_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::EntityPosition* Arena::CreateMaybeMessage<::inhumate::rti::proto::EntityPosition>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::EntityPosition_EulerRotation* Arena::CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_EulerRotation>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::EntityPosition_GeodeticPosition* Arena::CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_GeodeticPosition>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::EntityPosition_LocalPosition* Arena::CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_LocalPosition>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::EntityPosition_LocalRotation* Arena::CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_LocalRotation>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::EntityPosition_VelocityVector* Arena::CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_VelocityVector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT EntityPosition_LocalPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.EntityPosition.LocalPosition) */ {
 public:
  EntityPosition_LocalPosition();
  virtual ~EntityPosition_LocalPosition();

  EntityPosition_LocalPosition(const EntityPosition_LocalPosition& from);
  EntityPosition_LocalPosition(EntityPosition_LocalPosition&& from) noexcept
    : EntityPosition_LocalPosition() {
    *this = ::std::move(from);
  }

  inline EntityPosition_LocalPosition& operator=(const EntityPosition_LocalPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityPosition_LocalPosition& operator=(EntityPosition_LocalPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityPosition_LocalPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityPosition_LocalPosition* internal_default_instance() {
    return reinterpret_cast<const EntityPosition_LocalPosition*>(
               &_EntityPosition_LocalPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntityPosition_LocalPosition& a, EntityPosition_LocalPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityPosition_LocalPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityPosition_LocalPosition* New() const final {
    return CreateMaybeMessage<EntityPosition_LocalPosition>(nullptr);
  }

  EntityPosition_LocalPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityPosition_LocalPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityPosition_LocalPosition& from);
  void MergeFrom(const EntityPosition_LocalPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityPosition_LocalPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.EntityPosition.LocalPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EntityPosition_2eproto);
    return ::descriptor_table_EntityPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.EntityPosition.LocalPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EntityPosition_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT EntityPosition_LocalRotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.EntityPosition.LocalRotation) */ {
 public:
  EntityPosition_LocalRotation();
  virtual ~EntityPosition_LocalRotation();

  EntityPosition_LocalRotation(const EntityPosition_LocalRotation& from);
  EntityPosition_LocalRotation(EntityPosition_LocalRotation&& from) noexcept
    : EntityPosition_LocalRotation() {
    *this = ::std::move(from);
  }

  inline EntityPosition_LocalRotation& operator=(const EntityPosition_LocalRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityPosition_LocalRotation& operator=(EntityPosition_LocalRotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityPosition_LocalRotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityPosition_LocalRotation* internal_default_instance() {
    return reinterpret_cast<const EntityPosition_LocalRotation*>(
               &_EntityPosition_LocalRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EntityPosition_LocalRotation& a, EntityPosition_LocalRotation& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityPosition_LocalRotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityPosition_LocalRotation* New() const final {
    return CreateMaybeMessage<EntityPosition_LocalRotation>(nullptr);
  }

  EntityPosition_LocalRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityPosition_LocalRotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityPosition_LocalRotation& from);
  void MergeFrom(const EntityPosition_LocalRotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityPosition_LocalRotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.EntityPosition.LocalRotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EntityPosition_2eproto);
    return ::descriptor_table_EntityPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.EntityPosition.LocalRotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EntityPosition_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT EntityPosition_EulerRotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.EntityPosition.EulerRotation) */ {
 public:
  EntityPosition_EulerRotation();
  virtual ~EntityPosition_EulerRotation();

  EntityPosition_EulerRotation(const EntityPosition_EulerRotation& from);
  EntityPosition_EulerRotation(EntityPosition_EulerRotation&& from) noexcept
    : EntityPosition_EulerRotation() {
    *this = ::std::move(from);
  }

  inline EntityPosition_EulerRotation& operator=(const EntityPosition_EulerRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityPosition_EulerRotation& operator=(EntityPosition_EulerRotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityPosition_EulerRotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityPosition_EulerRotation* internal_default_instance() {
    return reinterpret_cast<const EntityPosition_EulerRotation*>(
               &_EntityPosition_EulerRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EntityPosition_EulerRotation& a, EntityPosition_EulerRotation& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityPosition_EulerRotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityPosition_EulerRotation* New() const final {
    return CreateMaybeMessage<EntityPosition_EulerRotation>(nullptr);
  }

  EntityPosition_EulerRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityPosition_EulerRotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityPosition_EulerRotation& from);
  void MergeFrom(const EntityPosition_EulerRotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityPosition_EulerRotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.EntityPosition.EulerRotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EntityPosition_2eproto);
    return ::descriptor_table_EntityPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float roll = 1;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.EntityPosition.EulerRotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float roll_;
  float pitch_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EntityPosition_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT EntityPosition_GeodeticPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.EntityPosition.GeodeticPosition) */ {
 public:
  EntityPosition_GeodeticPosition();
  virtual ~EntityPosition_GeodeticPosition();

  EntityPosition_GeodeticPosition(const EntityPosition_GeodeticPosition& from);
  EntityPosition_GeodeticPosition(EntityPosition_GeodeticPosition&& from) noexcept
    : EntityPosition_GeodeticPosition() {
    *this = ::std::move(from);
  }

  inline EntityPosition_GeodeticPosition& operator=(const EntityPosition_GeodeticPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityPosition_GeodeticPosition& operator=(EntityPosition_GeodeticPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityPosition_GeodeticPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityPosition_GeodeticPosition* internal_default_instance() {
    return reinterpret_cast<const EntityPosition_GeodeticPosition*>(
               &_EntityPosition_GeodeticPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EntityPosition_GeodeticPosition& a, EntityPosition_GeodeticPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityPosition_GeodeticPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityPosition_GeodeticPosition* New() const final {
    return CreateMaybeMessage<EntityPosition_GeodeticPosition>(nullptr);
  }

  EntityPosition_GeodeticPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityPosition_GeodeticPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityPosition_GeodeticPosition& from);
  void MergeFrom(const EntityPosition_GeodeticPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityPosition_GeodeticPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.EntityPosition.GeodeticPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EntityPosition_2eproto);
    return ::descriptor_table_EntityPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.EntityPosition.GeodeticPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EntityPosition_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT EntityPosition_VelocityVector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.EntityPosition.VelocityVector) */ {
 public:
  EntityPosition_VelocityVector();
  virtual ~EntityPosition_VelocityVector();

  EntityPosition_VelocityVector(const EntityPosition_VelocityVector& from);
  EntityPosition_VelocityVector(EntityPosition_VelocityVector&& from) noexcept
    : EntityPosition_VelocityVector() {
    *this = ::std::move(from);
  }

  inline EntityPosition_VelocityVector& operator=(const EntityPosition_VelocityVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityPosition_VelocityVector& operator=(EntityPosition_VelocityVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityPosition_VelocityVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityPosition_VelocityVector* internal_default_instance() {
    return reinterpret_cast<const EntityPosition_VelocityVector*>(
               &_EntityPosition_VelocityVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EntityPosition_VelocityVector& a, EntityPosition_VelocityVector& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityPosition_VelocityVector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityPosition_VelocityVector* New() const final {
    return CreateMaybeMessage<EntityPosition_VelocityVector>(nullptr);
  }

  EntityPosition_VelocityVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityPosition_VelocityVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityPosition_VelocityVector& from);
  void MergeFrom(const EntityPosition_VelocityVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityPosition_VelocityVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.EntityPosition.VelocityVector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EntityPosition_2eproto);
    return ::descriptor_table_EntityPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardFieldNumber = 1,
    kRightFieldNumber = 2,
    kUpFieldNumber = 3,
  };
  // float forward = 1;
  void clear_forward();
  float forward() const;
  void set_forward(float value);
  private:
  float _internal_forward() const;
  void _internal_set_forward(float value);
  public:

  // float right = 2;
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // float up = 3;
  void clear_up();
  float up() const;
  void set_up(float value);
  private:
  float _internal_up() const;
  void _internal_set_up(float value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.EntityPosition.VelocityVector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float forward_;
  float right_;
  float up_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EntityPosition_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT EntityPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.EntityPosition) */ {
 public:
  EntityPosition();
  virtual ~EntityPosition();

  EntityPosition(const EntityPosition& from);
  EntityPosition(EntityPosition&& from) noexcept
    : EntityPosition() {
    *this = ::std::move(from);
  }

  inline EntityPosition& operator=(const EntityPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityPosition& operator=(EntityPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityPosition* internal_default_instance() {
    return reinterpret_cast<const EntityPosition*>(
               &_EntityPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EntityPosition& a, EntityPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityPosition* New() const final {
    return CreateMaybeMessage<EntityPosition>(nullptr);
  }

  EntityPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityPosition& from);
  void MergeFrom(const EntityPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.EntityPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EntityPosition_2eproto);
    return ::descriptor_table_EntityPosition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EntityPosition_LocalPosition LocalPosition;
  typedef EntityPosition_LocalRotation LocalRotation;
  typedef EntityPosition_EulerRotation EulerRotation;
  typedef EntityPosition_GeodeticPosition GeodeticPosition;
  typedef EntityPosition_VelocityVector VelocityVector;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocalFieldNumber = 2,
    kLocalRotationFieldNumber = 3,
    kEulerRotationFieldNumber = 4,
    kGeodeticFieldNumber = 5,
    kVelocityFieldNumber = 6,
    kAccelerationFieldNumber = 7,
    kAngularVelocityFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .inhumate.rti.proto.EntityPosition.LocalPosition local = 2;
  bool has_local() const;
  private:
  bool _internal_has_local() const;
  public:
  void clear_local();
  const ::inhumate::rti::proto::EntityPosition_LocalPosition& local() const;
  ::inhumate::rti::proto::EntityPosition_LocalPosition* release_local();
  ::inhumate::rti::proto::EntityPosition_LocalPosition* mutable_local();
  void set_allocated_local(::inhumate::rti::proto::EntityPosition_LocalPosition* local);
  private:
  const ::inhumate::rti::proto::EntityPosition_LocalPosition& _internal_local() const;
  ::inhumate::rti::proto::EntityPosition_LocalPosition* _internal_mutable_local();
  public:

  // .inhumate.rti.proto.EntityPosition.LocalRotation local_rotation = 3;
  bool has_local_rotation() const;
  private:
  bool _internal_has_local_rotation() const;
  public:
  void clear_local_rotation();
  const ::inhumate::rti::proto::EntityPosition_LocalRotation& local_rotation() const;
  ::inhumate::rti::proto::EntityPosition_LocalRotation* release_local_rotation();
  ::inhumate::rti::proto::EntityPosition_LocalRotation* mutable_local_rotation();
  void set_allocated_local_rotation(::inhumate::rti::proto::EntityPosition_LocalRotation* local_rotation);
  private:
  const ::inhumate::rti::proto::EntityPosition_LocalRotation& _internal_local_rotation() const;
  ::inhumate::rti::proto::EntityPosition_LocalRotation* _internal_mutable_local_rotation();
  public:

  // .inhumate.rti.proto.EntityPosition.EulerRotation euler_rotation = 4;
  bool has_euler_rotation() const;
  private:
  bool _internal_has_euler_rotation() const;
  public:
  void clear_euler_rotation();
  const ::inhumate::rti::proto::EntityPosition_EulerRotation& euler_rotation() const;
  ::inhumate::rti::proto::EntityPosition_EulerRotation* release_euler_rotation();
  ::inhumate::rti::proto::EntityPosition_EulerRotation* mutable_euler_rotation();
  void set_allocated_euler_rotation(::inhumate::rti::proto::EntityPosition_EulerRotation* euler_rotation);
  private:
  const ::inhumate::rti::proto::EntityPosition_EulerRotation& _internal_euler_rotation() const;
  ::inhumate::rti::proto::EntityPosition_EulerRotation* _internal_mutable_euler_rotation();
  public:

  // .inhumate.rti.proto.EntityPosition.GeodeticPosition geodetic = 5;
  bool has_geodetic() const;
  private:
  bool _internal_has_geodetic() const;
  public:
  void clear_geodetic();
  const ::inhumate::rti::proto::EntityPosition_GeodeticPosition& geodetic() const;
  ::inhumate::rti::proto::EntityPosition_GeodeticPosition* release_geodetic();
  ::inhumate::rti::proto::EntityPosition_GeodeticPosition* mutable_geodetic();
  void set_allocated_geodetic(::inhumate::rti::proto::EntityPosition_GeodeticPosition* geodetic);
  private:
  const ::inhumate::rti::proto::EntityPosition_GeodeticPosition& _internal_geodetic() const;
  ::inhumate::rti::proto::EntityPosition_GeodeticPosition* _internal_mutable_geodetic();
  public:

  // .inhumate.rti.proto.EntityPosition.VelocityVector velocity = 6;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::inhumate::rti::proto::EntityPosition_VelocityVector& velocity() const;
  ::inhumate::rti::proto::EntityPosition_VelocityVector* release_velocity();
  ::inhumate::rti::proto::EntityPosition_VelocityVector* mutable_velocity();
  void set_allocated_velocity(::inhumate::rti::proto::EntityPosition_VelocityVector* velocity);
  private:
  const ::inhumate::rti::proto::EntityPosition_VelocityVector& _internal_velocity() const;
  ::inhumate::rti::proto::EntityPosition_VelocityVector* _internal_mutable_velocity();
  public:

  // .inhumate.rti.proto.EntityPosition.VelocityVector acceleration = 7;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::inhumate::rti::proto::EntityPosition_VelocityVector& acceleration() const;
  ::inhumate::rti::proto::EntityPosition_VelocityVector* release_acceleration();
  ::inhumate::rti::proto::EntityPosition_VelocityVector* mutable_acceleration();
  void set_allocated_acceleration(::inhumate::rti::proto::EntityPosition_VelocityVector* acceleration);
  private:
  const ::inhumate::rti::proto::EntityPosition_VelocityVector& _internal_acceleration() const;
  ::inhumate::rti::proto::EntityPosition_VelocityVector* _internal_mutable_acceleration();
  public:

  // .inhumate.rti.proto.EntityPosition.EulerRotation angular_velocity = 8;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::inhumate::rti::proto::EntityPosition_EulerRotation& angular_velocity() const;
  ::inhumate::rti::proto::EntityPosition_EulerRotation* release_angular_velocity();
  ::inhumate::rti::proto::EntityPosition_EulerRotation* mutable_angular_velocity();
  void set_allocated_angular_velocity(::inhumate::rti::proto::EntityPosition_EulerRotation* angular_velocity);
  private:
  const ::inhumate::rti::proto::EntityPosition_EulerRotation& _internal_angular_velocity() const;
  ::inhumate::rti::proto::EntityPosition_EulerRotation* _internal_mutable_angular_velocity();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.EntityPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::inhumate::rti::proto::EntityPosition_LocalPosition* local_;
  ::inhumate::rti::proto::EntityPosition_LocalRotation* local_rotation_;
  ::inhumate::rti::proto::EntityPosition_EulerRotation* euler_rotation_;
  ::inhumate::rti::proto::EntityPosition_GeodeticPosition* geodetic_;
  ::inhumate::rti::proto::EntityPosition_VelocityVector* velocity_;
  ::inhumate::rti::proto::EntityPosition_VelocityVector* acceleration_;
  ::inhumate::rti::proto::EntityPosition_EulerRotation* angular_velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_EntityPosition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityPosition_LocalPosition

// float x = 1;
inline void EntityPosition_LocalPosition::clear_x() {
  x_ = 0;
}
inline float EntityPosition_LocalPosition::_internal_x() const {
  return x_;
}
inline float EntityPosition_LocalPosition::x() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.LocalPosition.x)
  return _internal_x();
}
inline void EntityPosition_LocalPosition::_internal_set_x(float value) {
  
  x_ = value;
}
inline void EntityPosition_LocalPosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.LocalPosition.x)
}

// float y = 2;
inline void EntityPosition_LocalPosition::clear_y() {
  y_ = 0;
}
inline float EntityPosition_LocalPosition::_internal_y() const {
  return y_;
}
inline float EntityPosition_LocalPosition::y() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.LocalPosition.y)
  return _internal_y();
}
inline void EntityPosition_LocalPosition::_internal_set_y(float value) {
  
  y_ = value;
}
inline void EntityPosition_LocalPosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.LocalPosition.y)
}

// float z = 3;
inline void EntityPosition_LocalPosition::clear_z() {
  z_ = 0;
}
inline float EntityPosition_LocalPosition::_internal_z() const {
  return z_;
}
inline float EntityPosition_LocalPosition::z() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.LocalPosition.z)
  return _internal_z();
}
inline void EntityPosition_LocalPosition::_internal_set_z(float value) {
  
  z_ = value;
}
inline void EntityPosition_LocalPosition::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.LocalPosition.z)
}

// -------------------------------------------------------------------

// EntityPosition_LocalRotation

// float x = 1;
inline void EntityPosition_LocalRotation::clear_x() {
  x_ = 0;
}
inline float EntityPosition_LocalRotation::_internal_x() const {
  return x_;
}
inline float EntityPosition_LocalRotation::x() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.LocalRotation.x)
  return _internal_x();
}
inline void EntityPosition_LocalRotation::_internal_set_x(float value) {
  
  x_ = value;
}
inline void EntityPosition_LocalRotation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.LocalRotation.x)
}

// float y = 2;
inline void EntityPosition_LocalRotation::clear_y() {
  y_ = 0;
}
inline float EntityPosition_LocalRotation::_internal_y() const {
  return y_;
}
inline float EntityPosition_LocalRotation::y() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.LocalRotation.y)
  return _internal_y();
}
inline void EntityPosition_LocalRotation::_internal_set_y(float value) {
  
  y_ = value;
}
inline void EntityPosition_LocalRotation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.LocalRotation.y)
}

// float z = 3;
inline void EntityPosition_LocalRotation::clear_z() {
  z_ = 0;
}
inline float EntityPosition_LocalRotation::_internal_z() const {
  return z_;
}
inline float EntityPosition_LocalRotation::z() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.LocalRotation.z)
  return _internal_z();
}
inline void EntityPosition_LocalRotation::_internal_set_z(float value) {
  
  z_ = value;
}
inline void EntityPosition_LocalRotation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.LocalRotation.z)
}

// float w = 4;
inline void EntityPosition_LocalRotation::clear_w() {
  w_ = 0;
}
inline float EntityPosition_LocalRotation::_internal_w() const {
  return w_;
}
inline float EntityPosition_LocalRotation::w() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.LocalRotation.w)
  return _internal_w();
}
inline void EntityPosition_LocalRotation::_internal_set_w(float value) {
  
  w_ = value;
}
inline void EntityPosition_LocalRotation::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.LocalRotation.w)
}

// -------------------------------------------------------------------

// EntityPosition_EulerRotation

// float roll = 1;
inline void EntityPosition_EulerRotation::clear_roll() {
  roll_ = 0;
}
inline float EntityPosition_EulerRotation::_internal_roll() const {
  return roll_;
}
inline float EntityPosition_EulerRotation::roll() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.EulerRotation.roll)
  return _internal_roll();
}
inline void EntityPosition_EulerRotation::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void EntityPosition_EulerRotation::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.EulerRotation.roll)
}

// float pitch = 2;
inline void EntityPosition_EulerRotation::clear_pitch() {
  pitch_ = 0;
}
inline float EntityPosition_EulerRotation::_internal_pitch() const {
  return pitch_;
}
inline float EntityPosition_EulerRotation::pitch() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.EulerRotation.pitch)
  return _internal_pitch();
}
inline void EntityPosition_EulerRotation::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void EntityPosition_EulerRotation::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.EulerRotation.pitch)
}

// float yaw = 3;
inline void EntityPosition_EulerRotation::clear_yaw() {
  yaw_ = 0;
}
inline float EntityPosition_EulerRotation::_internal_yaw() const {
  return yaw_;
}
inline float EntityPosition_EulerRotation::yaw() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.EulerRotation.yaw)
  return _internal_yaw();
}
inline void EntityPosition_EulerRotation::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void EntityPosition_EulerRotation::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.EulerRotation.yaw)
}

// -------------------------------------------------------------------

// EntityPosition_GeodeticPosition

// double longitude = 1;
inline void EntityPosition_GeodeticPosition::clear_longitude() {
  longitude_ = 0;
}
inline double EntityPosition_GeodeticPosition::_internal_longitude() const {
  return longitude_;
}
inline double EntityPosition_GeodeticPosition::longitude() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.GeodeticPosition.longitude)
  return _internal_longitude();
}
inline void EntityPosition_GeodeticPosition::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void EntityPosition_GeodeticPosition::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.GeodeticPosition.longitude)
}

// double latitude = 2;
inline void EntityPosition_GeodeticPosition::clear_latitude() {
  latitude_ = 0;
}
inline double EntityPosition_GeodeticPosition::_internal_latitude() const {
  return latitude_;
}
inline double EntityPosition_GeodeticPosition::latitude() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.GeodeticPosition.latitude)
  return _internal_latitude();
}
inline void EntityPosition_GeodeticPosition::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void EntityPosition_GeodeticPosition::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.GeodeticPosition.latitude)
}

// double altitude = 3;
inline void EntityPosition_GeodeticPosition::clear_altitude() {
  altitude_ = 0;
}
inline double EntityPosition_GeodeticPosition::_internal_altitude() const {
  return altitude_;
}
inline double EntityPosition_GeodeticPosition::altitude() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.GeodeticPosition.altitude)
  return _internal_altitude();
}
inline void EntityPosition_GeodeticPosition::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void EntityPosition_GeodeticPosition::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.GeodeticPosition.altitude)
}

// -------------------------------------------------------------------

// EntityPosition_VelocityVector

// float forward = 1;
inline void EntityPosition_VelocityVector::clear_forward() {
  forward_ = 0;
}
inline float EntityPosition_VelocityVector::_internal_forward() const {
  return forward_;
}
inline float EntityPosition_VelocityVector::forward() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.VelocityVector.forward)
  return _internal_forward();
}
inline void EntityPosition_VelocityVector::_internal_set_forward(float value) {
  
  forward_ = value;
}
inline void EntityPosition_VelocityVector::set_forward(float value) {
  _internal_set_forward(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.VelocityVector.forward)
}

// float right = 2;
inline void EntityPosition_VelocityVector::clear_right() {
  right_ = 0;
}
inline float EntityPosition_VelocityVector::_internal_right() const {
  return right_;
}
inline float EntityPosition_VelocityVector::right() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.VelocityVector.right)
  return _internal_right();
}
inline void EntityPosition_VelocityVector::_internal_set_right(float value) {
  
  right_ = value;
}
inline void EntityPosition_VelocityVector::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.VelocityVector.right)
}

// float up = 3;
inline void EntityPosition_VelocityVector::clear_up() {
  up_ = 0;
}
inline float EntityPosition_VelocityVector::_internal_up() const {
  return up_;
}
inline float EntityPosition_VelocityVector::up() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.VelocityVector.up)
  return _internal_up();
}
inline void EntityPosition_VelocityVector::_internal_set_up(float value) {
  
  up_ = value;
}
inline void EntityPosition_VelocityVector::set_up(float value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.VelocityVector.up)
}

// -------------------------------------------------------------------

// EntityPosition

// string id = 1;
inline void EntityPosition::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EntityPosition::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.id)
  return _internal_id();
}
inline void EntityPosition::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.EntityPosition.id)
}
inline std::string* EntityPosition::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.EntityPosition.id)
  return _internal_mutable_id();
}
inline const std::string& EntityPosition::_internal_id() const {
  return id_.GetNoArena();
}
inline void EntityPosition::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EntityPosition::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.EntityPosition.id)
}
inline void EntityPosition::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.EntityPosition.id)
}
inline void EntityPosition::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.EntityPosition.id)
}
inline std::string* EntityPosition::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntityPosition::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.EntityPosition.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntityPosition::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.EntityPosition.id)
}

// .inhumate.rti.proto.EntityPosition.LocalPosition local = 2;
inline bool EntityPosition::_internal_has_local() const {
  return this != internal_default_instance() && local_ != nullptr;
}
inline bool EntityPosition::has_local() const {
  return _internal_has_local();
}
inline void EntityPosition::clear_local() {
  if (GetArenaNoVirtual() == nullptr && local_ != nullptr) {
    delete local_;
  }
  local_ = nullptr;
}
inline const ::inhumate::rti::proto::EntityPosition_LocalPosition& EntityPosition::_internal_local() const {
  const ::inhumate::rti::proto::EntityPosition_LocalPosition* p = local_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition_LocalPosition*>(
      &::inhumate::rti::proto::_EntityPosition_LocalPosition_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition_LocalPosition& EntityPosition::local() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.local)
  return _internal_local();
}
inline ::inhumate::rti::proto::EntityPosition_LocalPosition* EntityPosition::release_local() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.EntityPosition.local)
  
  ::inhumate::rti::proto::EntityPosition_LocalPosition* temp = local_;
  local_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition_LocalPosition* EntityPosition::_internal_mutable_local() {
  
  if (local_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_LocalPosition>(GetArenaNoVirtual());
    local_ = p;
  }
  return local_;
}
inline ::inhumate::rti::proto::EntityPosition_LocalPosition* EntityPosition::mutable_local() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.EntityPosition.local)
  return _internal_mutable_local();
}
inline void EntityPosition::set_allocated_local(::inhumate::rti::proto::EntityPosition_LocalPosition* local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_;
  }
  if (local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    
  } else {
    
  }
  local_ = local;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.EntityPosition.local)
}

// .inhumate.rti.proto.EntityPosition.LocalRotation local_rotation = 3;
inline bool EntityPosition::_internal_has_local_rotation() const {
  return this != internal_default_instance() && local_rotation_ != nullptr;
}
inline bool EntityPosition::has_local_rotation() const {
  return _internal_has_local_rotation();
}
inline void EntityPosition::clear_local_rotation() {
  if (GetArenaNoVirtual() == nullptr && local_rotation_ != nullptr) {
    delete local_rotation_;
  }
  local_rotation_ = nullptr;
}
inline const ::inhumate::rti::proto::EntityPosition_LocalRotation& EntityPosition::_internal_local_rotation() const {
  const ::inhumate::rti::proto::EntityPosition_LocalRotation* p = local_rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition_LocalRotation*>(
      &::inhumate::rti::proto::_EntityPosition_LocalRotation_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition_LocalRotation& EntityPosition::local_rotation() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.local_rotation)
  return _internal_local_rotation();
}
inline ::inhumate::rti::proto::EntityPosition_LocalRotation* EntityPosition::release_local_rotation() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.EntityPosition.local_rotation)
  
  ::inhumate::rti::proto::EntityPosition_LocalRotation* temp = local_rotation_;
  local_rotation_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition_LocalRotation* EntityPosition::_internal_mutable_local_rotation() {
  
  if (local_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_LocalRotation>(GetArenaNoVirtual());
    local_rotation_ = p;
  }
  return local_rotation_;
}
inline ::inhumate::rti::proto::EntityPosition_LocalRotation* EntityPosition::mutable_local_rotation() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.EntityPosition.local_rotation)
  return _internal_mutable_local_rotation();
}
inline void EntityPosition::set_allocated_local_rotation(::inhumate::rti::proto::EntityPosition_LocalRotation* local_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_rotation_;
  }
  if (local_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_rotation, submessage_arena);
    }
    
  } else {
    
  }
  local_rotation_ = local_rotation;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.EntityPosition.local_rotation)
}

// .inhumate.rti.proto.EntityPosition.EulerRotation euler_rotation = 4;
inline bool EntityPosition::_internal_has_euler_rotation() const {
  return this != internal_default_instance() && euler_rotation_ != nullptr;
}
inline bool EntityPosition::has_euler_rotation() const {
  return _internal_has_euler_rotation();
}
inline void EntityPosition::clear_euler_rotation() {
  if (GetArenaNoVirtual() == nullptr && euler_rotation_ != nullptr) {
    delete euler_rotation_;
  }
  euler_rotation_ = nullptr;
}
inline const ::inhumate::rti::proto::EntityPosition_EulerRotation& EntityPosition::_internal_euler_rotation() const {
  const ::inhumate::rti::proto::EntityPosition_EulerRotation* p = euler_rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition_EulerRotation*>(
      &::inhumate::rti::proto::_EntityPosition_EulerRotation_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition_EulerRotation& EntityPosition::euler_rotation() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.euler_rotation)
  return _internal_euler_rotation();
}
inline ::inhumate::rti::proto::EntityPosition_EulerRotation* EntityPosition::release_euler_rotation() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.EntityPosition.euler_rotation)
  
  ::inhumate::rti::proto::EntityPosition_EulerRotation* temp = euler_rotation_;
  euler_rotation_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition_EulerRotation* EntityPosition::_internal_mutable_euler_rotation() {
  
  if (euler_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_EulerRotation>(GetArenaNoVirtual());
    euler_rotation_ = p;
  }
  return euler_rotation_;
}
inline ::inhumate::rti::proto::EntityPosition_EulerRotation* EntityPosition::mutable_euler_rotation() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.EntityPosition.euler_rotation)
  return _internal_mutable_euler_rotation();
}
inline void EntityPosition::set_allocated_euler_rotation(::inhumate::rti::proto::EntityPosition_EulerRotation* euler_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete euler_rotation_;
  }
  if (euler_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      euler_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_rotation, submessage_arena);
    }
    
  } else {
    
  }
  euler_rotation_ = euler_rotation;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.EntityPosition.euler_rotation)
}

// .inhumate.rti.proto.EntityPosition.GeodeticPosition geodetic = 5;
inline bool EntityPosition::_internal_has_geodetic() const {
  return this != internal_default_instance() && geodetic_ != nullptr;
}
inline bool EntityPosition::has_geodetic() const {
  return _internal_has_geodetic();
}
inline void EntityPosition::clear_geodetic() {
  if (GetArenaNoVirtual() == nullptr && geodetic_ != nullptr) {
    delete geodetic_;
  }
  geodetic_ = nullptr;
}
inline const ::inhumate::rti::proto::EntityPosition_GeodeticPosition& EntityPosition::_internal_geodetic() const {
  const ::inhumate::rti::proto::EntityPosition_GeodeticPosition* p = geodetic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition_GeodeticPosition*>(
      &::inhumate::rti::proto::_EntityPosition_GeodeticPosition_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition_GeodeticPosition& EntityPosition::geodetic() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.geodetic)
  return _internal_geodetic();
}
inline ::inhumate::rti::proto::EntityPosition_GeodeticPosition* EntityPosition::release_geodetic() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.EntityPosition.geodetic)
  
  ::inhumate::rti::proto::EntityPosition_GeodeticPosition* temp = geodetic_;
  geodetic_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition_GeodeticPosition* EntityPosition::_internal_mutable_geodetic() {
  
  if (geodetic_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_GeodeticPosition>(GetArenaNoVirtual());
    geodetic_ = p;
  }
  return geodetic_;
}
inline ::inhumate::rti::proto::EntityPosition_GeodeticPosition* EntityPosition::mutable_geodetic() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.EntityPosition.geodetic)
  return _internal_mutable_geodetic();
}
inline void EntityPosition::set_allocated_geodetic(::inhumate::rti::proto::EntityPosition_GeodeticPosition* geodetic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geodetic_;
  }
  if (geodetic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geodetic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodetic, submessage_arena);
    }
    
  } else {
    
  }
  geodetic_ = geodetic;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.EntityPosition.geodetic)
}

// .inhumate.rti.proto.EntityPosition.VelocityVector velocity = 6;
inline bool EntityPosition::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool EntityPosition::has_velocity() const {
  return _internal_has_velocity();
}
inline void EntityPosition::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::inhumate::rti::proto::EntityPosition_VelocityVector& EntityPosition::_internal_velocity() const {
  const ::inhumate::rti::proto::EntityPosition_VelocityVector* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition_VelocityVector*>(
      &::inhumate::rti::proto::_EntityPosition_VelocityVector_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition_VelocityVector& EntityPosition::velocity() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.velocity)
  return _internal_velocity();
}
inline ::inhumate::rti::proto::EntityPosition_VelocityVector* EntityPosition::release_velocity() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.EntityPosition.velocity)
  
  ::inhumate::rti::proto::EntityPosition_VelocityVector* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition_VelocityVector* EntityPosition::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_VelocityVector>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::inhumate::rti::proto::EntityPosition_VelocityVector* EntityPosition::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.EntityPosition.velocity)
  return _internal_mutable_velocity();
}
inline void EntityPosition::set_allocated_velocity(::inhumate::rti::proto::EntityPosition_VelocityVector* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.EntityPosition.velocity)
}

// .inhumate.rti.proto.EntityPosition.VelocityVector acceleration = 7;
inline bool EntityPosition::_internal_has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline bool EntityPosition::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void EntityPosition::clear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
inline const ::inhumate::rti::proto::EntityPosition_VelocityVector& EntityPosition::_internal_acceleration() const {
  const ::inhumate::rti::proto::EntityPosition_VelocityVector* p = acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition_VelocityVector*>(
      &::inhumate::rti::proto::_EntityPosition_VelocityVector_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition_VelocityVector& EntityPosition::acceleration() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.acceleration)
  return _internal_acceleration();
}
inline ::inhumate::rti::proto::EntityPosition_VelocityVector* EntityPosition::release_acceleration() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.EntityPosition.acceleration)
  
  ::inhumate::rti::proto::EntityPosition_VelocityVector* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition_VelocityVector* EntityPosition::_internal_mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_VelocityVector>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  return acceleration_;
}
inline ::inhumate::rti::proto::EntityPosition_VelocityVector* EntityPosition::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.EntityPosition.acceleration)
  return _internal_mutable_acceleration();
}
inline void EntityPosition::set_allocated_acceleration(::inhumate::rti::proto::EntityPosition_VelocityVector* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.EntityPosition.acceleration)
}

// .inhumate.rti.proto.EntityPosition.EulerRotation angular_velocity = 8;
inline bool EntityPosition::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool EntityPosition::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void EntityPosition::clear_angular_velocity() {
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
inline const ::inhumate::rti::proto::EntityPosition_EulerRotation& EntityPosition::_internal_angular_velocity() const {
  const ::inhumate::rti::proto::EntityPosition_EulerRotation* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition_EulerRotation*>(
      &::inhumate::rti::proto::_EntityPosition_EulerRotation_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition_EulerRotation& EntityPosition::angular_velocity() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.EntityPosition.angular_velocity)
  return _internal_angular_velocity();
}
inline ::inhumate::rti::proto::EntityPosition_EulerRotation* EntityPosition::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.EntityPosition.angular_velocity)
  
  ::inhumate::rti::proto::EntityPosition_EulerRotation* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition_EulerRotation* EntityPosition::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_EulerRotation>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::inhumate::rti::proto::EntityPosition_EulerRotation* EntityPosition::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.EntityPosition.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void EntityPosition::set_allocated_angular_velocity(::inhumate::rti::proto::EntityPosition_EulerRotation* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.EntityPosition.angular_velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EntityPosition_2eproto
