// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Injection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Injection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Injection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Injection_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Injection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Injection_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Injection;
class InjectionDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern InjectionDefaultTypeInternal _Injection_default_instance_;
class Injection_ParameterValuesEntry_DoNotUse;
class Injection_ParameterValuesEntry_DoNotUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Injection_ParameterValuesEntry_DoNotUseDefaultTypeInternal _Injection_ParameterValuesEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Injection* Arena::CreateMaybeMessage<::inhumate::rti::proto::Injection>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Injection_ParameterValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::Injection_ParameterValuesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

enum Injection_State : int {
  Injection_State_UNKNOWN = 0,
  Injection_State_DISABLED = 10,
  Injection_State_ENABLED = 20,
  Injection_State_RUNNING = 30,
  Injection_State_END = 40,
  Injection_State_STOPPED = 41,
  Injection_State_CANCELED = 42,
  Injection_State_Injection_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Injection_State_Injection_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
INHUMATE_RTI_PROTOS_EXPORT bool Injection_State_IsValid(int value);
constexpr Injection_State Injection_State_State_MIN = Injection_State_UNKNOWN;
constexpr Injection_State Injection_State_State_MAX = Injection_State_CANCELED;
constexpr int Injection_State_State_ARRAYSIZE = Injection_State_State_MAX + 1;

INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Injection_State_descriptor();
template<typename T>
inline const std::string& Injection_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Injection_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Injection_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Injection_State_descriptor(), enum_t_value);
}
inline bool Injection_State_Parse(
    const std::string& name, Injection_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Injection_State>(
    Injection_State_descriptor(), name, value);
}
// ===================================================================

class Injection_ParameterValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Injection_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Injection_ParameterValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Injection_ParameterValuesEntry_DoNotUse();
  Injection_ParameterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Injection_ParameterValuesEntry_DoNotUse& other);
  static const Injection_ParameterValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Injection_ParameterValuesEntry_DoNotUse*>(&_Injection_ParameterValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.Injection.ParameterValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "inhumate.rti.proto.Injection.ParameterValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injection_2eproto);
    return ::descriptor_table_Injection_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Injection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Injection) */ {
 public:
  Injection();
  virtual ~Injection();

  Injection(const Injection& from);
  Injection(Injection&& from) noexcept
    : Injection() {
    *this = ::std::move(from);
  }

  inline Injection& operator=(const Injection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Injection& operator=(Injection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Injection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Injection* internal_default_instance() {
    return reinterpret_cast<const Injection*>(
               &_Injection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Injection& a, Injection& b) {
    a.Swap(&b);
  }
  inline void Swap(Injection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Injection* New() const final {
    return CreateMaybeMessage<Injection>(nullptr);
  }

  Injection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Injection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Injection& from);
  void MergeFrom(const Injection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Injection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Injection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Injection_2eproto);
    return ::descriptor_table_Injection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef Injection_State State;
  static constexpr State UNKNOWN =
    Injection_State_UNKNOWN;
  static constexpr State DISABLED =
    Injection_State_DISABLED;
  static constexpr State ENABLED =
    Injection_State_ENABLED;
  static constexpr State RUNNING =
    Injection_State_RUNNING;
  static constexpr State END =
    Injection_State_END;
  static constexpr State STOPPED =
    Injection_State_STOPPED;
  static constexpr State CANCELED =
    Injection_State_CANCELED;
  static inline bool State_IsValid(int value) {
    return Injection_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Injection_State_State_MIN;
  static constexpr State State_MAX =
    Injection_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Injection_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Injection_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Injection_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Injection_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParameterValuesFieldNumber = 5,
    kIdFieldNumber = 1,
    kInjectableFieldNumber = 2,
    kTitleFieldNumber = 4,
    kStateFieldNumber = 3,
    kEnableTimeFieldNumber = 10,
    kStartTimeFieldNumber = 11,
    kEndTimeFieldNumber = 12,
  };
  // map<string, string> parameter_values = 5;
  int parameter_values_size() const;
  private:
  int _internal_parameter_values_size() const;
  public:
  void clear_parameter_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameter_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameter_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameter_values();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string injectable = 2;
  void clear_injectable();
  const std::string& injectable() const;
  void set_injectable(const std::string& value);
  void set_injectable(std::string&& value);
  void set_injectable(const char* value);
  void set_injectable(const char* value, size_t size);
  std::string* mutable_injectable();
  std::string* release_injectable();
  void set_allocated_injectable(std::string* injectable);
  private:
  const std::string& _internal_injectable() const;
  void _internal_set_injectable(const std::string& value);
  std::string* _internal_mutable_injectable();
  public:

  // string title = 4;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .inhumate.rti.proto.Injection.State state = 3;
  void clear_state();
  ::inhumate::rti::proto::Injection_State state() const;
  void set_state(::inhumate::rti::proto::Injection_State value);
  private:
  ::inhumate::rti::proto::Injection_State _internal_state() const;
  void _internal_set_state(::inhumate::rti::proto::Injection_State value);
  public:

  // double enable_time = 10;
  void clear_enable_time();
  double enable_time() const;
  void set_enable_time(double value);
  private:
  double _internal_enable_time() const;
  void _internal_set_enable_time(double value);
  public:

  // double start_time = 11;
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // double end_time = 12;
  void clear_end_time();
  double end_time() const;
  void set_end_time(double value);
  private:
  double _internal_end_time() const;
  void _internal_set_end_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Injection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Injection_ParameterValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > parameter_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr injectable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  int state_;
  double enable_time_;
  double start_time_;
  double end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Injection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Injection

// string id = 1;
inline void Injection::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Injection::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.id)
  return _internal_id();
}
inline void Injection::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.id)
}
inline std::string* Injection::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injection.id)
  return _internal_mutable_id();
}
inline const std::string& Injection::_internal_id() const {
  return id_.GetNoArena();
}
inline void Injection::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Injection::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Injection.id)
}
inline void Injection::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Injection.id)
}
inline void Injection::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Injection.id)
}
inline std::string* Injection::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Injection::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injection.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Injection::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Injection.id)
}

// string injectable = 2;
inline void Injection::clear_injectable() {
  injectable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Injection::injectable() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.injectable)
  return _internal_injectable();
}
inline void Injection::set_injectable(const std::string& value) {
  _internal_set_injectable(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.injectable)
}
inline std::string* Injection::mutable_injectable() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injection.injectable)
  return _internal_mutable_injectable();
}
inline const std::string& Injection::_internal_injectable() const {
  return injectable_.GetNoArena();
}
inline void Injection::_internal_set_injectable(const std::string& value) {
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Injection::set_injectable(std::string&& value) {
  
  injectable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Injection.injectable)
}
inline void Injection::set_injectable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Injection.injectable)
}
inline void Injection::set_injectable(const char* value, size_t size) {
  
  injectable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Injection.injectable)
}
inline std::string* Injection::_internal_mutable_injectable() {
  
  return injectable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Injection::release_injectable() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injection.injectable)
  
  return injectable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Injection::set_allocated_injectable(std::string* injectable) {
  if (injectable != nullptr) {
    
  } else {
    
  }
  injectable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), injectable);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Injection.injectable)
}

// .inhumate.rti.proto.Injection.State state = 3;
inline void Injection::clear_state() {
  state_ = 0;
}
inline ::inhumate::rti::proto::Injection_State Injection::_internal_state() const {
  return static_cast< ::inhumate::rti::proto::Injection_State >(state_);
}
inline ::inhumate::rti::proto::Injection_State Injection::state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.state)
  return _internal_state();
}
inline void Injection::_internal_set_state(::inhumate::rti::proto::Injection_State value) {
  
  state_ = value;
}
inline void Injection::set_state(::inhumate::rti::proto::Injection_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.state)
}

// string title = 4;
inline void Injection::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Injection::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.title)
  return _internal_title();
}
inline void Injection::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.title)
}
inline std::string* Injection::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Injection.title)
  return _internal_mutable_title();
}
inline const std::string& Injection::_internal_title() const {
  return title_.GetNoArena();
}
inline void Injection::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Injection::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Injection.title)
}
inline void Injection::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Injection.title)
}
inline void Injection::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Injection.title)
}
inline std::string* Injection::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Injection::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Injection.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Injection::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Injection.title)
}

// map<string, string> parameter_values = 5;
inline int Injection::_internal_parameter_values_size() const {
  return parameter_values_.size();
}
inline int Injection::parameter_values_size() const {
  return _internal_parameter_values_size();
}
inline void Injection::clear_parameter_values() {
  parameter_values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Injection::_internal_parameter_values() const {
  return parameter_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Injection::parameter_values() const {
  // @@protoc_insertion_point(field_map:inhumate.rti.proto.Injection.parameter_values)
  return _internal_parameter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Injection::_internal_mutable_parameter_values() {
  return parameter_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Injection::mutable_parameter_values() {
  // @@protoc_insertion_point(field_mutable_map:inhumate.rti.proto.Injection.parameter_values)
  return _internal_mutable_parameter_values();
}

// double enable_time = 10;
inline void Injection::clear_enable_time() {
  enable_time_ = 0;
}
inline double Injection::_internal_enable_time() const {
  return enable_time_;
}
inline double Injection::enable_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.enable_time)
  return _internal_enable_time();
}
inline void Injection::_internal_set_enable_time(double value) {
  
  enable_time_ = value;
}
inline void Injection::set_enable_time(double value) {
  _internal_set_enable_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.enable_time)
}

// double start_time = 11;
inline void Injection::clear_start_time() {
  start_time_ = 0;
}
inline double Injection::_internal_start_time() const {
  return start_time_;
}
inline double Injection::start_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.start_time)
  return _internal_start_time();
}
inline void Injection::_internal_set_start_time(double value) {
  
  start_time_ = value;
}
inline void Injection::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.start_time)
}

// double end_time = 12;
inline void Injection::clear_end_time() {
  end_time_ = 0;
}
inline double Injection::_internal_end_time() const {
  return end_time_;
}
inline double Injection::end_time() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Injection.end_time)
  return _internal_end_time();
}
inline void Injection::_internal_set_end_time(double value) {
  
  end_time_ = value;
}
inline void Injection::set_end_time(double value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Injection.end_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::inhumate::rti::proto::Injection_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inhumate::rti::proto::Injection_State>() {
  return ::inhumate::rti::proto::Injection_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Injection_2eproto
