// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Clients.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Clients_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Clients_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "RuntimeState.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Clients_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Clients_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Clients_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Client;
class ClientDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ClientDefaultTypeInternal _Client_default_instance_;
class ClientHeartbeat;
class ClientHeartbeatDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ClientHeartbeatDefaultTypeInternal _ClientHeartbeat_default_instance_;
class ClientProgress;
class ClientProgressDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ClientProgressDefaultTypeInternal _ClientProgress_default_instance_;
class ClientValue;
class ClientValueDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ClientValueDefaultTypeInternal _ClientValue_default_instance_;
class Clients;
class ClientsDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ClientsDefaultTypeInternal _Clients_default_instance_;
class ParticipantRegistration;
class ParticipantRegistrationDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ParticipantRegistrationDefaultTypeInternal _ParticipantRegistration_default_instance_;
class ParticipantState;
class ParticipantStateDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ParticipantStateDefaultTypeInternal _ParticipantState_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Client* Arena::CreateMaybeMessage<::inhumate::rti::proto::Client>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ClientHeartbeat* Arena::CreateMaybeMessage<::inhumate::rti::proto::ClientHeartbeat>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ClientProgress* Arena::CreateMaybeMessage<::inhumate::rti::proto::ClientProgress>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ClientValue* Arena::CreateMaybeMessage<::inhumate::rti::proto::ClientValue>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Clients* Arena::CreateMaybeMessage<::inhumate::rti::proto::Clients>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ParticipantRegistration* Arena::CreateMaybeMessage<::inhumate::rti::proto::ParticipantRegistration>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ParticipantState* Arena::CreateMaybeMessage<::inhumate::rti::proto::ParticipantState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Clients :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Clients) */ {
 public:
  Clients();
  virtual ~Clients();

  Clients(const Clients& from);
  Clients(Clients&& from) noexcept
    : Clients() {
    *this = ::std::move(from);
  }

  inline Clients& operator=(const Clients& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clients& operator=(Clients&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clients& default_instance();

  enum WhichCase {
    kRequestClients = 1,
    kClient = 2,
    kLogClient = 3,
    kRegisterParticipant = 4,
    kParticipantState = 5,
    kProgress = 6,
    kValue = 7,
    kHeartbeat = 8,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clients* internal_default_instance() {
    return reinterpret_cast<const Clients*>(
               &_Clients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Clients& a, Clients& b) {
    a.Swap(&b);
  }
  inline void Swap(Clients* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clients* New() const final {
    return CreateMaybeMessage<Clients>(nullptr);
  }

  Clients* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clients>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clients& from);
  void MergeFrom(const Clients& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clients* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Clients";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clients_2eproto);
    return ::descriptor_table_Clients_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestClientsFieldNumber = 1,
    kClientFieldNumber = 2,
    kLogClientFieldNumber = 3,
    kRegisterParticipantFieldNumber = 4,
    kParticipantStateFieldNumber = 5,
    kProgressFieldNumber = 6,
    kValueFieldNumber = 7,
    kHeartbeatFieldNumber = 8,
  };
  // .google.protobuf.Empty request_clients = 1;
  bool has_request_clients() const;
  private:
  bool _internal_has_request_clients() const;
  public:
  void clear_request_clients();
  const PROTOBUF_NAMESPACE_ID::Empty& request_clients() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_clients();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_clients();
  void set_allocated_request_clients(PROTOBUF_NAMESPACE_ID::Empty* request_clients);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_clients() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_clients();
  public:

  // .inhumate.rti.proto.Client client = 2;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::inhumate::rti::proto::Client& client() const;
  ::inhumate::rti::proto::Client* release_client();
  ::inhumate::rti::proto::Client* mutable_client();
  void set_allocated_client(::inhumate::rti::proto::Client* client);
  private:
  const ::inhumate::rti::proto::Client& _internal_client() const;
  ::inhumate::rti::proto::Client* _internal_mutable_client();
  public:

  // .inhumate.rti.proto.Client log_client = 3;
  bool has_log_client() const;
  private:
  bool _internal_has_log_client() const;
  public:
  void clear_log_client();
  const ::inhumate::rti::proto::Client& log_client() const;
  ::inhumate::rti::proto::Client* release_log_client();
  ::inhumate::rti::proto::Client* mutable_log_client();
  void set_allocated_log_client(::inhumate::rti::proto::Client* log_client);
  private:
  const ::inhumate::rti::proto::Client& _internal_log_client() const;
  ::inhumate::rti::proto::Client* _internal_mutable_log_client();
  public:

  // .inhumate.rti.proto.ParticipantRegistration register_participant = 4;
  bool has_register_participant() const;
  private:
  bool _internal_has_register_participant() const;
  public:
  void clear_register_participant();
  const ::inhumate::rti::proto::ParticipantRegistration& register_participant() const;
  ::inhumate::rti::proto::ParticipantRegistration* release_register_participant();
  ::inhumate::rti::proto::ParticipantRegistration* mutable_register_participant();
  void set_allocated_register_participant(::inhumate::rti::proto::ParticipantRegistration* register_participant);
  private:
  const ::inhumate::rti::proto::ParticipantRegistration& _internal_register_participant() const;
  ::inhumate::rti::proto::ParticipantRegistration* _internal_mutable_register_participant();
  public:

  // .inhumate.rti.proto.ParticipantState participant_state = 5;
  bool has_participant_state() const;
  private:
  bool _internal_has_participant_state() const;
  public:
  void clear_participant_state();
  const ::inhumate::rti::proto::ParticipantState& participant_state() const;
  ::inhumate::rti::proto::ParticipantState* release_participant_state();
  ::inhumate::rti::proto::ParticipantState* mutable_participant_state();
  void set_allocated_participant_state(::inhumate::rti::proto::ParticipantState* participant_state);
  private:
  const ::inhumate::rti::proto::ParticipantState& _internal_participant_state() const;
  ::inhumate::rti::proto::ParticipantState* _internal_mutable_participant_state();
  public:

  // .inhumate.rti.proto.ClientProgress progress = 6;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::inhumate::rti::proto::ClientProgress& progress() const;
  ::inhumate::rti::proto::ClientProgress* release_progress();
  ::inhumate::rti::proto::ClientProgress* mutable_progress();
  void set_allocated_progress(::inhumate::rti::proto::ClientProgress* progress);
  private:
  const ::inhumate::rti::proto::ClientProgress& _internal_progress() const;
  ::inhumate::rti::proto::ClientProgress* _internal_mutable_progress();
  public:

  // .inhumate.rti.proto.ClientValue value = 7;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::inhumate::rti::proto::ClientValue& value() const;
  ::inhumate::rti::proto::ClientValue* release_value();
  ::inhumate::rti::proto::ClientValue* mutable_value();
  void set_allocated_value(::inhumate::rti::proto::ClientValue* value);
  private:
  const ::inhumate::rti::proto::ClientValue& _internal_value() const;
  ::inhumate::rti::proto::ClientValue* _internal_mutable_value();
  public:

  // .inhumate.rti.proto.ClientHeartbeat heartbeat = 8;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::inhumate::rti::proto::ClientHeartbeat& heartbeat() const;
  ::inhumate::rti::proto::ClientHeartbeat* release_heartbeat();
  ::inhumate::rti::proto::ClientHeartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::inhumate::rti::proto::ClientHeartbeat* heartbeat);
  private:
  const ::inhumate::rti::proto::ClientHeartbeat& _internal_heartbeat() const;
  ::inhumate::rti::proto::ClientHeartbeat* _internal_mutable_heartbeat();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Clients)
 private:
  class _Internal;
  void set_has_request_clients();
  void set_has_client();
  void set_has_log_client();
  void set_has_register_participant();
  void set_has_participant_state();
  void set_has_progress();
  void set_has_value();
  void set_has_heartbeat();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_clients_;
    ::inhumate::rti::proto::Client* client_;
    ::inhumate::rti::proto::Client* log_client_;
    ::inhumate::rti::proto::ParticipantRegistration* register_participant_;
    ::inhumate::rti::proto::ParticipantState* participant_state_;
    ::inhumate::rti::proto::ClientProgress* progress_;
    ::inhumate::rti::proto::ClientValue* value_;
    ::inhumate::rti::proto::ClientHeartbeat* heartbeat_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Clients_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Client :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Client) */ {
 public:
  Client();
  virtual ~Client();

  Client(const Client& from);
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client* New() const final {
    return CreateMaybeMessage<Client>(nullptr);
  }

  Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Client";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clients_2eproto);
    return ::descriptor_table_Clients_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilitiesFieldNumber = 17,
    kIdFieldNumber = 1,
    kApplicationFieldNumber = 2,
    kHostFieldNumber = 5,
    kStationFieldNumber = 6,
    kUserFieldNumber = 7,
    kParticipantFieldNumber = 8,
    kRoleFieldNumber = 9,
    kApplicationVersionFieldNumber = 10,
    kEngineVersionFieldNumber = 11,
    kClientLibraryVersionFieldNumber = 12,
    kFullNameFieldNumber = 13,
    kUrlFieldNumber = 14,
    kUserAgentFieldNumber = 15,
    kIntegrationVersionFieldNumber = 16,
    kStateFieldNumber = 3,
  };
  // repeated string capabilities = 17;
  int capabilities_size() const;
  private:
  int _internal_capabilities_size() const;
  public:
  void clear_capabilities();
  const std::string& capabilities(int index) const;
  std::string* mutable_capabilities(int index);
  void set_capabilities(int index, const std::string& value);
  void set_capabilities(int index, std::string&& value);
  void set_capabilities(int index, const char* value);
  void set_capabilities(int index, const char* value, size_t size);
  std::string* add_capabilities();
  void add_capabilities(const std::string& value);
  void add_capabilities(std::string&& value);
  void add_capabilities(const char* value);
  void add_capabilities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_capabilities();
  private:
  const std::string& _internal_capabilities(int index) const;
  std::string* _internal_add_capabilities();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string application = 2;
  void clear_application();
  const std::string& application() const;
  void set_application(const std::string& value);
  void set_application(std::string&& value);
  void set_application(const char* value);
  void set_application(const char* value, size_t size);
  std::string* mutable_application();
  std::string* release_application();
  void set_allocated_application(std::string* application);
  private:
  const std::string& _internal_application() const;
  void _internal_set_application(const std::string& value);
  std::string* _internal_mutable_application();
  public:

  // string host = 5;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string station = 6;
  void clear_station();
  const std::string& station() const;
  void set_station(const std::string& value);
  void set_station(std::string&& value);
  void set_station(const char* value);
  void set_station(const char* value, size_t size);
  std::string* mutable_station();
  std::string* release_station();
  void set_allocated_station(std::string* station);
  private:
  const std::string& _internal_station() const;
  void _internal_set_station(const std::string& value);
  std::string* _internal_mutable_station();
  public:

  // string user = 7;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string participant = 8;
  void clear_participant();
  const std::string& participant() const;
  void set_participant(const std::string& value);
  void set_participant(std::string&& value);
  void set_participant(const char* value);
  void set_participant(const char* value, size_t size);
  std::string* mutable_participant();
  std::string* release_participant();
  void set_allocated_participant(std::string* participant);
  private:
  const std::string& _internal_participant() const;
  void _internal_set_participant(const std::string& value);
  std::string* _internal_mutable_participant();
  public:

  // string role = 9;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string application_version = 10;
  void clear_application_version();
  const std::string& application_version() const;
  void set_application_version(const std::string& value);
  void set_application_version(std::string&& value);
  void set_application_version(const char* value);
  void set_application_version(const char* value, size_t size);
  std::string* mutable_application_version();
  std::string* release_application_version();
  void set_allocated_application_version(std::string* application_version);
  private:
  const std::string& _internal_application_version() const;
  void _internal_set_application_version(const std::string& value);
  std::string* _internal_mutable_application_version();
  public:

  // string engine_version = 11;
  void clear_engine_version();
  const std::string& engine_version() const;
  void set_engine_version(const std::string& value);
  void set_engine_version(std::string&& value);
  void set_engine_version(const char* value);
  void set_engine_version(const char* value, size_t size);
  std::string* mutable_engine_version();
  std::string* release_engine_version();
  void set_allocated_engine_version(std::string* engine_version);
  private:
  const std::string& _internal_engine_version() const;
  void _internal_set_engine_version(const std::string& value);
  std::string* _internal_mutable_engine_version();
  public:

  // string client_library_version = 12;
  void clear_client_library_version();
  const std::string& client_library_version() const;
  void set_client_library_version(const std::string& value);
  void set_client_library_version(std::string&& value);
  void set_client_library_version(const char* value);
  void set_client_library_version(const char* value, size_t size);
  std::string* mutable_client_library_version();
  std::string* release_client_library_version();
  void set_allocated_client_library_version(std::string* client_library_version);
  private:
  const std::string& _internal_client_library_version() const;
  void _internal_set_client_library_version(const std::string& value);
  std::string* _internal_mutable_client_library_version();
  public:

  // string full_name = 13;
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // string url = 14;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string user_agent = 15;
  void clear_user_agent();
  const std::string& user_agent() const;
  void set_user_agent(const std::string& value);
  void set_user_agent(std::string&& value);
  void set_user_agent(const char* value);
  void set_user_agent(const char* value, size_t size);
  std::string* mutable_user_agent();
  std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // string integration_version = 16;
  void clear_integration_version();
  const std::string& integration_version() const;
  void set_integration_version(const std::string& value);
  void set_integration_version(std::string&& value);
  void set_integration_version(const char* value);
  void set_integration_version(const char* value, size_t size);
  std::string* mutable_integration_version();
  std::string* release_integration_version();
  void set_allocated_integration_version(std::string* integration_version);
  private:
  const std::string& _internal_integration_version() const;
  void _internal_set_integration_version(const std::string& value);
  std::string* _internal_mutable_integration_version();
  public:

  // .inhumate.rti.proto.RuntimeState state = 3;
  void clear_state();
  ::inhumate::rti::proto::RuntimeState state() const;
  void set_state(::inhumate::rti::proto::RuntimeState value);
  private:
  ::inhumate::rti::proto::RuntimeState _internal_state() const;
  void _internal_set_state(::inhumate::rti::proto::RuntimeState value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Client)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> capabilities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engine_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_library_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_version_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clients_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT ParticipantRegistration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.ParticipantRegistration) */ {
 public:
  ParticipantRegistration();
  virtual ~ParticipantRegistration();

  ParticipantRegistration(const ParticipantRegistration& from);
  ParticipantRegistration(ParticipantRegistration&& from) noexcept
    : ParticipantRegistration() {
    *this = ::std::move(from);
  }

  inline ParticipantRegistration& operator=(const ParticipantRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipantRegistration& operator=(ParticipantRegistration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParticipantRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParticipantRegistration* internal_default_instance() {
    return reinterpret_cast<const ParticipantRegistration*>(
               &_ParticipantRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ParticipantRegistration& a, ParticipantRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(ParticipantRegistration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParticipantRegistration* New() const final {
    return CreateMaybeMessage<ParticipantRegistration>(nullptr);
  }

  ParticipantRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParticipantRegistration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParticipantRegistration& from);
  void MergeFrom(const ParticipantRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParticipantRegistration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.ParticipantRegistration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clients_2eproto);
    return ::descriptor_table_Clients_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kHostFieldNumber = 3,
    kStationFieldNumber = 4,
    kRoleFieldNumber = 5,
    kFullNameFieldNumber = 6,
  };
  // string participant = 1;
  void clear_participant();
  const std::string& participant() const;
  void set_participant(const std::string& value);
  void set_participant(std::string&& value);
  void set_participant(const char* value);
  void set_participant(const char* value, size_t size);
  std::string* mutable_participant();
  std::string* release_participant();
  void set_allocated_participant(std::string* participant);
  private:
  const std::string& _internal_participant() const;
  void _internal_set_participant(const std::string& value);
  std::string* _internal_mutable_participant();
  public:

  // string client_id = 2;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string host = 3;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string station = 4;
  void clear_station();
  const std::string& station() const;
  void set_station(const std::string& value);
  void set_station(std::string&& value);
  void set_station(const char* value);
  void set_station(const char* value, size_t size);
  std::string* mutable_station();
  std::string* release_station();
  void set_allocated_station(std::string* station);
  private:
  const std::string& _internal_station() const;
  void _internal_set_station(const std::string& value);
  std::string* _internal_mutable_station();
  public:

  // string role = 5;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string full_name = 6;
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.ParticipantRegistration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clients_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT ParticipantState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.ParticipantState) */ {
 public:
  ParticipantState();
  virtual ~ParticipantState();

  ParticipantState(const ParticipantState& from);
  ParticipantState(ParticipantState&& from) noexcept
    : ParticipantState() {
    *this = ::std::move(from);
  }

  inline ParticipantState& operator=(const ParticipantState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipantState& operator=(ParticipantState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParticipantState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParticipantState* internal_default_instance() {
    return reinterpret_cast<const ParticipantState*>(
               &_ParticipantState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ParticipantState& a, ParticipantState& b) {
    a.Swap(&b);
  }
  inline void Swap(ParticipantState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParticipantState* New() const final {
    return CreateMaybeMessage<ParticipantState>(nullptr);
  }

  ParticipantState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParticipantState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParticipantState& from);
  void MergeFrom(const ParticipantState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParticipantState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.ParticipantState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clients_2eproto);
    return ::descriptor_table_Clients_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantFieldNumber = 1,
    kReadyFieldNumber = 3,
  };
  // string participant = 1;
  void clear_participant();
  const std::string& participant() const;
  void set_participant(const std::string& value);
  void set_participant(std::string&& value);
  void set_participant(const char* value);
  void set_participant(const char* value, size_t size);
  std::string* mutable_participant();
  std::string* release_participant();
  void set_allocated_participant(std::string* participant);
  private:
  const std::string& _internal_participant() const;
  void _internal_set_participant(const std::string& value);
  std::string* _internal_mutable_participant();
  public:

  // bool ready = 3;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.ParticipantState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clients_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT ClientProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.ClientProgress) */ {
 public:
  ClientProgress();
  virtual ~ClientProgress();

  ClientProgress(const ClientProgress& from);
  ClientProgress(ClientProgress&& from) noexcept
    : ClientProgress() {
    *this = ::std::move(from);
  }

  inline ClientProgress& operator=(const ClientProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientProgress& operator=(ClientProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientProgress* internal_default_instance() {
    return reinterpret_cast<const ClientProgress*>(
               &_ClientProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientProgress& a, ClientProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientProgress* New() const final {
    return CreateMaybeMessage<ClientProgress>(nullptr);
  }

  ClientProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientProgress& from);
  void MergeFrom(const ClientProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.ClientProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clients_2eproto);
    return ::descriptor_table_Clients_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // uint32 progress = 2;
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::uint32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.ClientProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clients_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT ClientValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.ClientValue) */ {
 public:
  ClientValue();
  virtual ~ClientValue();

  ClientValue(const ClientValue& from);
  ClientValue(ClientValue&& from) noexcept
    : ClientValue() {
    *this = ::std::move(from);
  }

  inline ClientValue& operator=(const ClientValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientValue& operator=(ClientValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientValue* internal_default_instance() {
    return reinterpret_cast<const ClientValue*>(
               &_ClientValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientValue& a, ClientValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientValue* New() const final {
    return CreateMaybeMessage<ClientValue>(nullptr);
  }

  ClientValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientValue& from);
  void MergeFrom(const ClientValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.ClientValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clients_2eproto);
    return ::descriptor_table_Clients_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kValueFieldNumber = 2,
    kHighlightFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool highlight = 3;
  void clear_highlight();
  bool highlight() const;
  void set_highlight(bool value);
  private:
  bool _internal_highlight() const;
  void _internal_set_highlight(bool value);
  public:

  // bool error = 4;
  void clear_error();
  bool error() const;
  void set_error(bool value);
  private:
  bool _internal_error() const;
  void _internal_set_error(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.ClientValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool highlight_;
  bool error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clients_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT ClientHeartbeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.ClientHeartbeat) */ {
 public:
  ClientHeartbeat();
  virtual ~ClientHeartbeat();

  ClientHeartbeat(const ClientHeartbeat& from);
  ClientHeartbeat(ClientHeartbeat&& from) noexcept
    : ClientHeartbeat() {
    *this = ::std::move(from);
  }

  inline ClientHeartbeat& operator=(const ClientHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientHeartbeat& operator=(ClientHeartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientHeartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientHeartbeat* internal_default_instance() {
    return reinterpret_cast<const ClientHeartbeat*>(
               &_ClientHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientHeartbeat& a, ClientHeartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientHeartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientHeartbeat* New() const final {
    return CreateMaybeMessage<ClientHeartbeat>(nullptr);
  }

  ClientHeartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientHeartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientHeartbeat& from);
  void MergeFrom(const ClientHeartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientHeartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.ClientHeartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Clients_2eproto);
    return ::descriptor_table_Clients_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.ClientHeartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Clients_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Clients

// .google.protobuf.Empty request_clients = 1;
inline bool Clients::_internal_has_request_clients() const {
  return which_case() == kRequestClients;
}
inline bool Clients::has_request_clients() const {
  return _internal_has_request_clients();
}
inline void Clients::set_has_request_clients() {
  _oneof_case_[0] = kRequestClients;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Clients::release_request_clients() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Clients.request_clients)
  if (_internal_has_request_clients()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_clients_;
    which_.request_clients_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Clients::_internal_request_clients() const {
  return _internal_has_request_clients()
      ? *which_.request_clients_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Clients::request_clients() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Clients.request_clients)
  return _internal_request_clients();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Clients::_internal_mutable_request_clients() {
  if (!_internal_has_request_clients()) {
    clear_which();
    set_has_request_clients();
    which_.request_clients_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_clients_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Clients::mutable_request_clients() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Clients.request_clients)
  return _internal_mutable_request_clients();
}

// .inhumate.rti.proto.Client client = 2;
inline bool Clients::_internal_has_client() const {
  return which_case() == kClient;
}
inline bool Clients::has_client() const {
  return _internal_has_client();
}
inline void Clients::set_has_client() {
  _oneof_case_[0] = kClient;
}
inline void Clients::clear_client() {
  if (_internal_has_client()) {
    delete which_.client_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Client* Clients::release_client() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Clients.client)
  if (_internal_has_client()) {
    clear_has_which();
      ::inhumate::rti::proto::Client* temp = which_.client_;
    which_.client_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Client& Clients::_internal_client() const {
  return _internal_has_client()
      ? *which_.client_
      : *reinterpret_cast< ::inhumate::rti::proto::Client*>(&::inhumate::rti::proto::_Client_default_instance_);
}
inline const ::inhumate::rti::proto::Client& Clients::client() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Clients.client)
  return _internal_client();
}
inline ::inhumate::rti::proto::Client* Clients::_internal_mutable_client() {
  if (!_internal_has_client()) {
    clear_which();
    set_has_client();
    which_.client_ = CreateMaybeMessage< ::inhumate::rti::proto::Client >(
        GetArenaNoVirtual());
  }
  return which_.client_;
}
inline ::inhumate::rti::proto::Client* Clients::mutable_client() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Clients.client)
  return _internal_mutable_client();
}

// .inhumate.rti.proto.Client log_client = 3;
inline bool Clients::_internal_has_log_client() const {
  return which_case() == kLogClient;
}
inline bool Clients::has_log_client() const {
  return _internal_has_log_client();
}
inline void Clients::set_has_log_client() {
  _oneof_case_[0] = kLogClient;
}
inline void Clients::clear_log_client() {
  if (_internal_has_log_client()) {
    delete which_.log_client_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Client* Clients::release_log_client() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Clients.log_client)
  if (_internal_has_log_client()) {
    clear_has_which();
      ::inhumate::rti::proto::Client* temp = which_.log_client_;
    which_.log_client_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Client& Clients::_internal_log_client() const {
  return _internal_has_log_client()
      ? *which_.log_client_
      : *reinterpret_cast< ::inhumate::rti::proto::Client*>(&::inhumate::rti::proto::_Client_default_instance_);
}
inline const ::inhumate::rti::proto::Client& Clients::log_client() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Clients.log_client)
  return _internal_log_client();
}
inline ::inhumate::rti::proto::Client* Clients::_internal_mutable_log_client() {
  if (!_internal_has_log_client()) {
    clear_which();
    set_has_log_client();
    which_.log_client_ = CreateMaybeMessage< ::inhumate::rti::proto::Client >(
        GetArenaNoVirtual());
  }
  return which_.log_client_;
}
inline ::inhumate::rti::proto::Client* Clients::mutable_log_client() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Clients.log_client)
  return _internal_mutable_log_client();
}

// .inhumate.rti.proto.ParticipantRegistration register_participant = 4;
inline bool Clients::_internal_has_register_participant() const {
  return which_case() == kRegisterParticipant;
}
inline bool Clients::has_register_participant() const {
  return _internal_has_register_participant();
}
inline void Clients::set_has_register_participant() {
  _oneof_case_[0] = kRegisterParticipant;
}
inline void Clients::clear_register_participant() {
  if (_internal_has_register_participant()) {
    delete which_.register_participant_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::ParticipantRegistration* Clients::release_register_participant() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Clients.register_participant)
  if (_internal_has_register_participant()) {
    clear_has_which();
      ::inhumate::rti::proto::ParticipantRegistration* temp = which_.register_participant_;
    which_.register_participant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::ParticipantRegistration& Clients::_internal_register_participant() const {
  return _internal_has_register_participant()
      ? *which_.register_participant_
      : *reinterpret_cast< ::inhumate::rti::proto::ParticipantRegistration*>(&::inhumate::rti::proto::_ParticipantRegistration_default_instance_);
}
inline const ::inhumate::rti::proto::ParticipantRegistration& Clients::register_participant() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Clients.register_participant)
  return _internal_register_participant();
}
inline ::inhumate::rti::proto::ParticipantRegistration* Clients::_internal_mutable_register_participant() {
  if (!_internal_has_register_participant()) {
    clear_which();
    set_has_register_participant();
    which_.register_participant_ = CreateMaybeMessage< ::inhumate::rti::proto::ParticipantRegistration >(
        GetArenaNoVirtual());
  }
  return which_.register_participant_;
}
inline ::inhumate::rti::proto::ParticipantRegistration* Clients::mutable_register_participant() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Clients.register_participant)
  return _internal_mutable_register_participant();
}

// .inhumate.rti.proto.ParticipantState participant_state = 5;
inline bool Clients::_internal_has_participant_state() const {
  return which_case() == kParticipantState;
}
inline bool Clients::has_participant_state() const {
  return _internal_has_participant_state();
}
inline void Clients::set_has_participant_state() {
  _oneof_case_[0] = kParticipantState;
}
inline void Clients::clear_participant_state() {
  if (_internal_has_participant_state()) {
    delete which_.participant_state_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::ParticipantState* Clients::release_participant_state() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Clients.participant_state)
  if (_internal_has_participant_state()) {
    clear_has_which();
      ::inhumate::rti::proto::ParticipantState* temp = which_.participant_state_;
    which_.participant_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::ParticipantState& Clients::_internal_participant_state() const {
  return _internal_has_participant_state()
      ? *which_.participant_state_
      : *reinterpret_cast< ::inhumate::rti::proto::ParticipantState*>(&::inhumate::rti::proto::_ParticipantState_default_instance_);
}
inline const ::inhumate::rti::proto::ParticipantState& Clients::participant_state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Clients.participant_state)
  return _internal_participant_state();
}
inline ::inhumate::rti::proto::ParticipantState* Clients::_internal_mutable_participant_state() {
  if (!_internal_has_participant_state()) {
    clear_which();
    set_has_participant_state();
    which_.participant_state_ = CreateMaybeMessage< ::inhumate::rti::proto::ParticipantState >(
        GetArenaNoVirtual());
  }
  return which_.participant_state_;
}
inline ::inhumate::rti::proto::ParticipantState* Clients::mutable_participant_state() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Clients.participant_state)
  return _internal_mutable_participant_state();
}

// .inhumate.rti.proto.ClientProgress progress = 6;
inline bool Clients::_internal_has_progress() const {
  return which_case() == kProgress;
}
inline bool Clients::has_progress() const {
  return _internal_has_progress();
}
inline void Clients::set_has_progress() {
  _oneof_case_[0] = kProgress;
}
inline void Clients::clear_progress() {
  if (_internal_has_progress()) {
    delete which_.progress_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::ClientProgress* Clients::release_progress() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Clients.progress)
  if (_internal_has_progress()) {
    clear_has_which();
      ::inhumate::rti::proto::ClientProgress* temp = which_.progress_;
    which_.progress_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::ClientProgress& Clients::_internal_progress() const {
  return _internal_has_progress()
      ? *which_.progress_
      : *reinterpret_cast< ::inhumate::rti::proto::ClientProgress*>(&::inhumate::rti::proto::_ClientProgress_default_instance_);
}
inline const ::inhumate::rti::proto::ClientProgress& Clients::progress() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Clients.progress)
  return _internal_progress();
}
inline ::inhumate::rti::proto::ClientProgress* Clients::_internal_mutable_progress() {
  if (!_internal_has_progress()) {
    clear_which();
    set_has_progress();
    which_.progress_ = CreateMaybeMessage< ::inhumate::rti::proto::ClientProgress >(
        GetArenaNoVirtual());
  }
  return which_.progress_;
}
inline ::inhumate::rti::proto::ClientProgress* Clients::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Clients.progress)
  return _internal_mutable_progress();
}

// .inhumate.rti.proto.ClientValue value = 7;
inline bool Clients::_internal_has_value() const {
  return which_case() == kValue;
}
inline bool Clients::has_value() const {
  return _internal_has_value();
}
inline void Clients::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void Clients::clear_value() {
  if (_internal_has_value()) {
    delete which_.value_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::ClientValue* Clients::release_value() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Clients.value)
  if (_internal_has_value()) {
    clear_has_which();
      ::inhumate::rti::proto::ClientValue* temp = which_.value_;
    which_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::ClientValue& Clients::_internal_value() const {
  return _internal_has_value()
      ? *which_.value_
      : *reinterpret_cast< ::inhumate::rti::proto::ClientValue*>(&::inhumate::rti::proto::_ClientValue_default_instance_);
}
inline const ::inhumate::rti::proto::ClientValue& Clients::value() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Clients.value)
  return _internal_value();
}
inline ::inhumate::rti::proto::ClientValue* Clients::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_which();
    set_has_value();
    which_.value_ = CreateMaybeMessage< ::inhumate::rti::proto::ClientValue >(
        GetArenaNoVirtual());
  }
  return which_.value_;
}
inline ::inhumate::rti::proto::ClientValue* Clients::mutable_value() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Clients.value)
  return _internal_mutable_value();
}

// .inhumate.rti.proto.ClientHeartbeat heartbeat = 8;
inline bool Clients::_internal_has_heartbeat() const {
  return which_case() == kHeartbeat;
}
inline bool Clients::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void Clients::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void Clients::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    delete which_.heartbeat_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::ClientHeartbeat* Clients::release_heartbeat() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Clients.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_which();
      ::inhumate::rti::proto::ClientHeartbeat* temp = which_.heartbeat_;
    which_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::ClientHeartbeat& Clients::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *which_.heartbeat_
      : *reinterpret_cast< ::inhumate::rti::proto::ClientHeartbeat*>(&::inhumate::rti::proto::_ClientHeartbeat_default_instance_);
}
inline const ::inhumate::rti::proto::ClientHeartbeat& Clients::heartbeat() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Clients.heartbeat)
  return _internal_heartbeat();
}
inline ::inhumate::rti::proto::ClientHeartbeat* Clients::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_which();
    set_has_heartbeat();
    which_.heartbeat_ = CreateMaybeMessage< ::inhumate::rti::proto::ClientHeartbeat >(
        GetArenaNoVirtual());
  }
  return which_.heartbeat_;
}
inline ::inhumate::rti::proto::ClientHeartbeat* Clients::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Clients.heartbeat)
  return _internal_mutable_heartbeat();
}

inline bool Clients::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void Clients::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline Clients::WhichCase Clients::which_case() const {
  return Clients::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Client

// string id = 1;
inline void Client::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.id)
  return _internal_id();
}
inline void Client::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.id)
}
inline std::string* Client::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.id)
  return _internal_mutable_id();
}
inline const std::string& Client::_internal_id() const {
  return id_.GetNoArena();
}
inline void Client::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.id)
}
inline void Client::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.id)
}
inline void Client::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.id)
}
inline std::string* Client::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.id)
}

// string application = 2;
inline void Client::clear_application() {
  application_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::application() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.application)
  return _internal_application();
}
inline void Client::set_application(const std::string& value) {
  _internal_set_application(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.application)
}
inline std::string* Client::mutable_application() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.application)
  return _internal_mutable_application();
}
inline const std::string& Client::_internal_application() const {
  return application_.GetNoArena();
}
inline void Client::_internal_set_application(const std::string& value) {
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_application(std::string&& value) {
  
  application_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.application)
}
inline void Client::set_application(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.application)
}
inline void Client::set_application(const char* value, size_t size) {
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.application)
}
inline std::string* Client::_internal_mutable_application() {
  
  return application_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_application() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.application)
  
  return application_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_application(std::string* application) {
  if (application != nullptr) {
    
  } else {
    
  }
  application_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.application)
}

// .inhumate.rti.proto.RuntimeState state = 3;
inline void Client::clear_state() {
  state_ = 0;
}
inline ::inhumate::rti::proto::RuntimeState Client::_internal_state() const {
  return static_cast< ::inhumate::rti::proto::RuntimeState >(state_);
}
inline ::inhumate::rti::proto::RuntimeState Client::state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.state)
  return _internal_state();
}
inline void Client::_internal_set_state(::inhumate::rti::proto::RuntimeState value) {
  
  state_ = value;
}
inline void Client::set_state(::inhumate::rti::proto::RuntimeState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.state)
}

// string host = 5;
inline void Client::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::host() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.host)
  return _internal_host();
}
inline void Client::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.host)
}
inline std::string* Client::mutable_host() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.host)
  return _internal_mutable_host();
}
inline const std::string& Client::_internal_host() const {
  return host_.GetNoArena();
}
inline void Client::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.host)
}
inline void Client::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.host)
}
inline void Client::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.host)
}
inline std::string* Client::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_host() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.host)
}

// string station = 6;
inline void Client::clear_station() {
  station_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::station() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.station)
  return _internal_station();
}
inline void Client::set_station(const std::string& value) {
  _internal_set_station(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.station)
}
inline std::string* Client::mutable_station() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.station)
  return _internal_mutable_station();
}
inline const std::string& Client::_internal_station() const {
  return station_.GetNoArena();
}
inline void Client::_internal_set_station(const std::string& value) {
  
  station_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_station(std::string&& value) {
  
  station_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.station)
}
inline void Client::set_station(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  station_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.station)
}
inline void Client::set_station(const char* value, size_t size) {
  
  station_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.station)
}
inline std::string* Client::_internal_mutable_station() {
  
  return station_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_station() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.station)
  
  return station_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_station(std::string* station) {
  if (station != nullptr) {
    
  } else {
    
  }
  station_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), station);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.station)
}

// string user = 7;
inline void Client::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::user() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.user)
  return _internal_user();
}
inline void Client::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.user)
}
inline std::string* Client::mutable_user() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.user)
  return _internal_mutable_user();
}
inline const std::string& Client::_internal_user() const {
  return user_.GetNoArena();
}
inline void Client::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.user)
}
inline void Client::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.user)
}
inline void Client::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.user)
}
inline std::string* Client::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_user() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.user)
}

// string participant = 8;
inline void Client::clear_participant() {
  participant_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::participant() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.participant)
  return _internal_participant();
}
inline void Client::set_participant(const std::string& value) {
  _internal_set_participant(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.participant)
}
inline std::string* Client::mutable_participant() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.participant)
  return _internal_mutable_participant();
}
inline const std::string& Client::_internal_participant() const {
  return participant_.GetNoArena();
}
inline void Client::_internal_set_participant(const std::string& value) {
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_participant(std::string&& value) {
  
  participant_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.participant)
}
inline void Client::set_participant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.participant)
}
inline void Client::set_participant(const char* value, size_t size) {
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.participant)
}
inline std::string* Client::_internal_mutable_participant() {
  
  return participant_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_participant() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.participant)
  
  return participant_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_participant(std::string* participant) {
  if (participant != nullptr) {
    
  } else {
    
  }
  participant_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.participant)
}

// string role = 9;
inline void Client::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::role() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.role)
  return _internal_role();
}
inline void Client::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.role)
}
inline std::string* Client::mutable_role() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.role)
  return _internal_mutable_role();
}
inline const std::string& Client::_internal_role() const {
  return role_.GetNoArena();
}
inline void Client::_internal_set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.role)
}
inline void Client::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.role)
}
inline void Client::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.role)
}
inline std::string* Client::_internal_mutable_role() {
  
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_role() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.role)
}

// string application_version = 10;
inline void Client::clear_application_version() {
  application_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::application_version() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.application_version)
  return _internal_application_version();
}
inline void Client::set_application_version(const std::string& value) {
  _internal_set_application_version(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.application_version)
}
inline std::string* Client::mutable_application_version() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.application_version)
  return _internal_mutable_application_version();
}
inline const std::string& Client::_internal_application_version() const {
  return application_version_.GetNoArena();
}
inline void Client::_internal_set_application_version(const std::string& value) {
  
  application_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_application_version(std::string&& value) {
  
  application_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.application_version)
}
inline void Client::set_application_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.application_version)
}
inline void Client::set_application_version(const char* value, size_t size) {
  
  application_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.application_version)
}
inline std::string* Client::_internal_mutable_application_version() {
  
  return application_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_application_version() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.application_version)
  
  return application_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_application_version(std::string* application_version) {
  if (application_version != nullptr) {
    
  } else {
    
  }
  application_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_version);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.application_version)
}

// string engine_version = 11;
inline void Client::clear_engine_version() {
  engine_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::engine_version() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.engine_version)
  return _internal_engine_version();
}
inline void Client::set_engine_version(const std::string& value) {
  _internal_set_engine_version(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.engine_version)
}
inline std::string* Client::mutable_engine_version() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.engine_version)
  return _internal_mutable_engine_version();
}
inline const std::string& Client::_internal_engine_version() const {
  return engine_version_.GetNoArena();
}
inline void Client::_internal_set_engine_version(const std::string& value) {
  
  engine_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_engine_version(std::string&& value) {
  
  engine_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.engine_version)
}
inline void Client::set_engine_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  engine_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.engine_version)
}
inline void Client::set_engine_version(const char* value, size_t size) {
  
  engine_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.engine_version)
}
inline std::string* Client::_internal_mutable_engine_version() {
  
  return engine_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_engine_version() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.engine_version)
  
  return engine_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_engine_version(std::string* engine_version) {
  if (engine_version != nullptr) {
    
  } else {
    
  }
  engine_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), engine_version);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.engine_version)
}

// string client_library_version = 12;
inline void Client::clear_client_library_version() {
  client_library_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::client_library_version() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.client_library_version)
  return _internal_client_library_version();
}
inline void Client::set_client_library_version(const std::string& value) {
  _internal_set_client_library_version(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.client_library_version)
}
inline std::string* Client::mutable_client_library_version() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.client_library_version)
  return _internal_mutable_client_library_version();
}
inline const std::string& Client::_internal_client_library_version() const {
  return client_library_version_.GetNoArena();
}
inline void Client::_internal_set_client_library_version(const std::string& value) {
  
  client_library_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_client_library_version(std::string&& value) {
  
  client_library_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.client_library_version)
}
inline void Client::set_client_library_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_library_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.client_library_version)
}
inline void Client::set_client_library_version(const char* value, size_t size) {
  
  client_library_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.client_library_version)
}
inline std::string* Client::_internal_mutable_client_library_version() {
  
  return client_library_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_client_library_version() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.client_library_version)
  
  return client_library_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_client_library_version(std::string* client_library_version) {
  if (client_library_version != nullptr) {
    
  } else {
    
  }
  client_library_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_library_version);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.client_library_version)
}

// string full_name = 13;
inline void Client::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::full_name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.full_name)
  return _internal_full_name();
}
inline void Client::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.full_name)
}
inline std::string* Client::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& Client::_internal_full_name() const {
  return full_name_.GetNoArena();
}
inline void Client::_internal_set_full_name(const std::string& value) {
  
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_full_name(std::string&& value) {
  
  full_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.full_name)
}
inline void Client::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.full_name)
}
inline void Client::set_full_name(const char* value, size_t size) {
  
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.full_name)
}
inline std::string* Client::_internal_mutable_full_name() {
  
  return full_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_full_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.full_name)
  
  return full_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.full_name)
}

// string url = 14;
inline void Client::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::url() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.url)
  return _internal_url();
}
inline void Client::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.url)
}
inline std::string* Client::mutable_url() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.url)
  return _internal_mutable_url();
}
inline const std::string& Client::_internal_url() const {
  return url_.GetNoArena();
}
inline void Client::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.url)
}
inline void Client::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.url)
}
inline void Client::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.url)
}
inline std::string* Client::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_url() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.url)
}

// string user_agent = 15;
inline void Client::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::user_agent() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.user_agent)
  return _internal_user_agent();
}
inline void Client::set_user_agent(const std::string& value) {
  _internal_set_user_agent(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.user_agent)
}
inline std::string* Client::mutable_user_agent() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.user_agent)
  return _internal_mutable_user_agent();
}
inline const std::string& Client::_internal_user_agent() const {
  return user_agent_.GetNoArena();
}
inline void Client::_internal_set_user_agent(const std::string& value) {
  
  user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_user_agent(std::string&& value) {
  
  user_agent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.user_agent)
}
inline void Client::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.user_agent)
}
inline void Client::set_user_agent(const char* value, size_t size) {
  
  user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.user_agent)
}
inline std::string* Client::_internal_mutable_user_agent() {
  
  return user_agent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_user_agent() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.user_agent)
  
  return user_agent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    
  } else {
    
  }
  user_agent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.user_agent)
}

// string integration_version = 16;
inline void Client::clear_integration_version() {
  integration_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client::integration_version() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.integration_version)
  return _internal_integration_version();
}
inline void Client::set_integration_version(const std::string& value) {
  _internal_set_integration_version(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.integration_version)
}
inline std::string* Client::mutable_integration_version() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.integration_version)
  return _internal_mutable_integration_version();
}
inline const std::string& Client::_internal_integration_version() const {
  return integration_version_.GetNoArena();
}
inline void Client::_internal_set_integration_version(const std::string& value) {
  
  integration_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client::set_integration_version(std::string&& value) {
  
  integration_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Client.integration_version)
}
inline void Client::set_integration_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  integration_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.integration_version)
}
inline void Client::set_integration_version(const char* value, size_t size) {
  
  integration_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.integration_version)
}
inline std::string* Client::_internal_mutable_integration_version() {
  
  return integration_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client::release_integration_version() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Client.integration_version)
  
  return integration_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_integration_version(std::string* integration_version) {
  if (integration_version != nullptr) {
    
  } else {
    
  }
  integration_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration_version);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Client.integration_version)
}

// repeated string capabilities = 17;
inline int Client::_internal_capabilities_size() const {
  return capabilities_.size();
}
inline int Client::capabilities_size() const {
  return _internal_capabilities_size();
}
inline void Client::clear_capabilities() {
  capabilities_.Clear();
}
inline std::string* Client::add_capabilities() {
  // @@protoc_insertion_point(field_add_mutable:inhumate.rti.proto.Client.capabilities)
  return _internal_add_capabilities();
}
inline const std::string& Client::_internal_capabilities(int index) const {
  return capabilities_.Get(index);
}
inline const std::string& Client::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Client.capabilities)
  return _internal_capabilities(index);
}
inline std::string* Client::mutable_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Client.capabilities)
  return capabilities_.Mutable(index);
}
inline void Client::set_capabilities(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.capabilities)
  capabilities_.Mutable(index)->assign(value);
}
inline void Client::set_capabilities(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Client.capabilities)
  capabilities_.Mutable(index)->assign(std::move(value));
}
inline void Client::set_capabilities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Client.capabilities)
}
inline void Client::set_capabilities(int index, const char* value, size_t size) {
  capabilities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Client.capabilities)
}
inline std::string* Client::_internal_add_capabilities() {
  return capabilities_.Add();
}
inline void Client::add_capabilities(const std::string& value) {
  capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Client.capabilities)
}
inline void Client::add_capabilities(std::string&& value) {
  capabilities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.Client.capabilities)
}
inline void Client::add_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:inhumate.rti.proto.Client.capabilities)
}
inline void Client::add_capabilities(const char* value, size_t size) {
  capabilities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:inhumate.rti.proto.Client.capabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Client::capabilities() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.Client.capabilities)
  return capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Client::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.Client.capabilities)
  return &capabilities_;
}

// -------------------------------------------------------------------

// ParticipantRegistration

// string participant = 1;
inline void ParticipantRegistration::clear_participant() {
  participant_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParticipantRegistration::participant() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ParticipantRegistration.participant)
  return _internal_participant();
}
inline void ParticipantRegistration::set_participant(const std::string& value) {
  _internal_set_participant(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ParticipantRegistration.participant)
}
inline std::string* ParticipantRegistration::mutable_participant() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ParticipantRegistration.participant)
  return _internal_mutable_participant();
}
inline const std::string& ParticipantRegistration::_internal_participant() const {
  return participant_.GetNoArena();
}
inline void ParticipantRegistration::_internal_set_participant(const std::string& value) {
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParticipantRegistration::set_participant(std::string&& value) {
  
  participant_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ParticipantRegistration.participant)
}
inline void ParticipantRegistration::set_participant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ParticipantRegistration.participant)
}
inline void ParticipantRegistration::set_participant(const char* value, size_t size) {
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ParticipantRegistration.participant)
}
inline std::string* ParticipantRegistration::_internal_mutable_participant() {
  
  return participant_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParticipantRegistration::release_participant() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ParticipantRegistration.participant)
  
  return participant_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipantRegistration::set_allocated_participant(std::string* participant) {
  if (participant != nullptr) {
    
  } else {
    
  }
  participant_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ParticipantRegistration.participant)
}

// string client_id = 2;
inline void ParticipantRegistration::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParticipantRegistration::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ParticipantRegistration.client_id)
  return _internal_client_id();
}
inline void ParticipantRegistration::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ParticipantRegistration.client_id)
}
inline std::string* ParticipantRegistration::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ParticipantRegistration.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& ParticipantRegistration::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void ParticipantRegistration::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParticipantRegistration::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ParticipantRegistration.client_id)
}
inline void ParticipantRegistration::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ParticipantRegistration.client_id)
}
inline void ParticipantRegistration::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ParticipantRegistration.client_id)
}
inline std::string* ParticipantRegistration::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParticipantRegistration::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ParticipantRegistration.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipantRegistration::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ParticipantRegistration.client_id)
}

// string host = 3;
inline void ParticipantRegistration::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParticipantRegistration::host() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ParticipantRegistration.host)
  return _internal_host();
}
inline void ParticipantRegistration::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ParticipantRegistration.host)
}
inline std::string* ParticipantRegistration::mutable_host() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ParticipantRegistration.host)
  return _internal_mutable_host();
}
inline const std::string& ParticipantRegistration::_internal_host() const {
  return host_.GetNoArena();
}
inline void ParticipantRegistration::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParticipantRegistration::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ParticipantRegistration.host)
}
inline void ParticipantRegistration::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ParticipantRegistration.host)
}
inline void ParticipantRegistration::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ParticipantRegistration.host)
}
inline std::string* ParticipantRegistration::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParticipantRegistration::release_host() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ParticipantRegistration.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipantRegistration::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ParticipantRegistration.host)
}

// string station = 4;
inline void ParticipantRegistration::clear_station() {
  station_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParticipantRegistration::station() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ParticipantRegistration.station)
  return _internal_station();
}
inline void ParticipantRegistration::set_station(const std::string& value) {
  _internal_set_station(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ParticipantRegistration.station)
}
inline std::string* ParticipantRegistration::mutable_station() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ParticipantRegistration.station)
  return _internal_mutable_station();
}
inline const std::string& ParticipantRegistration::_internal_station() const {
  return station_.GetNoArena();
}
inline void ParticipantRegistration::_internal_set_station(const std::string& value) {
  
  station_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParticipantRegistration::set_station(std::string&& value) {
  
  station_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ParticipantRegistration.station)
}
inline void ParticipantRegistration::set_station(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  station_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ParticipantRegistration.station)
}
inline void ParticipantRegistration::set_station(const char* value, size_t size) {
  
  station_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ParticipantRegistration.station)
}
inline std::string* ParticipantRegistration::_internal_mutable_station() {
  
  return station_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParticipantRegistration::release_station() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ParticipantRegistration.station)
  
  return station_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipantRegistration::set_allocated_station(std::string* station) {
  if (station != nullptr) {
    
  } else {
    
  }
  station_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), station);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ParticipantRegistration.station)
}

// string role = 5;
inline void ParticipantRegistration::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParticipantRegistration::role() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ParticipantRegistration.role)
  return _internal_role();
}
inline void ParticipantRegistration::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ParticipantRegistration.role)
}
inline std::string* ParticipantRegistration::mutable_role() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ParticipantRegistration.role)
  return _internal_mutable_role();
}
inline const std::string& ParticipantRegistration::_internal_role() const {
  return role_.GetNoArena();
}
inline void ParticipantRegistration::_internal_set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParticipantRegistration::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ParticipantRegistration.role)
}
inline void ParticipantRegistration::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ParticipantRegistration.role)
}
inline void ParticipantRegistration::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ParticipantRegistration.role)
}
inline std::string* ParticipantRegistration::_internal_mutable_role() {
  
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParticipantRegistration::release_role() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ParticipantRegistration.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipantRegistration::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ParticipantRegistration.role)
}

// string full_name = 6;
inline void ParticipantRegistration::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParticipantRegistration::full_name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ParticipantRegistration.full_name)
  return _internal_full_name();
}
inline void ParticipantRegistration::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ParticipantRegistration.full_name)
}
inline std::string* ParticipantRegistration::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ParticipantRegistration.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& ParticipantRegistration::_internal_full_name() const {
  return full_name_.GetNoArena();
}
inline void ParticipantRegistration::_internal_set_full_name(const std::string& value) {
  
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParticipantRegistration::set_full_name(std::string&& value) {
  
  full_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ParticipantRegistration.full_name)
}
inline void ParticipantRegistration::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ParticipantRegistration.full_name)
}
inline void ParticipantRegistration::set_full_name(const char* value, size_t size) {
  
  full_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ParticipantRegistration.full_name)
}
inline std::string* ParticipantRegistration::_internal_mutable_full_name() {
  
  return full_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParticipantRegistration::release_full_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ParticipantRegistration.full_name)
  
  return full_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipantRegistration::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ParticipantRegistration.full_name)
}

// -------------------------------------------------------------------

// ParticipantState

// string participant = 1;
inline void ParticipantState::clear_participant() {
  participant_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ParticipantState::participant() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ParticipantState.participant)
  return _internal_participant();
}
inline void ParticipantState::set_participant(const std::string& value) {
  _internal_set_participant(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ParticipantState.participant)
}
inline std::string* ParticipantState::mutable_participant() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ParticipantState.participant)
  return _internal_mutable_participant();
}
inline const std::string& ParticipantState::_internal_participant() const {
  return participant_.GetNoArena();
}
inline void ParticipantState::_internal_set_participant(const std::string& value) {
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParticipantState::set_participant(std::string&& value) {
  
  participant_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ParticipantState.participant)
}
inline void ParticipantState::set_participant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ParticipantState.participant)
}
inline void ParticipantState::set_participant(const char* value, size_t size) {
  
  participant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ParticipantState.participant)
}
inline std::string* ParticipantState::_internal_mutable_participant() {
  
  return participant_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParticipantState::release_participant() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ParticipantState.participant)
  
  return participant_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParticipantState::set_allocated_participant(std::string* participant) {
  if (participant != nullptr) {
    
  } else {
    
  }
  participant_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ParticipantState.participant)
}

// bool ready = 3;
inline void ParticipantState::clear_ready() {
  ready_ = false;
}
inline bool ParticipantState::_internal_ready() const {
  return ready_;
}
inline bool ParticipantState::ready() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ParticipantState.ready)
  return _internal_ready();
}
inline void ParticipantState::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void ParticipantState::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ParticipantState.ready)
}

// -------------------------------------------------------------------

// ClientProgress

// string client_id = 1;
inline void ClientProgress::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientProgress::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ClientProgress.client_id)
  return _internal_client_id();
}
inline void ClientProgress::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ClientProgress.client_id)
}
inline std::string* ClientProgress::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ClientProgress.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& ClientProgress::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void ClientProgress::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientProgress::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ClientProgress.client_id)
}
inline void ClientProgress::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ClientProgress.client_id)
}
inline void ClientProgress::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ClientProgress.client_id)
}
inline std::string* ClientProgress::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientProgress::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ClientProgress.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientProgress::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ClientProgress.client_id)
}

// uint32 progress = 2;
inline void ClientProgress::clear_progress() {
  progress_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientProgress::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientProgress::progress() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ClientProgress.progress)
  return _internal_progress();
}
inline void ClientProgress::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  progress_ = value;
}
inline void ClientProgress::set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ClientProgress.progress)
}

// -------------------------------------------------------------------

// ClientValue

// string client_id = 1;
inline void ClientValue::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientValue::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ClientValue.client_id)
  return _internal_client_id();
}
inline void ClientValue::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ClientValue.client_id)
}
inline std::string* ClientValue::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ClientValue.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& ClientValue::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void ClientValue::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientValue::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ClientValue.client_id)
}
inline void ClientValue::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ClientValue.client_id)
}
inline void ClientValue::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ClientValue.client_id)
}
inline std::string* ClientValue::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientValue::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ClientValue.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientValue::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ClientValue.client_id)
}

// string value = 2;
inline void ClientValue::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientValue::value() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ClientValue.value)
  return _internal_value();
}
inline void ClientValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ClientValue.value)
}
inline std::string* ClientValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ClientValue.value)
  return _internal_mutable_value();
}
inline const std::string& ClientValue::_internal_value() const {
  return value_.GetNoArena();
}
inline void ClientValue::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientValue::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ClientValue.value)
}
inline void ClientValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ClientValue.value)
}
inline void ClientValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ClientValue.value)
}
inline std::string* ClientValue::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientValue::release_value() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ClientValue.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ClientValue.value)
}

// bool highlight = 3;
inline void ClientValue::clear_highlight() {
  highlight_ = false;
}
inline bool ClientValue::_internal_highlight() const {
  return highlight_;
}
inline bool ClientValue::highlight() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ClientValue.highlight)
  return _internal_highlight();
}
inline void ClientValue::_internal_set_highlight(bool value) {
  
  highlight_ = value;
}
inline void ClientValue::set_highlight(bool value) {
  _internal_set_highlight(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ClientValue.highlight)
}

// bool error = 4;
inline void ClientValue::clear_error() {
  error_ = false;
}
inline bool ClientValue::_internal_error() const {
  return error_;
}
inline bool ClientValue::error() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ClientValue.error)
  return _internal_error();
}
inline void ClientValue::_internal_set_error(bool value) {
  
  error_ = value;
}
inline void ClientValue::set_error(bool value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ClientValue.error)
}

// -------------------------------------------------------------------

// ClientHeartbeat

// string client_id = 1;
inline void ClientHeartbeat::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientHeartbeat::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ClientHeartbeat.client_id)
  return _internal_client_id();
}
inline void ClientHeartbeat::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ClientHeartbeat.client_id)
}
inline std::string* ClientHeartbeat::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ClientHeartbeat.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& ClientHeartbeat::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void ClientHeartbeat::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientHeartbeat::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ClientHeartbeat.client_id)
}
inline void ClientHeartbeat::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ClientHeartbeat.client_id)
}
inline void ClientHeartbeat::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ClientHeartbeat.client_id)
}
inline std::string* ClientHeartbeat::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientHeartbeat::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ClientHeartbeat.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientHeartbeat::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ClientHeartbeat.client_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Clients_2eproto
