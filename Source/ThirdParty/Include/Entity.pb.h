// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Entity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Entity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Entity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "EntityPosition.pb.h"
#include "EntityCategory.pb.h"
#include "EntityDomain.pb.h"
#include "LVCCategory.pb.h"
#include "Color.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Entity_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Entity_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Entity_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Entity;
class EntityDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern EntityDefaultTypeInternal _Entity_default_instance_;
class Entity_Dimensions;
class Entity_DimensionsDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern Entity_DimensionsDefaultTypeInternal _Entity_Dimensions_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Entity* Arena::CreateMaybeMessage<::inhumate::rti::proto::Entity>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Entity_Dimensions* Arena::CreateMaybeMessage<::inhumate::rti::proto::Entity_Dimensions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Entity_Dimensions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Entity.Dimensions) */ {
 public:
  Entity_Dimensions();
  virtual ~Entity_Dimensions();

  Entity_Dimensions(const Entity_Dimensions& from);
  Entity_Dimensions(Entity_Dimensions&& from) noexcept
    : Entity_Dimensions() {
    *this = ::std::move(from);
  }

  inline Entity_Dimensions& operator=(const Entity_Dimensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity_Dimensions& operator=(Entity_Dimensions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entity_Dimensions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity_Dimensions* internal_default_instance() {
    return reinterpret_cast<const Entity_Dimensions*>(
               &_Entity_Dimensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entity_Dimensions& a, Entity_Dimensions& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity_Dimensions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entity_Dimensions* New() const final {
    return CreateMaybeMessage<Entity_Dimensions>(nullptr);
  }

  Entity_Dimensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entity_Dimensions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entity_Dimensions& from);
  void MergeFrom(const Entity_Dimensions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity_Dimensions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Entity.Dimensions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Entity_2eproto);
    return ::descriptor_table_Entity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 4,
    kLengthFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // .inhumate.rti.proto.EntityPosition.LocalPosition center = 4;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::inhumate::rti::proto::EntityPosition_LocalPosition& center() const;
  ::inhumate::rti::proto::EntityPosition_LocalPosition* release_center();
  ::inhumate::rti::proto::EntityPosition_LocalPosition* mutable_center();
  void set_allocated_center(::inhumate::rti::proto::EntityPosition_LocalPosition* center);
  private:
  const ::inhumate::rti::proto::EntityPosition_LocalPosition& _internal_center() const;
  ::inhumate::rti::proto::EntityPosition_LocalPosition* _internal_mutable_center();
  public:

  // float length = 1;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float width = 2;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Entity.Dimensions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::inhumate::rti::proto::EntityPosition_LocalPosition* center_;
  float length_;
  float width_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Entity_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Entity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return CreateMaybeMessage<Entity>(nullptr);
  }

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Entity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Entity_2eproto);
    return ::descriptor_table_Entity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Entity_Dimensions Dimensions;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerClientIdFieldNumber = 2,
    kTypeFieldNumber = 4,
    kTitleFieldNumber = 10,
    kPositionFieldNumber = 3,
    kDimensionsFieldNumber = 8,
    kColorFieldNumber = 9,
    kCategoryFieldNumber = 5,
    kDomainFieldNumber = 6,
    kLvcFieldNumber = 7,
    kDisabledFieldNumber = 11,
    kDeletedFieldNumber = 12,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string owner_client_id = 2;
  void clear_owner_client_id();
  const std::string& owner_client_id() const;
  void set_owner_client_id(const std::string& value);
  void set_owner_client_id(std::string&& value);
  void set_owner_client_id(const char* value);
  void set_owner_client_id(const char* value, size_t size);
  std::string* mutable_owner_client_id();
  std::string* release_owner_client_id();
  void set_allocated_owner_client_id(std::string* owner_client_id);
  private:
  const std::string& _internal_owner_client_id() const;
  void _internal_set_owner_client_id(const std::string& value);
  std::string* _internal_mutable_owner_client_id();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string title = 10;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .inhumate.rti.proto.EntityPosition position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::inhumate::rti::proto::EntityPosition& position() const;
  ::inhumate::rti::proto::EntityPosition* release_position();
  ::inhumate::rti::proto::EntityPosition* mutable_position();
  void set_allocated_position(::inhumate::rti::proto::EntityPosition* position);
  private:
  const ::inhumate::rti::proto::EntityPosition& _internal_position() const;
  ::inhumate::rti::proto::EntityPosition* _internal_mutable_position();
  public:

  // .inhumate.rti.proto.Entity.Dimensions dimensions = 8;
  bool has_dimensions() const;
  private:
  bool _internal_has_dimensions() const;
  public:
  void clear_dimensions();
  const ::inhumate::rti::proto::Entity_Dimensions& dimensions() const;
  ::inhumate::rti::proto::Entity_Dimensions* release_dimensions();
  ::inhumate::rti::proto::Entity_Dimensions* mutable_dimensions();
  void set_allocated_dimensions(::inhumate::rti::proto::Entity_Dimensions* dimensions);
  private:
  const ::inhumate::rti::proto::Entity_Dimensions& _internal_dimensions() const;
  ::inhumate::rti::proto::Entity_Dimensions* _internal_mutable_dimensions();
  public:

  // .inhumate.rti.proto.Color color = 9;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::inhumate::rti::proto::Color& color() const;
  ::inhumate::rti::proto::Color* release_color();
  ::inhumate::rti::proto::Color* mutable_color();
  void set_allocated_color(::inhumate::rti::proto::Color* color);
  private:
  const ::inhumate::rti::proto::Color& _internal_color() const;
  ::inhumate::rti::proto::Color* _internal_mutable_color();
  public:

  // .inhumate.rti.proto.EntityCategory category = 5;
  void clear_category();
  ::inhumate::rti::proto::EntityCategory category() const;
  void set_category(::inhumate::rti::proto::EntityCategory value);
  private:
  ::inhumate::rti::proto::EntityCategory _internal_category() const;
  void _internal_set_category(::inhumate::rti::proto::EntityCategory value);
  public:

  // .inhumate.rti.proto.EntityDomain domain = 6;
  void clear_domain();
  ::inhumate::rti::proto::EntityDomain domain() const;
  void set_domain(::inhumate::rti::proto::EntityDomain value);
  private:
  ::inhumate::rti::proto::EntityDomain _internal_domain() const;
  void _internal_set_domain(::inhumate::rti::proto::EntityDomain value);
  public:

  // .inhumate.rti.proto.LVCCategory lvc = 7;
  void clear_lvc();
  ::inhumate::rti::proto::LVCCategory lvc() const;
  void set_lvc(::inhumate::rti::proto::LVCCategory value);
  private:
  ::inhumate::rti::proto::LVCCategory _internal_lvc() const;
  void _internal_set_lvc(::inhumate::rti::proto::LVCCategory value);
  public:

  // bool disabled = 11;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // bool deleted = 12;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Entity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::inhumate::rti::proto::EntityPosition* position_;
  ::inhumate::rti::proto::Entity_Dimensions* dimensions_;
  ::inhumate::rti::proto::Color* color_;
  int category_;
  int domain_;
  int lvc_;
  bool disabled_;
  bool deleted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Entity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entity_Dimensions

// float length = 1;
inline void Entity_Dimensions::clear_length() {
  length_ = 0;
}
inline float Entity_Dimensions::_internal_length() const {
  return length_;
}
inline float Entity_Dimensions::length() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.Dimensions.length)
  return _internal_length();
}
inline void Entity_Dimensions::_internal_set_length(float value) {
  
  length_ = value;
}
inline void Entity_Dimensions::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.Dimensions.length)
}

// float width = 2;
inline void Entity_Dimensions::clear_width() {
  width_ = 0;
}
inline float Entity_Dimensions::_internal_width() const {
  return width_;
}
inline float Entity_Dimensions::width() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.Dimensions.width)
  return _internal_width();
}
inline void Entity_Dimensions::_internal_set_width(float value) {
  
  width_ = value;
}
inline void Entity_Dimensions::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.Dimensions.width)
}

// float height = 3;
inline void Entity_Dimensions::clear_height() {
  height_ = 0;
}
inline float Entity_Dimensions::_internal_height() const {
  return height_;
}
inline float Entity_Dimensions::height() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.Dimensions.height)
  return _internal_height();
}
inline void Entity_Dimensions::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Entity_Dimensions::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.Dimensions.height)
}

// .inhumate.rti.proto.EntityPosition.LocalPosition center = 4;
inline bool Entity_Dimensions::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Entity_Dimensions::has_center() const {
  return _internal_has_center();
}
inline const ::inhumate::rti::proto::EntityPosition_LocalPosition& Entity_Dimensions::_internal_center() const {
  const ::inhumate::rti::proto::EntityPosition_LocalPosition* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition_LocalPosition*>(
      &::inhumate::rti::proto::_EntityPosition_LocalPosition_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition_LocalPosition& Entity_Dimensions::center() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.Dimensions.center)
  return _internal_center();
}
inline ::inhumate::rti::proto::EntityPosition_LocalPosition* Entity_Dimensions::release_center() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Entity.Dimensions.center)
  
  ::inhumate::rti::proto::EntityPosition_LocalPosition* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition_LocalPosition* Entity_Dimensions::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition_LocalPosition>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::inhumate::rti::proto::EntityPosition_LocalPosition* Entity_Dimensions::mutable_center() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Entity.Dimensions.center)
  return _internal_mutable_center();
}
inline void Entity_Dimensions::set_allocated_center(::inhumate::rti::proto::EntityPosition_LocalPosition* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Entity.Dimensions.center)
}

// -------------------------------------------------------------------

// Entity

// string id = 1;
inline void Entity::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entity::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.id)
  return _internal_id();
}
inline void Entity::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.id)
}
inline std::string* Entity::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Entity.id)
  return _internal_mutable_id();
}
inline const std::string& Entity::_internal_id() const {
  return id_.GetNoArena();
}
inline void Entity::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entity::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Entity.id)
}
inline void Entity::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Entity.id)
}
inline void Entity::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Entity.id)
}
inline std::string* Entity::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entity::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Entity.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Entity.id)
}

// string owner_client_id = 2;
inline void Entity::clear_owner_client_id() {
  owner_client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entity::owner_client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.owner_client_id)
  return _internal_owner_client_id();
}
inline void Entity::set_owner_client_id(const std::string& value) {
  _internal_set_owner_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.owner_client_id)
}
inline std::string* Entity::mutable_owner_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Entity.owner_client_id)
  return _internal_mutable_owner_client_id();
}
inline const std::string& Entity::_internal_owner_client_id() const {
  return owner_client_id_.GetNoArena();
}
inline void Entity::_internal_set_owner_client_id(const std::string& value) {
  
  owner_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entity::set_owner_client_id(std::string&& value) {
  
  owner_client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Entity.owner_client_id)
}
inline void Entity::set_owner_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Entity.owner_client_id)
}
inline void Entity::set_owner_client_id(const char* value, size_t size) {
  
  owner_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Entity.owner_client_id)
}
inline std::string* Entity::_internal_mutable_owner_client_id() {
  
  return owner_client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entity::release_owner_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Entity.owner_client_id)
  
  return owner_client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_owner_client_id(std::string* owner_client_id) {
  if (owner_client_id != nullptr) {
    
  } else {
    
  }
  owner_client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Entity.owner_client_id)
}

// .inhumate.rti.proto.EntityPosition position = 3;
inline bool Entity::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Entity::has_position() const {
  return _internal_has_position();
}
inline const ::inhumate::rti::proto::EntityPosition& Entity::_internal_position() const {
  const ::inhumate::rti::proto::EntityPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::EntityPosition*>(
      &::inhumate::rti::proto::_EntityPosition_default_instance_);
}
inline const ::inhumate::rti::proto::EntityPosition& Entity::position() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.position)
  return _internal_position();
}
inline ::inhumate::rti::proto::EntityPosition* Entity::release_position() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Entity.position)
  
  ::inhumate::rti::proto::EntityPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::EntityPosition* Entity::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::EntityPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::inhumate::rti::proto::EntityPosition* Entity::mutable_position() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Entity.position)
  return _internal_mutable_position();
}
inline void Entity::set_allocated_position(::inhumate::rti::proto::EntityPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Entity.position)
}

// string type = 4;
inline void Entity::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entity::type() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.type)
  return _internal_type();
}
inline void Entity::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.type)
}
inline std::string* Entity::mutable_type() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Entity.type)
  return _internal_mutable_type();
}
inline const std::string& Entity::_internal_type() const {
  return type_.GetNoArena();
}
inline void Entity::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entity::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Entity.type)
}
inline void Entity::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Entity.type)
}
inline void Entity::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Entity.type)
}
inline std::string* Entity::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entity::release_type() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Entity.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Entity.type)
}

// .inhumate.rti.proto.EntityCategory category = 5;
inline void Entity::clear_category() {
  category_ = 0;
}
inline ::inhumate::rti::proto::EntityCategory Entity::_internal_category() const {
  return static_cast< ::inhumate::rti::proto::EntityCategory >(category_);
}
inline ::inhumate::rti::proto::EntityCategory Entity::category() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.category)
  return _internal_category();
}
inline void Entity::_internal_set_category(::inhumate::rti::proto::EntityCategory value) {
  
  category_ = value;
}
inline void Entity::set_category(::inhumate::rti::proto::EntityCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.category)
}

// .inhumate.rti.proto.EntityDomain domain = 6;
inline void Entity::clear_domain() {
  domain_ = 0;
}
inline ::inhumate::rti::proto::EntityDomain Entity::_internal_domain() const {
  return static_cast< ::inhumate::rti::proto::EntityDomain >(domain_);
}
inline ::inhumate::rti::proto::EntityDomain Entity::domain() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.domain)
  return _internal_domain();
}
inline void Entity::_internal_set_domain(::inhumate::rti::proto::EntityDomain value) {
  
  domain_ = value;
}
inline void Entity::set_domain(::inhumate::rti::proto::EntityDomain value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.domain)
}

// .inhumate.rti.proto.LVCCategory lvc = 7;
inline void Entity::clear_lvc() {
  lvc_ = 0;
}
inline ::inhumate::rti::proto::LVCCategory Entity::_internal_lvc() const {
  return static_cast< ::inhumate::rti::proto::LVCCategory >(lvc_);
}
inline ::inhumate::rti::proto::LVCCategory Entity::lvc() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.lvc)
  return _internal_lvc();
}
inline void Entity::_internal_set_lvc(::inhumate::rti::proto::LVCCategory value) {
  
  lvc_ = value;
}
inline void Entity::set_lvc(::inhumate::rti::proto::LVCCategory value) {
  _internal_set_lvc(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.lvc)
}

// .inhumate.rti.proto.Entity.Dimensions dimensions = 8;
inline bool Entity::_internal_has_dimensions() const {
  return this != internal_default_instance() && dimensions_ != nullptr;
}
inline bool Entity::has_dimensions() const {
  return _internal_has_dimensions();
}
inline void Entity::clear_dimensions() {
  if (GetArenaNoVirtual() == nullptr && dimensions_ != nullptr) {
    delete dimensions_;
  }
  dimensions_ = nullptr;
}
inline const ::inhumate::rti::proto::Entity_Dimensions& Entity::_internal_dimensions() const {
  const ::inhumate::rti::proto::Entity_Dimensions* p = dimensions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Entity_Dimensions*>(
      &::inhumate::rti::proto::_Entity_Dimensions_default_instance_);
}
inline const ::inhumate::rti::proto::Entity_Dimensions& Entity::dimensions() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.dimensions)
  return _internal_dimensions();
}
inline ::inhumate::rti::proto::Entity_Dimensions* Entity::release_dimensions() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Entity.dimensions)
  
  ::inhumate::rti::proto::Entity_Dimensions* temp = dimensions_;
  dimensions_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Entity_Dimensions* Entity::_internal_mutable_dimensions() {
  
  if (dimensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Entity_Dimensions>(GetArenaNoVirtual());
    dimensions_ = p;
  }
  return dimensions_;
}
inline ::inhumate::rti::proto::Entity_Dimensions* Entity::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Entity.dimensions)
  return _internal_mutable_dimensions();
}
inline void Entity::set_allocated_dimensions(::inhumate::rti::proto::Entity_Dimensions* dimensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_;
  }
  if (dimensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions, submessage_arena);
    }
    
  } else {
    
  }
  dimensions_ = dimensions;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Entity.dimensions)
}

// .inhumate.rti.proto.Color color = 9;
inline bool Entity::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Entity::has_color() const {
  return _internal_has_color();
}
inline const ::inhumate::rti::proto::Color& Entity::_internal_color() const {
  const ::inhumate::rti::proto::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Color*>(
      &::inhumate::rti::proto::_Color_default_instance_);
}
inline const ::inhumate::rti::proto::Color& Entity::color() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.color)
  return _internal_color();
}
inline ::inhumate::rti::proto::Color* Entity::release_color() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Entity.color)
  
  ::inhumate::rti::proto::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Color* Entity::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  return color_;
}
inline ::inhumate::rti::proto::Color* Entity::mutable_color() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Entity.color)
  return _internal_mutable_color();
}
inline void Entity::set_allocated_color(::inhumate::rti::proto::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Entity.color)
}

// string title = 10;
inline void Entity::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entity::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.title)
  return _internal_title();
}
inline void Entity::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.title)
}
inline std::string* Entity::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Entity.title)
  return _internal_mutable_title();
}
inline const std::string& Entity::_internal_title() const {
  return title_.GetNoArena();
}
inline void Entity::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entity::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Entity.title)
}
inline void Entity::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Entity.title)
}
inline void Entity::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Entity.title)
}
inline std::string* Entity::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entity::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Entity.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Entity.title)
}

// bool disabled = 11;
inline void Entity::clear_disabled() {
  disabled_ = false;
}
inline bool Entity::_internal_disabled() const {
  return disabled_;
}
inline bool Entity::disabled() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.disabled)
  return _internal_disabled();
}
inline void Entity::_internal_set_disabled(bool value) {
  
  disabled_ = value;
}
inline void Entity::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.disabled)
}

// bool deleted = 12;
inline void Entity::clear_deleted() {
  deleted_ = false;
}
inline bool Entity::_internal_deleted() const {
  return deleted_;
}
inline bool Entity::deleted() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Entity.deleted)
  return _internal_deleted();
}
inline void Entity::_internal_set_deleted(bool value) {
  
  deleted_ = value;
}
inline void Entity::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Entity.deleted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Entity_2eproto
