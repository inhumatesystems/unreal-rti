// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Measures.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Measures_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Measures_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Measures_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Measures_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Measures_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Measure;
class MeasureDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MeasureDefaultTypeInternal _Measure_default_instance_;
class Measures;
class MeasuresDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern MeasuresDefaultTypeInternal _Measures_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Measure* Arena::CreateMaybeMessage<::inhumate::rti::proto::Measure>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Measures* Arena::CreateMaybeMessage<::inhumate::rti::proto::Measures>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

enum MeasureGraphType : int {
  LINE = 0,
  STEP = 1,
  BAR = 2,
  SCATTER = 3,
  MeasureGraphType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MeasureGraphType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
INHUMATE_RTI_PROTOS_EXPORT bool MeasureGraphType_IsValid(int value);
constexpr MeasureGraphType MeasureGraphType_MIN = LINE;
constexpr MeasureGraphType MeasureGraphType_MAX = SCATTER;
constexpr int MeasureGraphType_ARRAYSIZE = MeasureGraphType_MAX + 1;

INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeasureGraphType_descriptor();
template<typename T>
inline const std::string& MeasureGraphType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MeasureGraphType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MeasureGraphType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MeasureGraphType_descriptor(), enum_t_value);
}
inline bool MeasureGraphType_Parse(
    const std::string& name, MeasureGraphType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MeasureGraphType>(
    MeasureGraphType_descriptor(), name, value);
}
// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Measures :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Measures) */ {
 public:
  Measures();
  virtual ~Measures();

  Measures(const Measures& from);
  Measures(Measures&& from) noexcept
    : Measures() {
    *this = ::std::move(from);
  }

  inline Measures& operator=(const Measures& from) {
    CopyFrom(from);
    return *this;
  }
  inline Measures& operator=(Measures&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Measures& default_instance();

  enum WhichCase {
    kRequestMeasures = 1,
    kMeasure = 2,
    kLogMeasure = 3,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measures* internal_default_instance() {
    return reinterpret_cast<const Measures*>(
               &_Measures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Measures& a, Measures& b) {
    a.Swap(&b);
  }
  inline void Swap(Measures* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Measures* New() const final {
    return CreateMaybeMessage<Measures>(nullptr);
  }

  Measures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Measures>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Measures& from);
  void MergeFrom(const Measures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measures* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Measures";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Measures_2eproto);
    return ::descriptor_table_Measures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestMeasuresFieldNumber = 1,
    kMeasureFieldNumber = 2,
    kLogMeasureFieldNumber = 3,
  };
  // .google.protobuf.Empty request_measures = 1;
  bool has_request_measures() const;
  private:
  bool _internal_has_request_measures() const;
  public:
  void clear_request_measures();
  const PROTOBUF_NAMESPACE_ID::Empty& request_measures() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_measures();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_measures();
  void set_allocated_request_measures(PROTOBUF_NAMESPACE_ID::Empty* request_measures);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_measures() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_measures();
  public:

  // .inhumate.rti.proto.Measure measure = 2;
  bool has_measure() const;
  private:
  bool _internal_has_measure() const;
  public:
  void clear_measure();
  const ::inhumate::rti::proto::Measure& measure() const;
  ::inhumate::rti::proto::Measure* release_measure();
  ::inhumate::rti::proto::Measure* mutable_measure();
  void set_allocated_measure(::inhumate::rti::proto::Measure* measure);
  private:
  const ::inhumate::rti::proto::Measure& _internal_measure() const;
  ::inhumate::rti::proto::Measure* _internal_mutable_measure();
  public:

  // .inhumate.rti.proto.Measure log_measure = 3;
  bool has_log_measure() const;
  private:
  bool _internal_has_log_measure() const;
  public:
  void clear_log_measure();
  const ::inhumate::rti::proto::Measure& log_measure() const;
  ::inhumate::rti::proto::Measure* release_log_measure();
  ::inhumate::rti::proto::Measure* mutable_log_measure();
  void set_allocated_log_measure(::inhumate::rti::proto::Measure* log_measure);
  private:
  const ::inhumate::rti::proto::Measure& _internal_log_measure() const;
  ::inhumate::rti::proto::Measure* _internal_mutable_log_measure();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Measures)
 private:
  class _Internal;
  void set_has_request_measures();
  void set_has_measure();
  void set_has_log_measure();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_measures_;
    ::inhumate::rti::proto::Measure* measure_;
    ::inhumate::rti::proto::Measure* log_measure_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Measures_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Measure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Measure) */ {
 public:
  Measure();
  virtual ~Measure();

  Measure(const Measure& from);
  Measure(Measure&& from) noexcept
    : Measure() {
    *this = ::std::move(from);
  }

  inline Measure& operator=(const Measure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Measure& operator=(Measure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Measure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measure* internal_default_instance() {
    return reinterpret_cast<const Measure*>(
               &_Measure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Measure& a, Measure& b) {
    a.Swap(&b);
  }
  inline void Swap(Measure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Measure* New() const final {
    return CreateMaybeMessage<Measure>(nullptr);
  }

  Measure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Measure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Measure& from);
  void MergeFrom(const Measure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Measure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Measures_2eproto);
    return ::descriptor_table_Measures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kApplicationFieldNumber = 3,
    kUnitFieldNumber = 4,
    kChannelFieldNumber = 5,
    kIntervalFieldNumber = 6,
    kEntityFieldNumber = 7,
    kGraphTypeFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string application = 3;
  void clear_application();
  const std::string& application() const;
  void set_application(const std::string& value);
  void set_application(std::string&& value);
  void set_application(const char* value);
  void set_application(const char* value, size_t size);
  std::string* mutable_application();
  std::string* release_application();
  void set_allocated_application(std::string* application);
  private:
  const std::string& _internal_application() const;
  void _internal_set_application(const std::string& value);
  std::string* _internal_mutable_application();
  public:

  // string unit = 4;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // string channel = 5;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // float interval = 6;
  void clear_interval();
  float interval() const;
  void set_interval(float value);
  private:
  float _internal_interval() const;
  void _internal_set_interval(float value);
  public:

  // bool entity = 7;
  void clear_entity();
  bool entity() const;
  void set_entity(bool value);
  private:
  bool _internal_entity() const;
  void _internal_set_entity(bool value);
  public:

  // .inhumate.rti.proto.MeasureGraphType graph_type = 8;
  void clear_graph_type();
  ::inhumate::rti::proto::MeasureGraphType graph_type() const;
  void set_graph_type(::inhumate::rti::proto::MeasureGraphType value);
  private:
  ::inhumate::rti::proto::MeasureGraphType _internal_graph_type() const;
  void _internal_set_graph_type(::inhumate::rti::proto::MeasureGraphType value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Measure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  float interval_;
  bool entity_;
  int graph_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Measures_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Measures

// .google.protobuf.Empty request_measures = 1;
inline bool Measures::_internal_has_request_measures() const {
  return which_case() == kRequestMeasures;
}
inline bool Measures::has_request_measures() const {
  return _internal_has_request_measures();
}
inline void Measures::set_has_request_measures() {
  _oneof_case_[0] = kRequestMeasures;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Measures::release_request_measures() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measures.request_measures)
  if (_internal_has_request_measures()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_measures_;
    which_.request_measures_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Measures::_internal_request_measures() const {
  return _internal_has_request_measures()
      ? *which_.request_measures_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Measures::request_measures() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measures.request_measures)
  return _internal_request_measures();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Measures::_internal_mutable_request_measures() {
  if (!_internal_has_request_measures()) {
    clear_which();
    set_has_request_measures();
    which_.request_measures_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_measures_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Measures::mutable_request_measures() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measures.request_measures)
  return _internal_mutable_request_measures();
}

// .inhumate.rti.proto.Measure measure = 2;
inline bool Measures::_internal_has_measure() const {
  return which_case() == kMeasure;
}
inline bool Measures::has_measure() const {
  return _internal_has_measure();
}
inline void Measures::set_has_measure() {
  _oneof_case_[0] = kMeasure;
}
inline void Measures::clear_measure() {
  if (_internal_has_measure()) {
    delete which_.measure_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Measure* Measures::release_measure() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measures.measure)
  if (_internal_has_measure()) {
    clear_has_which();
      ::inhumate::rti::proto::Measure* temp = which_.measure_;
    which_.measure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Measure& Measures::_internal_measure() const {
  return _internal_has_measure()
      ? *which_.measure_
      : *reinterpret_cast< ::inhumate::rti::proto::Measure*>(&::inhumate::rti::proto::_Measure_default_instance_);
}
inline const ::inhumate::rti::proto::Measure& Measures::measure() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measures.measure)
  return _internal_measure();
}
inline ::inhumate::rti::proto::Measure* Measures::_internal_mutable_measure() {
  if (!_internal_has_measure()) {
    clear_which();
    set_has_measure();
    which_.measure_ = CreateMaybeMessage< ::inhumate::rti::proto::Measure >(
        GetArenaNoVirtual());
  }
  return which_.measure_;
}
inline ::inhumate::rti::proto::Measure* Measures::mutable_measure() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measures.measure)
  return _internal_mutable_measure();
}

// .inhumate.rti.proto.Measure log_measure = 3;
inline bool Measures::_internal_has_log_measure() const {
  return which_case() == kLogMeasure;
}
inline bool Measures::has_log_measure() const {
  return _internal_has_log_measure();
}
inline void Measures::set_has_log_measure() {
  _oneof_case_[0] = kLogMeasure;
}
inline void Measures::clear_log_measure() {
  if (_internal_has_log_measure()) {
    delete which_.log_measure_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Measure* Measures::release_log_measure() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measures.log_measure)
  if (_internal_has_log_measure()) {
    clear_has_which();
      ::inhumate::rti::proto::Measure* temp = which_.log_measure_;
    which_.log_measure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Measure& Measures::_internal_log_measure() const {
  return _internal_has_log_measure()
      ? *which_.log_measure_
      : *reinterpret_cast< ::inhumate::rti::proto::Measure*>(&::inhumate::rti::proto::_Measure_default_instance_);
}
inline const ::inhumate::rti::proto::Measure& Measures::log_measure() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measures.log_measure)
  return _internal_log_measure();
}
inline ::inhumate::rti::proto::Measure* Measures::_internal_mutable_log_measure() {
  if (!_internal_has_log_measure()) {
    clear_which();
    set_has_log_measure();
    which_.log_measure_ = CreateMaybeMessage< ::inhumate::rti::proto::Measure >(
        GetArenaNoVirtual());
  }
  return which_.log_measure_;
}
inline ::inhumate::rti::proto::Measure* Measures::mutable_log_measure() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measures.log_measure)
  return _internal_mutable_log_measure();
}

inline bool Measures::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void Measures::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline Measures::WhichCase Measures::which_case() const {
  return Measures::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Measure

// string id = 1;
inline void Measure::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measure::id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measure.id)
  return _internal_id();
}
inline void Measure::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measure.id)
}
inline std::string* Measure::mutable_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measure.id)
  return _internal_mutable_id();
}
inline const std::string& Measure::_internal_id() const {
  return id_.GetNoArena();
}
inline void Measure::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measure::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Measure.id)
}
inline void Measure::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Measure.id)
}
inline void Measure::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Measure.id)
}
inline std::string* Measure::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measure::release_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measure.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Measure.id)
}

// string title = 2;
inline void Measure::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measure::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measure.title)
  return _internal_title();
}
inline void Measure::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measure.title)
}
inline std::string* Measure::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measure.title)
  return _internal_mutable_title();
}
inline const std::string& Measure::_internal_title() const {
  return title_.GetNoArena();
}
inline void Measure::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measure::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Measure.title)
}
inline void Measure::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Measure.title)
}
inline void Measure::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Measure.title)
}
inline std::string* Measure::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measure::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measure.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Measure.title)
}

// string application = 3;
inline void Measure::clear_application() {
  application_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measure::application() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measure.application)
  return _internal_application();
}
inline void Measure::set_application(const std::string& value) {
  _internal_set_application(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measure.application)
}
inline std::string* Measure::mutable_application() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measure.application)
  return _internal_mutable_application();
}
inline const std::string& Measure::_internal_application() const {
  return application_.GetNoArena();
}
inline void Measure::_internal_set_application(const std::string& value) {
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measure::set_application(std::string&& value) {
  
  application_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Measure.application)
}
inline void Measure::set_application(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Measure.application)
}
inline void Measure::set_application(const char* value, size_t size) {
  
  application_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Measure.application)
}
inline std::string* Measure::_internal_mutable_application() {
  
  return application_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measure::release_application() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measure.application)
  
  return application_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_application(std::string* application) {
  if (application != nullptr) {
    
  } else {
    
  }
  application_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Measure.application)
}

// string unit = 4;
inline void Measure::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measure::unit() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measure.unit)
  return _internal_unit();
}
inline void Measure::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measure.unit)
}
inline std::string* Measure::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measure.unit)
  return _internal_mutable_unit();
}
inline const std::string& Measure::_internal_unit() const {
  return unit_.GetNoArena();
}
inline void Measure::_internal_set_unit(const std::string& value) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measure::set_unit(std::string&& value) {
  
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Measure.unit)
}
inline void Measure::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Measure.unit)
}
inline void Measure::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Measure.unit)
}
inline std::string* Measure::_internal_mutable_unit() {
  
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measure::release_unit() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measure.unit)
  
  return unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Measure.unit)
}

// string channel = 5;
inline void Measure::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Measure::channel() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measure.channel)
  return _internal_channel();
}
inline void Measure::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measure.channel)
}
inline std::string* Measure::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Measure.channel)
  return _internal_mutable_channel();
}
inline const std::string& Measure::_internal_channel() const {
  return channel_.GetNoArena();
}
inline void Measure::_internal_set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Measure::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Measure.channel)
}
inline void Measure::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Measure.channel)
}
inline void Measure::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Measure.channel)
}
inline std::string* Measure::_internal_mutable_channel() {
  
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Measure::release_channel() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Measure.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Measure.channel)
}

// float interval = 6;
inline void Measure::clear_interval() {
  interval_ = 0;
}
inline float Measure::_internal_interval() const {
  return interval_;
}
inline float Measure::interval() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measure.interval)
  return _internal_interval();
}
inline void Measure::_internal_set_interval(float value) {
  
  interval_ = value;
}
inline void Measure::set_interval(float value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measure.interval)
}

// bool entity = 7;
inline void Measure::clear_entity() {
  entity_ = false;
}
inline bool Measure::_internal_entity() const {
  return entity_;
}
inline bool Measure::entity() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measure.entity)
  return _internal_entity();
}
inline void Measure::_internal_set_entity(bool value) {
  
  entity_ = value;
}
inline void Measure::set_entity(bool value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measure.entity)
}

// .inhumate.rti.proto.MeasureGraphType graph_type = 8;
inline void Measure::clear_graph_type() {
  graph_type_ = 0;
}
inline ::inhumate::rti::proto::MeasureGraphType Measure::_internal_graph_type() const {
  return static_cast< ::inhumate::rti::proto::MeasureGraphType >(graph_type_);
}
inline ::inhumate::rti::proto::MeasureGraphType Measure::graph_type() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Measure.graph_type)
  return _internal_graph_type();
}
inline void Measure::_internal_set_graph_type(::inhumate::rti::proto::MeasureGraphType value) {
  
  graph_type_ = value;
}
inline void Measure::set_graph_type(::inhumate::rti::proto::MeasureGraphType value) {
  _internal_set_graph_type(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Measure.graph_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::inhumate::rti::proto::MeasureGraphType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inhumate::rti::proto::MeasureGraphType>() {
  return ::inhumate::rti::proto::MeasureGraphType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Measures_2eproto
