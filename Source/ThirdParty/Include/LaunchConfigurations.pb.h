// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LaunchConfigurations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LaunchConfigurations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LaunchConfigurations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "Parameter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LaunchConfigurations_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_LaunchConfigurations_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LaunchConfigurations_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class LaunchConfiguration;
class LaunchConfigurationDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LaunchConfigurationDefaultTypeInternal _LaunchConfiguration_default_instance_;
class LaunchConfigurations;
class LaunchConfigurationsDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LaunchConfigurationsDefaultTypeInternal _LaunchConfigurations_default_instance_;
class RemoteAction;
class RemoteActionDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern RemoteActionDefaultTypeInternal _RemoteAction_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::LaunchConfiguration* Arena::CreateMaybeMessage<::inhumate::rti::proto::LaunchConfiguration>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::LaunchConfigurations* Arena::CreateMaybeMessage<::inhumate::rti::proto::LaunchConfigurations>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::RemoteAction* Arena::CreateMaybeMessage<::inhumate::rti::proto::RemoteAction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT LaunchConfigurations :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.LaunchConfigurations) */ {
 public:
  LaunchConfigurations();
  virtual ~LaunchConfigurations();

  LaunchConfigurations(const LaunchConfigurations& from);
  LaunchConfigurations(LaunchConfigurations&& from) noexcept
    : LaunchConfigurations() {
    *this = ::std::move(from);
  }

  inline LaunchConfigurations& operator=(const LaunchConfigurations& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchConfigurations& operator=(LaunchConfigurations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchConfigurations& default_instance();

  enum WhichCase {
    kRequestConfigurations = 1,
    kConfiguration = 2,
    kActiveConfiguration = 3,
    kRequestRemoteActions = 4,
    kRemoteAction = 5,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchConfigurations* internal_default_instance() {
    return reinterpret_cast<const LaunchConfigurations*>(
               &_LaunchConfigurations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaunchConfigurations& a, LaunchConfigurations& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchConfigurations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchConfigurations* New() const final {
    return CreateMaybeMessage<LaunchConfigurations>(nullptr);
  }

  LaunchConfigurations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchConfigurations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchConfigurations& from);
  void MergeFrom(const LaunchConfigurations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchConfigurations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.LaunchConfigurations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LaunchConfigurations_2eproto);
    return ::descriptor_table_LaunchConfigurations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestConfigurationsFieldNumber = 1,
    kConfigurationFieldNumber = 2,
    kActiveConfigurationFieldNumber = 3,
    kRequestRemoteActionsFieldNumber = 4,
    kRemoteActionFieldNumber = 5,
  };
  // .google.protobuf.Empty request_configurations = 1;
  bool has_request_configurations() const;
  private:
  bool _internal_has_request_configurations() const;
  public:
  void clear_request_configurations();
  const PROTOBUF_NAMESPACE_ID::Empty& request_configurations() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_configurations();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_configurations();
  void set_allocated_request_configurations(PROTOBUF_NAMESPACE_ID::Empty* request_configurations);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_configurations() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_configurations();
  public:

  // .inhumate.rti.proto.LaunchConfiguration configuration = 2;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::inhumate::rti::proto::LaunchConfiguration& configuration() const;
  ::inhumate::rti::proto::LaunchConfiguration* release_configuration();
  ::inhumate::rti::proto::LaunchConfiguration* mutable_configuration();
  void set_allocated_configuration(::inhumate::rti::proto::LaunchConfiguration* configuration);
  private:
  const ::inhumate::rti::proto::LaunchConfiguration& _internal_configuration() const;
  ::inhumate::rti::proto::LaunchConfiguration* _internal_mutable_configuration();
  public:

  // .inhumate.rti.proto.LaunchConfiguration active_configuration = 3;
  bool has_active_configuration() const;
  private:
  bool _internal_has_active_configuration() const;
  public:
  void clear_active_configuration();
  const ::inhumate::rti::proto::LaunchConfiguration& active_configuration() const;
  ::inhumate::rti::proto::LaunchConfiguration* release_active_configuration();
  ::inhumate::rti::proto::LaunchConfiguration* mutable_active_configuration();
  void set_allocated_active_configuration(::inhumate::rti::proto::LaunchConfiguration* active_configuration);
  private:
  const ::inhumate::rti::proto::LaunchConfiguration& _internal_active_configuration() const;
  ::inhumate::rti::proto::LaunchConfiguration* _internal_mutable_active_configuration();
  public:

  // .google.protobuf.Empty request_remote_actions = 4;
  bool has_request_remote_actions() const;
  private:
  bool _internal_has_request_remote_actions() const;
  public:
  void clear_request_remote_actions();
  const PROTOBUF_NAMESPACE_ID::Empty& request_remote_actions() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_remote_actions();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_remote_actions();
  void set_allocated_request_remote_actions(PROTOBUF_NAMESPACE_ID::Empty* request_remote_actions);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_remote_actions() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_remote_actions();
  public:

  // .inhumate.rti.proto.RemoteAction remote_action = 5;
  bool has_remote_action() const;
  private:
  bool _internal_has_remote_action() const;
  public:
  void clear_remote_action();
  const ::inhumate::rti::proto::RemoteAction& remote_action() const;
  ::inhumate::rti::proto::RemoteAction* release_remote_action();
  ::inhumate::rti::proto::RemoteAction* mutable_remote_action();
  void set_allocated_remote_action(::inhumate::rti::proto::RemoteAction* remote_action);
  private:
  const ::inhumate::rti::proto::RemoteAction& _internal_remote_action() const;
  ::inhumate::rti::proto::RemoteAction* _internal_mutable_remote_action();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.LaunchConfigurations)
 private:
  class _Internal;
  void set_has_request_configurations();
  void set_has_configuration();
  void set_has_active_configuration();
  void set_has_request_remote_actions();
  void set_has_remote_action();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_configurations_;
    ::inhumate::rti::proto::LaunchConfiguration* configuration_;
    ::inhumate::rti::proto::LaunchConfiguration* active_configuration_;
    PROTOBUF_NAMESPACE_ID::Empty* request_remote_actions_;
    ::inhumate::rti::proto::RemoteAction* remote_action_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_LaunchConfigurations_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT LaunchConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.LaunchConfiguration) */ {
 public:
  LaunchConfiguration();
  virtual ~LaunchConfiguration();

  LaunchConfiguration(const LaunchConfiguration& from);
  LaunchConfiguration(LaunchConfiguration&& from) noexcept
    : LaunchConfiguration() {
    *this = ::std::move(from);
  }

  inline LaunchConfiguration& operator=(const LaunchConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchConfiguration& operator=(LaunchConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchConfiguration* internal_default_instance() {
    return reinterpret_cast<const LaunchConfiguration*>(
               &_LaunchConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaunchConfiguration& a, LaunchConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchConfiguration* New() const final {
    return CreateMaybeMessage<LaunchConfiguration>(nullptr);
  }

  LaunchConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchConfiguration& from);
  void MergeFrom(const LaunchConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.LaunchConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LaunchConfigurations_2eproto);
    return ::descriptor_table_LaunchConfigurations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 3,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated .inhumate.rti.proto.Parameter parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::inhumate::rti::proto::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >*
      mutable_parameters();
  private:
  const ::inhumate::rti::proto::Parameter& _internal_parameters(int index) const;
  ::inhumate::rti::proto::Parameter* _internal_add_parameters();
  public:
  const ::inhumate::rti::proto::Parameter& parameters(int index) const;
  ::inhumate::rti::proto::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >&
      parameters() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.LaunchConfiguration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LaunchConfigurations_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT RemoteAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.RemoteAction) */ {
 public:
  RemoteAction();
  virtual ~RemoteAction();

  RemoteAction(const RemoteAction& from);
  RemoteAction(RemoteAction&& from) noexcept
    : RemoteAction() {
    *this = ::std::move(from);
  }

  inline RemoteAction& operator=(const RemoteAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteAction& operator=(RemoteAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteAction* internal_default_instance() {
    return reinterpret_cast<const RemoteAction*>(
               &_RemoteAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoteAction& a, RemoteAction& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteAction* New() const final {
    return CreateMaybeMessage<RemoteAction>(nullptr);
  }

  RemoteAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteAction& from);
  void MergeFrom(const RemoteAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.RemoteAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LaunchConfigurations_2eproto);
    return ::descriptor_table_LaunchConfigurations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIconFieldNumber = 6,
    kDisabledWhenLaunchedFieldNumber = 4,
    kOffsetFieldNumber = 5,
    kSortWeightFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string icon = 6;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // bool disabled_when_launched = 4;
  void clear_disabled_when_launched();
  bool disabled_when_launched() const;
  void set_disabled_when_launched(bool value);
  private:
  bool _internal_disabled_when_launched() const;
  void _internal_set_disabled_when_launched(bool value);
  public:

  // bool offset = 5;
  void clear_offset();
  bool offset() const;
  void set_offset(bool value);
  private:
  bool _internal_offset() const;
  void _internal_set_offset(bool value);
  public:

  // int32 sort_weight = 7;
  void clear_sort_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 sort_weight() const;
  void set_sort_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sort_weight() const;
  void _internal_set_sort_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.RemoteAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  bool disabled_when_launched_;
  bool offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 sort_weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LaunchConfigurations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaunchConfigurations

// .google.protobuf.Empty request_configurations = 1;
inline bool LaunchConfigurations::_internal_has_request_configurations() const {
  return which_case() == kRequestConfigurations;
}
inline bool LaunchConfigurations::has_request_configurations() const {
  return _internal_has_request_configurations();
}
inline void LaunchConfigurations::set_has_request_configurations() {
  _oneof_case_[0] = kRequestConfigurations;
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchConfigurations::release_request_configurations() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchConfigurations.request_configurations)
  if (_internal_has_request_configurations()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_configurations_;
    which_.request_configurations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& LaunchConfigurations::_internal_request_configurations() const {
  return _internal_has_request_configurations()
      ? *which_.request_configurations_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& LaunchConfigurations::request_configurations() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchConfigurations.request_configurations)
  return _internal_request_configurations();
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchConfigurations::_internal_mutable_request_configurations() {
  if (!_internal_has_request_configurations()) {
    clear_which();
    set_has_request_configurations();
    which_.request_configurations_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_configurations_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchConfigurations::mutable_request_configurations() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchConfigurations.request_configurations)
  return _internal_mutable_request_configurations();
}

// .inhumate.rti.proto.LaunchConfiguration configuration = 2;
inline bool LaunchConfigurations::_internal_has_configuration() const {
  return which_case() == kConfiguration;
}
inline bool LaunchConfigurations::has_configuration() const {
  return _internal_has_configuration();
}
inline void LaunchConfigurations::set_has_configuration() {
  _oneof_case_[0] = kConfiguration;
}
inline void LaunchConfigurations::clear_configuration() {
  if (_internal_has_configuration()) {
    delete which_.configuration_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::LaunchConfiguration* LaunchConfigurations::release_configuration() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchConfigurations.configuration)
  if (_internal_has_configuration()) {
    clear_has_which();
      ::inhumate::rti::proto::LaunchConfiguration* temp = which_.configuration_;
    which_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::LaunchConfiguration& LaunchConfigurations::_internal_configuration() const {
  return _internal_has_configuration()
      ? *which_.configuration_
      : *reinterpret_cast< ::inhumate::rti::proto::LaunchConfiguration*>(&::inhumate::rti::proto::_LaunchConfiguration_default_instance_);
}
inline const ::inhumate::rti::proto::LaunchConfiguration& LaunchConfigurations::configuration() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchConfigurations.configuration)
  return _internal_configuration();
}
inline ::inhumate::rti::proto::LaunchConfiguration* LaunchConfigurations::_internal_mutable_configuration() {
  if (!_internal_has_configuration()) {
    clear_which();
    set_has_configuration();
    which_.configuration_ = CreateMaybeMessage< ::inhumate::rti::proto::LaunchConfiguration >(
        GetArenaNoVirtual());
  }
  return which_.configuration_;
}
inline ::inhumate::rti::proto::LaunchConfiguration* LaunchConfigurations::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchConfigurations.configuration)
  return _internal_mutable_configuration();
}

// .inhumate.rti.proto.LaunchConfiguration active_configuration = 3;
inline bool LaunchConfigurations::_internal_has_active_configuration() const {
  return which_case() == kActiveConfiguration;
}
inline bool LaunchConfigurations::has_active_configuration() const {
  return _internal_has_active_configuration();
}
inline void LaunchConfigurations::set_has_active_configuration() {
  _oneof_case_[0] = kActiveConfiguration;
}
inline void LaunchConfigurations::clear_active_configuration() {
  if (_internal_has_active_configuration()) {
    delete which_.active_configuration_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::LaunchConfiguration* LaunchConfigurations::release_active_configuration() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchConfigurations.active_configuration)
  if (_internal_has_active_configuration()) {
    clear_has_which();
      ::inhumate::rti::proto::LaunchConfiguration* temp = which_.active_configuration_;
    which_.active_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::LaunchConfiguration& LaunchConfigurations::_internal_active_configuration() const {
  return _internal_has_active_configuration()
      ? *which_.active_configuration_
      : *reinterpret_cast< ::inhumate::rti::proto::LaunchConfiguration*>(&::inhumate::rti::proto::_LaunchConfiguration_default_instance_);
}
inline const ::inhumate::rti::proto::LaunchConfiguration& LaunchConfigurations::active_configuration() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchConfigurations.active_configuration)
  return _internal_active_configuration();
}
inline ::inhumate::rti::proto::LaunchConfiguration* LaunchConfigurations::_internal_mutable_active_configuration() {
  if (!_internal_has_active_configuration()) {
    clear_which();
    set_has_active_configuration();
    which_.active_configuration_ = CreateMaybeMessage< ::inhumate::rti::proto::LaunchConfiguration >(
        GetArenaNoVirtual());
  }
  return which_.active_configuration_;
}
inline ::inhumate::rti::proto::LaunchConfiguration* LaunchConfigurations::mutable_active_configuration() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchConfigurations.active_configuration)
  return _internal_mutable_active_configuration();
}

// .google.protobuf.Empty request_remote_actions = 4;
inline bool LaunchConfigurations::_internal_has_request_remote_actions() const {
  return which_case() == kRequestRemoteActions;
}
inline bool LaunchConfigurations::has_request_remote_actions() const {
  return _internal_has_request_remote_actions();
}
inline void LaunchConfigurations::set_has_request_remote_actions() {
  _oneof_case_[0] = kRequestRemoteActions;
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchConfigurations::release_request_remote_actions() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchConfigurations.request_remote_actions)
  if (_internal_has_request_remote_actions()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_remote_actions_;
    which_.request_remote_actions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& LaunchConfigurations::_internal_request_remote_actions() const {
  return _internal_has_request_remote_actions()
      ? *which_.request_remote_actions_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& LaunchConfigurations::request_remote_actions() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchConfigurations.request_remote_actions)
  return _internal_request_remote_actions();
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchConfigurations::_internal_mutable_request_remote_actions() {
  if (!_internal_has_request_remote_actions()) {
    clear_which();
    set_has_request_remote_actions();
    which_.request_remote_actions_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_remote_actions_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchConfigurations::mutable_request_remote_actions() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchConfigurations.request_remote_actions)
  return _internal_mutable_request_remote_actions();
}

// .inhumate.rti.proto.RemoteAction remote_action = 5;
inline bool LaunchConfigurations::_internal_has_remote_action() const {
  return which_case() == kRemoteAction;
}
inline bool LaunchConfigurations::has_remote_action() const {
  return _internal_has_remote_action();
}
inline void LaunchConfigurations::set_has_remote_action() {
  _oneof_case_[0] = kRemoteAction;
}
inline void LaunchConfigurations::clear_remote_action() {
  if (_internal_has_remote_action()) {
    delete which_.remote_action_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::RemoteAction* LaunchConfigurations::release_remote_action() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchConfigurations.remote_action)
  if (_internal_has_remote_action()) {
    clear_has_which();
      ::inhumate::rti::proto::RemoteAction* temp = which_.remote_action_;
    which_.remote_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::RemoteAction& LaunchConfigurations::_internal_remote_action() const {
  return _internal_has_remote_action()
      ? *which_.remote_action_
      : *reinterpret_cast< ::inhumate::rti::proto::RemoteAction*>(&::inhumate::rti::proto::_RemoteAction_default_instance_);
}
inline const ::inhumate::rti::proto::RemoteAction& LaunchConfigurations::remote_action() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchConfigurations.remote_action)
  return _internal_remote_action();
}
inline ::inhumate::rti::proto::RemoteAction* LaunchConfigurations::_internal_mutable_remote_action() {
  if (!_internal_has_remote_action()) {
    clear_which();
    set_has_remote_action();
    which_.remote_action_ = CreateMaybeMessage< ::inhumate::rti::proto::RemoteAction >(
        GetArenaNoVirtual());
  }
  return which_.remote_action_;
}
inline ::inhumate::rti::proto::RemoteAction* LaunchConfigurations::mutable_remote_action() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchConfigurations.remote_action)
  return _internal_mutable_remote_action();
}

inline bool LaunchConfigurations::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void LaunchConfigurations::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline LaunchConfigurations::WhichCase LaunchConfigurations::which_case() const {
  return LaunchConfigurations::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LaunchConfiguration

// string name = 1;
inline void LaunchConfiguration::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaunchConfiguration::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchConfiguration.name)
  return _internal_name();
}
inline void LaunchConfiguration::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchConfiguration.name)
}
inline std::string* LaunchConfiguration::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchConfiguration.name)
  return _internal_mutable_name();
}
inline const std::string& LaunchConfiguration::_internal_name() const {
  return name_.GetNoArena();
}
inline void LaunchConfiguration::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaunchConfiguration::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LaunchConfiguration.name)
}
inline void LaunchConfiguration::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LaunchConfiguration.name)
}
inline void LaunchConfiguration::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LaunchConfiguration.name)
}
inline std::string* LaunchConfiguration::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaunchConfiguration::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchConfiguration.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchConfiguration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LaunchConfiguration.name)
}

// string description = 2;
inline void LaunchConfiguration::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaunchConfiguration::description() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchConfiguration.description)
  return _internal_description();
}
inline void LaunchConfiguration::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchConfiguration.description)
}
inline std::string* LaunchConfiguration::mutable_description() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchConfiguration.description)
  return _internal_mutable_description();
}
inline const std::string& LaunchConfiguration::_internal_description() const {
  return description_.GetNoArena();
}
inline void LaunchConfiguration::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaunchConfiguration::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LaunchConfiguration.description)
}
inline void LaunchConfiguration::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LaunchConfiguration.description)
}
inline void LaunchConfiguration::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LaunchConfiguration.description)
}
inline std::string* LaunchConfiguration::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaunchConfiguration::release_description() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchConfiguration.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchConfiguration::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LaunchConfiguration.description)
}

// repeated .inhumate.rti.proto.Parameter parameters = 3;
inline int LaunchConfiguration::_internal_parameters_size() const {
  return parameters_.size();
}
inline int LaunchConfiguration::parameters_size() const {
  return _internal_parameters_size();
}
inline ::inhumate::rti::proto::Parameter* LaunchConfiguration::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchConfiguration.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >*
LaunchConfiguration::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.LaunchConfiguration.parameters)
  return &parameters_;
}
inline const ::inhumate::rti::proto::Parameter& LaunchConfiguration::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::inhumate::rti::proto::Parameter& LaunchConfiguration::parameters(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchConfiguration.parameters)
  return _internal_parameters(index);
}
inline ::inhumate::rti::proto::Parameter* LaunchConfiguration::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::inhumate::rti::proto::Parameter* LaunchConfiguration::add_parameters() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.LaunchConfiguration.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::Parameter >&
LaunchConfiguration::parameters() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.LaunchConfiguration.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// RemoteAction

// string name = 1;
inline void RemoteAction::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoteAction::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RemoteAction.name)
  return _internal_name();
}
inline void RemoteAction::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RemoteAction.name)
}
inline std::string* RemoteAction::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RemoteAction.name)
  return _internal_mutable_name();
}
inline const std::string& RemoteAction::_internal_name() const {
  return name_.GetNoArena();
}
inline void RemoteAction::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoteAction::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RemoteAction.name)
}
inline void RemoteAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RemoteAction.name)
}
inline void RemoteAction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RemoteAction.name)
}
inline std::string* RemoteAction::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteAction::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RemoteAction.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteAction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RemoteAction.name)
}

// string title = 2;
inline void RemoteAction::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoteAction::title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RemoteAction.title)
  return _internal_title();
}
inline void RemoteAction::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RemoteAction.title)
}
inline std::string* RemoteAction::mutable_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RemoteAction.title)
  return _internal_mutable_title();
}
inline const std::string& RemoteAction::_internal_title() const {
  return title_.GetNoArena();
}
inline void RemoteAction::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoteAction::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RemoteAction.title)
}
inline void RemoteAction::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RemoteAction.title)
}
inline void RemoteAction::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RemoteAction.title)
}
inline std::string* RemoteAction::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteAction::release_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RemoteAction.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteAction::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RemoteAction.title)
}

// string description = 3;
inline void RemoteAction::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoteAction::description() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RemoteAction.description)
  return _internal_description();
}
inline void RemoteAction::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RemoteAction.description)
}
inline std::string* RemoteAction::mutable_description() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RemoteAction.description)
  return _internal_mutable_description();
}
inline const std::string& RemoteAction::_internal_description() const {
  return description_.GetNoArena();
}
inline void RemoteAction::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoteAction::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RemoteAction.description)
}
inline void RemoteAction::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RemoteAction.description)
}
inline void RemoteAction::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RemoteAction.description)
}
inline std::string* RemoteAction::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteAction::release_description() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RemoteAction.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteAction::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RemoteAction.description)
}

// bool disabled_when_launched = 4;
inline void RemoteAction::clear_disabled_when_launched() {
  disabled_when_launched_ = false;
}
inline bool RemoteAction::_internal_disabled_when_launched() const {
  return disabled_when_launched_;
}
inline bool RemoteAction::disabled_when_launched() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RemoteAction.disabled_when_launched)
  return _internal_disabled_when_launched();
}
inline void RemoteAction::_internal_set_disabled_when_launched(bool value) {
  
  disabled_when_launched_ = value;
}
inline void RemoteAction::set_disabled_when_launched(bool value) {
  _internal_set_disabled_when_launched(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RemoteAction.disabled_when_launched)
}

// bool offset = 5;
inline void RemoteAction::clear_offset() {
  offset_ = false;
}
inline bool RemoteAction::_internal_offset() const {
  return offset_;
}
inline bool RemoteAction::offset() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RemoteAction.offset)
  return _internal_offset();
}
inline void RemoteAction::_internal_set_offset(bool value) {
  
  offset_ = value;
}
inline void RemoteAction::set_offset(bool value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RemoteAction.offset)
}

// string icon = 6;
inline void RemoteAction::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoteAction::icon() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RemoteAction.icon)
  return _internal_icon();
}
inline void RemoteAction::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RemoteAction.icon)
}
inline std::string* RemoteAction::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.RemoteAction.icon)
  return _internal_mutable_icon();
}
inline const std::string& RemoteAction::_internal_icon() const {
  return icon_.GetNoArena();
}
inline void RemoteAction::_internal_set_icon(const std::string& value) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoteAction::set_icon(std::string&& value) {
  
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.RemoteAction.icon)
}
inline void RemoteAction::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.RemoteAction.icon)
}
inline void RemoteAction::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.RemoteAction.icon)
}
inline std::string* RemoteAction::_internal_mutable_icon() {
  
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteAction::release_icon() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.RemoteAction.icon)
  
  return icon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteAction::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.RemoteAction.icon)
}

// int32 sort_weight = 7;
inline void RemoteAction::clear_sort_weight() {
  sort_weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteAction::_internal_sort_weight() const {
  return sort_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteAction::sort_weight() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.RemoteAction.sort_weight)
  return _internal_sort_weight();
}
inline void RemoteAction::_internal_set_sort_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sort_weight_ = value;
}
inline void RemoteAction::set_sort_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sort_weight(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.RemoteAction.sort_weight)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LaunchConfigurations_2eproto
