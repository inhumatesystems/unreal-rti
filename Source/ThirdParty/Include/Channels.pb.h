// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Channels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Channels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Channels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Channels_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_Channels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Channels_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class Channel;
class ChannelDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ChannelDefaultTypeInternal _Channel_default_instance_;
class ChannelUsage;
class ChannelUsageDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ChannelUsageDefaultTypeInternal _ChannelUsage_default_instance_;
class ChannelUse;
class ChannelUseDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ChannelUseDefaultTypeInternal _ChannelUse_default_instance_;
class Channels;
class ChannelsDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern ChannelsDefaultTypeInternal _Channels_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Channel* Arena::CreateMaybeMessage<::inhumate::rti::proto::Channel>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ChannelUsage* Arena::CreateMaybeMessage<::inhumate::rti::proto::ChannelUsage>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::ChannelUse* Arena::CreateMaybeMessage<::inhumate::rti::proto::ChannelUse>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::Channels* Arena::CreateMaybeMessage<::inhumate::rti::proto::Channels>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT Channels :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Channels) */ {
 public:
  Channels();
  virtual ~Channels();

  Channels(const Channels& from);
  Channels(Channels&& from) noexcept
    : Channels() {
    *this = ::std::move(from);
  }

  inline Channels& operator=(const Channels& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channels& operator=(Channels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Channels& default_instance();

  enum WhichCase {
    kRequestChannelUsage = 1,
    kChannelUsage = 2,
    kChannel = 3,
    kLogChannel = 4,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Channels* internal_default_instance() {
    return reinterpret_cast<const Channels*>(
               &_Channels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Channels& a, Channels& b) {
    a.Swap(&b);
  }
  inline void Swap(Channels* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Channels* New() const final {
    return CreateMaybeMessage<Channels>(nullptr);
  }

  Channels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Channels>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Channels& from);
  void MergeFrom(const Channels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Channels";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Channels_2eproto);
    return ::descriptor_table_Channels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestChannelUsageFieldNumber = 1,
    kChannelUsageFieldNumber = 2,
    kChannelFieldNumber = 3,
    kLogChannelFieldNumber = 4,
  };
  // .google.protobuf.Empty request_channel_usage = 1;
  bool has_request_channel_usage() const;
  private:
  bool _internal_has_request_channel_usage() const;
  public:
  void clear_request_channel_usage();
  const PROTOBUF_NAMESPACE_ID::Empty& request_channel_usage() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_channel_usage();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_channel_usage();
  void set_allocated_request_channel_usage(PROTOBUF_NAMESPACE_ID::Empty* request_channel_usage);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_channel_usage() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_channel_usage();
  public:

  // .inhumate.rti.proto.ChannelUsage channel_usage = 2;
  bool has_channel_usage() const;
  private:
  bool _internal_has_channel_usage() const;
  public:
  void clear_channel_usage();
  const ::inhumate::rti::proto::ChannelUsage& channel_usage() const;
  ::inhumate::rti::proto::ChannelUsage* release_channel_usage();
  ::inhumate::rti::proto::ChannelUsage* mutable_channel_usage();
  void set_allocated_channel_usage(::inhumate::rti::proto::ChannelUsage* channel_usage);
  private:
  const ::inhumate::rti::proto::ChannelUsage& _internal_channel_usage() const;
  ::inhumate::rti::proto::ChannelUsage* _internal_mutable_channel_usage();
  public:

  // .inhumate.rti.proto.Channel channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::inhumate::rti::proto::Channel& channel() const;
  ::inhumate::rti::proto::Channel* release_channel();
  ::inhumate::rti::proto::Channel* mutable_channel();
  void set_allocated_channel(::inhumate::rti::proto::Channel* channel);
  private:
  const ::inhumate::rti::proto::Channel& _internal_channel() const;
  ::inhumate::rti::proto::Channel* _internal_mutable_channel();
  public:

  // .inhumate.rti.proto.Channel log_channel = 4;
  bool has_log_channel() const;
  private:
  bool _internal_has_log_channel() const;
  public:
  void clear_log_channel();
  const ::inhumate::rti::proto::Channel& log_channel() const;
  ::inhumate::rti::proto::Channel* release_log_channel();
  ::inhumate::rti::proto::Channel* mutable_log_channel();
  void set_allocated_log_channel(::inhumate::rti::proto::Channel* log_channel);
  private:
  const ::inhumate::rti::proto::Channel& _internal_log_channel() const;
  ::inhumate::rti::proto::Channel* _internal_mutable_log_channel();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Channels)
 private:
  class _Internal;
  void set_has_request_channel_usage();
  void set_has_channel_usage();
  void set_has_channel();
  void set_has_log_channel();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_channel_usage_;
    ::inhumate::rti::proto::ChannelUsage* channel_usage_;
    ::inhumate::rti::proto::Channel* channel_;
    ::inhumate::rti::proto::Channel* log_channel_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Channels_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT ChannelUsage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.ChannelUsage) */ {
 public:
  ChannelUsage();
  virtual ~ChannelUsage();

  ChannelUsage(const ChannelUsage& from);
  ChannelUsage(ChannelUsage&& from) noexcept
    : ChannelUsage() {
    *this = ::std::move(from);
  }

  inline ChannelUsage& operator=(const ChannelUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelUsage& operator=(ChannelUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelUsage* internal_default_instance() {
    return reinterpret_cast<const ChannelUsage*>(
               &_ChannelUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelUsage& a, ChannelUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelUsage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelUsage* New() const final {
    return CreateMaybeMessage<ChannelUsage>(nullptr);
  }

  ChannelUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelUsage& from);
  void MergeFrom(const ChannelUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.ChannelUsage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Channels_2eproto);
    return ::descriptor_table_Channels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // repeated .inhumate.rti.proto.ChannelUse usage = 2;
  int usage_size() const;
  private:
  int _internal_usage_size() const;
  public:
  void clear_usage();
  ::inhumate::rti::proto::ChannelUse* mutable_usage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::ChannelUse >*
      mutable_usage();
  private:
  const ::inhumate::rti::proto::ChannelUse& _internal_usage(int index) const;
  ::inhumate::rti::proto::ChannelUse* _internal_add_usage();
  public:
  const ::inhumate::rti::proto::ChannelUse& usage(int index) const;
  ::inhumate::rti::proto::ChannelUse* add_usage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::ChannelUse >&
      usage() const;

  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.ChannelUsage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::ChannelUse > usage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Channels_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT ChannelUse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.ChannelUse) */ {
 public:
  ChannelUse();
  virtual ~ChannelUse();

  ChannelUse(const ChannelUse& from);
  ChannelUse(ChannelUse&& from) noexcept
    : ChannelUse() {
    *this = ::std::move(from);
  }

  inline ChannelUse& operator=(const ChannelUse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelUse& operator=(ChannelUse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelUse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelUse* internal_default_instance() {
    return reinterpret_cast<const ChannelUse*>(
               &_ChannelUse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChannelUse& a, ChannelUse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelUse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelUse* New() const final {
    return CreateMaybeMessage<ChannelUse>(nullptr);
  }

  ChannelUse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelUse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelUse& from);
  void MergeFrom(const ChannelUse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelUse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.ChannelUse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Channels_2eproto);
    return ::descriptor_table_Channels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kPublishFieldNumber = 3,
    kSubscribeFieldNumber = 4,
  };
  // .inhumate.rti.proto.Channel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::inhumate::rti::proto::Channel& channel() const;
  ::inhumate::rti::proto::Channel* release_channel();
  ::inhumate::rti::proto::Channel* mutable_channel();
  void set_allocated_channel(::inhumate::rti::proto::Channel* channel);
  private:
  const ::inhumate::rti::proto::Channel& _internal_channel() const;
  ::inhumate::rti::proto::Channel* _internal_mutable_channel();
  public:

  // bool publish = 3;
  void clear_publish();
  bool publish() const;
  void set_publish(bool value);
  private:
  bool _internal_publish() const;
  void _internal_set_publish(bool value);
  public:

  // bool subscribe = 4;
  void clear_subscribe();
  bool subscribe() const;
  void set_subscribe(bool value);
  private:
  bool _internal_subscribe() const;
  void _internal_set_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.ChannelUse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::inhumate::rti::proto::Channel* channel_;
  bool publish_;
  bool subscribe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Channels_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT Channel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.Channel) */ {
 public:
  Channel();
  virtual ~Channel();

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Channel* New() const final {
    return CreateMaybeMessage<Channel>(nullptr);
  }

  Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.Channel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Channels_2eproto);
    return ::descriptor_table_Channels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataTypeFieldNumber = 2,
    kEphemeralFieldNumber = 3,
    kStateFieldNumber = 4,
    kFirstFieldIdFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data_type = 2;
  void clear_data_type();
  const std::string& data_type() const;
  void set_data_type(const std::string& value);
  void set_data_type(std::string&& value);
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  std::string* mutable_data_type();
  std::string* release_data_type();
  void set_allocated_data_type(std::string* data_type);
  private:
  const std::string& _internal_data_type() const;
  void _internal_set_data_type(const std::string& value);
  std::string* _internal_mutable_data_type();
  public:

  // bool ephemeral = 3;
  void clear_ephemeral();
  bool ephemeral() const;
  void set_ephemeral(bool value);
  private:
  bool _internal_ephemeral() const;
  void _internal_set_ephemeral(bool value);
  public:

  // bool state = 4;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // bool first_field_id = 5;
  void clear_first_field_id();
  bool first_field_id() const;
  void set_first_field_id(bool value);
  private:
  bool _internal_first_field_id() const;
  void _internal_set_first_field_id(bool value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.Channel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_type_;
  bool ephemeral_;
  bool state_;
  bool first_field_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Channels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Channels

// .google.protobuf.Empty request_channel_usage = 1;
inline bool Channels::_internal_has_request_channel_usage() const {
  return which_case() == kRequestChannelUsage;
}
inline bool Channels::has_request_channel_usage() const {
  return _internal_has_request_channel_usage();
}
inline void Channels::set_has_request_channel_usage() {
  _oneof_case_[0] = kRequestChannelUsage;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Channels::release_request_channel_usage() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Channels.request_channel_usage)
  if (_internal_has_request_channel_usage()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_channel_usage_;
    which_.request_channel_usage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Channels::_internal_request_channel_usage() const {
  return _internal_has_request_channel_usage()
      ? *which_.request_channel_usage_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Channels::request_channel_usage() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channels.request_channel_usage)
  return _internal_request_channel_usage();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Channels::_internal_mutable_request_channel_usage() {
  if (!_internal_has_request_channel_usage()) {
    clear_which();
    set_has_request_channel_usage();
    which_.request_channel_usage_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_channel_usage_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Channels::mutable_request_channel_usage() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Channels.request_channel_usage)
  return _internal_mutable_request_channel_usage();
}

// .inhumate.rti.proto.ChannelUsage channel_usage = 2;
inline bool Channels::_internal_has_channel_usage() const {
  return which_case() == kChannelUsage;
}
inline bool Channels::has_channel_usage() const {
  return _internal_has_channel_usage();
}
inline void Channels::set_has_channel_usage() {
  _oneof_case_[0] = kChannelUsage;
}
inline void Channels::clear_channel_usage() {
  if (_internal_has_channel_usage()) {
    delete which_.channel_usage_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::ChannelUsage* Channels::release_channel_usage() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Channels.channel_usage)
  if (_internal_has_channel_usage()) {
    clear_has_which();
      ::inhumate::rti::proto::ChannelUsage* temp = which_.channel_usage_;
    which_.channel_usage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::ChannelUsage& Channels::_internal_channel_usage() const {
  return _internal_has_channel_usage()
      ? *which_.channel_usage_
      : *reinterpret_cast< ::inhumate::rti::proto::ChannelUsage*>(&::inhumate::rti::proto::_ChannelUsage_default_instance_);
}
inline const ::inhumate::rti::proto::ChannelUsage& Channels::channel_usage() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channels.channel_usage)
  return _internal_channel_usage();
}
inline ::inhumate::rti::proto::ChannelUsage* Channels::_internal_mutable_channel_usage() {
  if (!_internal_has_channel_usage()) {
    clear_which();
    set_has_channel_usage();
    which_.channel_usage_ = CreateMaybeMessage< ::inhumate::rti::proto::ChannelUsage >(
        GetArenaNoVirtual());
  }
  return which_.channel_usage_;
}
inline ::inhumate::rti::proto::ChannelUsage* Channels::mutable_channel_usage() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Channels.channel_usage)
  return _internal_mutable_channel_usage();
}

// .inhumate.rti.proto.Channel channel = 3;
inline bool Channels::_internal_has_channel() const {
  return which_case() == kChannel;
}
inline bool Channels::has_channel() const {
  return _internal_has_channel();
}
inline void Channels::set_has_channel() {
  _oneof_case_[0] = kChannel;
}
inline void Channels::clear_channel() {
  if (_internal_has_channel()) {
    delete which_.channel_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Channel* Channels::release_channel() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Channels.channel)
  if (_internal_has_channel()) {
    clear_has_which();
      ::inhumate::rti::proto::Channel* temp = which_.channel_;
    which_.channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Channel& Channels::_internal_channel() const {
  return _internal_has_channel()
      ? *which_.channel_
      : *reinterpret_cast< ::inhumate::rti::proto::Channel*>(&::inhumate::rti::proto::_Channel_default_instance_);
}
inline const ::inhumate::rti::proto::Channel& Channels::channel() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channels.channel)
  return _internal_channel();
}
inline ::inhumate::rti::proto::Channel* Channels::_internal_mutable_channel() {
  if (!_internal_has_channel()) {
    clear_which();
    set_has_channel();
    which_.channel_ = CreateMaybeMessage< ::inhumate::rti::proto::Channel >(
        GetArenaNoVirtual());
  }
  return which_.channel_;
}
inline ::inhumate::rti::proto::Channel* Channels::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Channels.channel)
  return _internal_mutable_channel();
}

// .inhumate.rti.proto.Channel log_channel = 4;
inline bool Channels::_internal_has_log_channel() const {
  return which_case() == kLogChannel;
}
inline bool Channels::has_log_channel() const {
  return _internal_has_log_channel();
}
inline void Channels::set_has_log_channel() {
  _oneof_case_[0] = kLogChannel;
}
inline void Channels::clear_log_channel() {
  if (_internal_has_log_channel()) {
    delete which_.log_channel_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::Channel* Channels::release_log_channel() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Channels.log_channel)
  if (_internal_has_log_channel()) {
    clear_has_which();
      ::inhumate::rti::proto::Channel* temp = which_.log_channel_;
    which_.log_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::Channel& Channels::_internal_log_channel() const {
  return _internal_has_log_channel()
      ? *which_.log_channel_
      : *reinterpret_cast< ::inhumate::rti::proto::Channel*>(&::inhumate::rti::proto::_Channel_default_instance_);
}
inline const ::inhumate::rti::proto::Channel& Channels::log_channel() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channels.log_channel)
  return _internal_log_channel();
}
inline ::inhumate::rti::proto::Channel* Channels::_internal_mutable_log_channel() {
  if (!_internal_has_log_channel()) {
    clear_which();
    set_has_log_channel();
    which_.log_channel_ = CreateMaybeMessage< ::inhumate::rti::proto::Channel >(
        GetArenaNoVirtual());
  }
  return which_.log_channel_;
}
inline ::inhumate::rti::proto::Channel* Channels::mutable_log_channel() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Channels.log_channel)
  return _internal_mutable_log_channel();
}

inline bool Channels::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void Channels::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline Channels::WhichCase Channels::which_case() const {
  return Channels::WhichCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChannelUsage

// string client_id = 1;
inline void ChannelUsage::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelUsage::client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ChannelUsage.client_id)
  return _internal_client_id();
}
inline void ChannelUsage::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ChannelUsage.client_id)
}
inline std::string* ChannelUsage::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ChannelUsage.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& ChannelUsage::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void ChannelUsage::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelUsage::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.ChannelUsage.client_id)
}
inline void ChannelUsage::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.ChannelUsage.client_id)
}
inline void ChannelUsage::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.ChannelUsage.client_id)
}
inline std::string* ChannelUsage::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelUsage::release_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ChannelUsage.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelUsage::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ChannelUsage.client_id)
}

// repeated .inhumate.rti.proto.ChannelUse usage = 2;
inline int ChannelUsage::_internal_usage_size() const {
  return usage_.size();
}
inline int ChannelUsage::usage_size() const {
  return _internal_usage_size();
}
inline void ChannelUsage::clear_usage() {
  usage_.Clear();
}
inline ::inhumate::rti::proto::ChannelUse* ChannelUsage::mutable_usage(int index) {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ChannelUsage.usage)
  return usage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::ChannelUse >*
ChannelUsage::mutable_usage() {
  // @@protoc_insertion_point(field_mutable_list:inhumate.rti.proto.ChannelUsage.usage)
  return &usage_;
}
inline const ::inhumate::rti::proto::ChannelUse& ChannelUsage::_internal_usage(int index) const {
  return usage_.Get(index);
}
inline const ::inhumate::rti::proto::ChannelUse& ChannelUsage::usage(int index) const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ChannelUsage.usage)
  return _internal_usage(index);
}
inline ::inhumate::rti::proto::ChannelUse* ChannelUsage::_internal_add_usage() {
  return usage_.Add();
}
inline ::inhumate::rti::proto::ChannelUse* ChannelUsage::add_usage() {
  // @@protoc_insertion_point(field_add:inhumate.rti.proto.ChannelUsage.usage)
  return _internal_add_usage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::inhumate::rti::proto::ChannelUse >&
ChannelUsage::usage() const {
  // @@protoc_insertion_point(field_list:inhumate.rti.proto.ChannelUsage.usage)
  return usage_;
}

// -------------------------------------------------------------------

// ChannelUse

// .inhumate.rti.proto.Channel channel = 1;
inline bool ChannelUse::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool ChannelUse::has_channel() const {
  return _internal_has_channel();
}
inline void ChannelUse::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::inhumate::rti::proto::Channel& ChannelUse::_internal_channel() const {
  const ::inhumate::rti::proto::Channel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::inhumate::rti::proto::Channel*>(
      &::inhumate::rti::proto::_Channel_default_instance_);
}
inline const ::inhumate::rti::proto::Channel& ChannelUse::channel() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ChannelUse.channel)
  return _internal_channel();
}
inline ::inhumate::rti::proto::Channel* ChannelUse::release_channel() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.ChannelUse.channel)
  
  ::inhumate::rti::proto::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::inhumate::rti::proto::Channel* ChannelUse::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::inhumate::rti::proto::Channel>(GetArenaNoVirtual());
    channel_ = p;
  }
  return channel_;
}
inline ::inhumate::rti::proto::Channel* ChannelUse::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.ChannelUse.channel)
  return _internal_mutable_channel();
}
inline void ChannelUse::set_allocated_channel(::inhumate::rti::proto::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.ChannelUse.channel)
}

// bool publish = 3;
inline void ChannelUse::clear_publish() {
  publish_ = false;
}
inline bool ChannelUse::_internal_publish() const {
  return publish_;
}
inline bool ChannelUse::publish() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ChannelUse.publish)
  return _internal_publish();
}
inline void ChannelUse::_internal_set_publish(bool value) {
  
  publish_ = value;
}
inline void ChannelUse::set_publish(bool value) {
  _internal_set_publish(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ChannelUse.publish)
}

// bool subscribe = 4;
inline void ChannelUse::clear_subscribe() {
  subscribe_ = false;
}
inline bool ChannelUse::_internal_subscribe() const {
  return subscribe_;
}
inline bool ChannelUse::subscribe() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.ChannelUse.subscribe)
  return _internal_subscribe();
}
inline void ChannelUse::_internal_set_subscribe(bool value) {
  
  subscribe_ = value;
}
inline void ChannelUse::set_subscribe(bool value) {
  _internal_set_subscribe(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.ChannelUse.subscribe)
}

// -------------------------------------------------------------------

// Channel

// string name = 1;
inline void Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channel.name)
  return _internal_name();
}
inline void Channel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Channel.name)
}
inline std::string* Channel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Channel.name)
  return _internal_mutable_name();
}
inline const std::string& Channel::_internal_name() const {
  return name_.GetNoArena();
}
inline void Channel::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Channel::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Channel.name)
}
inline void Channel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Channel.name)
}
inline void Channel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Channel.name)
}
inline std::string* Channel::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Channel::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Channel.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Channel.name)
}

// string data_type = 2;
inline void Channel::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Channel::data_type() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channel.data_type)
  return _internal_data_type();
}
inline void Channel::set_data_type(const std::string& value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Channel.data_type)
}
inline std::string* Channel::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.Channel.data_type)
  return _internal_mutable_data_type();
}
inline const std::string& Channel::_internal_data_type() const {
  return data_type_.GetNoArena();
}
inline void Channel::_internal_set_data_type(const std::string& value) {
  
  data_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Channel::set_data_type(std::string&& value) {
  
  data_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.Channel.data_type)
}
inline void Channel::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.Channel.data_type)
}
inline void Channel::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.Channel.data_type)
}
inline std::string* Channel::_internal_mutable_data_type() {
  
  return data_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Channel::release_data_type() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.Channel.data_type)
  
  return data_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_data_type(std::string* data_type) {
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.Channel.data_type)
}

// bool ephemeral = 3;
inline void Channel::clear_ephemeral() {
  ephemeral_ = false;
}
inline bool Channel::_internal_ephemeral() const {
  return ephemeral_;
}
inline bool Channel::ephemeral() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channel.ephemeral)
  return _internal_ephemeral();
}
inline void Channel::_internal_set_ephemeral(bool value) {
  
  ephemeral_ = value;
}
inline void Channel::set_ephemeral(bool value) {
  _internal_set_ephemeral(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Channel.ephemeral)
}

// bool state = 4;
inline void Channel::clear_state() {
  state_ = false;
}
inline bool Channel::_internal_state() const {
  return state_;
}
inline bool Channel::state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channel.state)
  return _internal_state();
}
inline void Channel::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void Channel::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Channel.state)
}

// bool first_field_id = 5;
inline void Channel::clear_first_field_id() {
  first_field_id_ = false;
}
inline bool Channel::_internal_first_field_id() const {
  return first_field_id_;
}
inline bool Channel::first_field_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.Channel.first_field_id)
  return _internal_first_field_id();
}
inline void Channel::_internal_set_first_field_id(bool value) {
  
  first_field_id_ = value;
}
inline void Channel::set_first_field_id(bool value) {
  _internal_set_first_field_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.Channel.first_field_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Channels_2eproto
