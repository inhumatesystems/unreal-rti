// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LaunchEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LaunchEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LaunchEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LaunchEvent_2eproto INHUMATE_RTI_PROTOS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct INHUMATE_RTI_PROTOS_EXPORT TableStruct_LaunchEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LaunchEvent_2eproto;
namespace inhumate {
namespace rti {
namespace proto {
class LaunchEvent;
class LaunchEventDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LaunchEventDefaultTypeInternal _LaunchEvent_default_instance_;
class LaunchEvent_LaunchItemState;
class LaunchEvent_LaunchItemStateDefaultTypeInternal;
INHUMATE_RTI_PROTOS_EXPORT extern LaunchEvent_LaunchItemStateDefaultTypeInternal _LaunchEvent_LaunchItemState_default_instance_;
}  // namespace proto
}  // namespace rti
}  // namespace inhumate
PROTOBUF_NAMESPACE_OPEN
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::LaunchEvent* Arena::CreateMaybeMessage<::inhumate::rti::proto::LaunchEvent>(Arena*);
template<> INHUMATE_RTI_PROTOS_EXPORT ::inhumate::rti::proto::LaunchEvent_LaunchItemState* Arena::CreateMaybeMessage<::inhumate::rti::proto::LaunchEvent_LaunchItemState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inhumate {
namespace rti {
namespace proto {

enum LaunchEvent_ProcessState : int {
  LaunchEvent_ProcessState_UNKNOWN = 0,
  LaunchEvent_ProcessState_PENDING = 1,
  LaunchEvent_ProcessState_STARTED = 2,
  LaunchEvent_ProcessState_RUNNING = 3,
  LaunchEvent_ProcessState_STOPPING = 4,
  LaunchEvent_ProcessState_DONE = 5,
  LaunchEvent_ProcessState_FAILED = 6,
  LaunchEvent_ProcessState_LaunchEvent_ProcessState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LaunchEvent_ProcessState_LaunchEvent_ProcessState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
INHUMATE_RTI_PROTOS_EXPORT bool LaunchEvent_ProcessState_IsValid(int value);
constexpr LaunchEvent_ProcessState LaunchEvent_ProcessState_ProcessState_MIN = LaunchEvent_ProcessState_UNKNOWN;
constexpr LaunchEvent_ProcessState LaunchEvent_ProcessState_ProcessState_MAX = LaunchEvent_ProcessState_FAILED;
constexpr int LaunchEvent_ProcessState_ProcessState_ARRAYSIZE = LaunchEvent_ProcessState_ProcessState_MAX + 1;

INHUMATE_RTI_PROTOS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaunchEvent_ProcessState_descriptor();
template<typename T>
inline const std::string& LaunchEvent_ProcessState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaunchEvent_ProcessState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaunchEvent_ProcessState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaunchEvent_ProcessState_descriptor(), enum_t_value);
}
inline bool LaunchEvent_ProcessState_Parse(
    const std::string& name, LaunchEvent_ProcessState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaunchEvent_ProcessState>(
    LaunchEvent_ProcessState_descriptor(), name, value);
}
// ===================================================================

class INHUMATE_RTI_PROTOS_EXPORT LaunchEvent_LaunchItemState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.LaunchEvent.LaunchItemState) */ {
 public:
  LaunchEvent_LaunchItemState();
  virtual ~LaunchEvent_LaunchItemState();

  LaunchEvent_LaunchItemState(const LaunchEvent_LaunchItemState& from);
  LaunchEvent_LaunchItemState(LaunchEvent_LaunchItemState&& from) noexcept
    : LaunchEvent_LaunchItemState() {
    *this = ::std::move(from);
  }

  inline LaunchEvent_LaunchItemState& operator=(const LaunchEvent_LaunchItemState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchEvent_LaunchItemState& operator=(LaunchEvent_LaunchItemState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchEvent_LaunchItemState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchEvent_LaunchItemState* internal_default_instance() {
    return reinterpret_cast<const LaunchEvent_LaunchItemState*>(
               &_LaunchEvent_LaunchItemState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaunchEvent_LaunchItemState& a, LaunchEvent_LaunchItemState& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchEvent_LaunchItemState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchEvent_LaunchItemState* New() const final {
    return CreateMaybeMessage<LaunchEvent_LaunchItemState>(nullptr);
  }

  LaunchEvent_LaunchItemState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchEvent_LaunchItemState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchEvent_LaunchItemState& from);
  void MergeFrom(const LaunchEvent_LaunchItemState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchEvent_LaunchItemState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.LaunchEvent.LaunchItemState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LaunchEvent_2eproto);
    return ::descriptor_table_LaunchEvent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLauncherClientIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLinkUrlFieldNumber = 4,
    kLinkTitleFieldNumber = 5,
    kLinkDescriptionFieldNumber = 6,
    kErrorFieldNumber = 7,
    kProcessStateFieldNumber = 3,
  };
  // string launcher_client_id = 1;
  void clear_launcher_client_id();
  const std::string& launcher_client_id() const;
  void set_launcher_client_id(const std::string& value);
  void set_launcher_client_id(std::string&& value);
  void set_launcher_client_id(const char* value);
  void set_launcher_client_id(const char* value, size_t size);
  std::string* mutable_launcher_client_id();
  std::string* release_launcher_client_id();
  void set_allocated_launcher_client_id(std::string* launcher_client_id);
  private:
  const std::string& _internal_launcher_client_id() const;
  void _internal_set_launcher_client_id(const std::string& value);
  std::string* _internal_mutable_launcher_client_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string link_url = 4;
  void clear_link_url();
  const std::string& link_url() const;
  void set_link_url(const std::string& value);
  void set_link_url(std::string&& value);
  void set_link_url(const char* value);
  void set_link_url(const char* value, size_t size);
  std::string* mutable_link_url();
  std::string* release_link_url();
  void set_allocated_link_url(std::string* link_url);
  private:
  const std::string& _internal_link_url() const;
  void _internal_set_link_url(const std::string& value);
  std::string* _internal_mutable_link_url();
  public:

  // string link_title = 5;
  void clear_link_title();
  const std::string& link_title() const;
  void set_link_title(const std::string& value);
  void set_link_title(std::string&& value);
  void set_link_title(const char* value);
  void set_link_title(const char* value, size_t size);
  std::string* mutable_link_title();
  std::string* release_link_title();
  void set_allocated_link_title(std::string* link_title);
  private:
  const std::string& _internal_link_title() const;
  void _internal_set_link_title(const std::string& value);
  std::string* _internal_mutable_link_title();
  public:

  // string link_description = 6;
  void clear_link_description();
  const std::string& link_description() const;
  void set_link_description(const std::string& value);
  void set_link_description(std::string&& value);
  void set_link_description(const char* value);
  void set_link_description(const char* value, size_t size);
  std::string* mutable_link_description();
  std::string* release_link_description();
  void set_allocated_link_description(std::string* link_description);
  private:
  const std::string& _internal_link_description() const;
  void _internal_set_link_description(const std::string& value);
  std::string* _internal_mutable_link_description();
  public:

  // string error = 7;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .inhumate.rti.proto.LaunchEvent.ProcessState process_state = 3;
  void clear_process_state();
  ::inhumate::rti::proto::LaunchEvent_ProcessState process_state() const;
  void set_process_state(::inhumate::rti::proto::LaunchEvent_ProcessState value);
  private:
  ::inhumate::rti::proto::LaunchEvent_ProcessState _internal_process_state() const;
  void _internal_set_process_state(::inhumate::rti::proto::LaunchEvent_ProcessState value);
  public:

  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.LaunchEvent.LaunchItemState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launcher_client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int process_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LaunchEvent_2eproto;
};
// -------------------------------------------------------------------

class INHUMATE_RTI_PROTOS_EXPORT LaunchEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inhumate.rti.proto.LaunchEvent) */ {
 public:
  LaunchEvent();
  virtual ~LaunchEvent();

  LaunchEvent(const LaunchEvent& from);
  LaunchEvent(LaunchEvent&& from) noexcept
    : LaunchEvent() {
    *this = ::std::move(from);
  }

  inline LaunchEvent& operator=(const LaunchEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchEvent& operator=(LaunchEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchEvent& default_instance();

  enum WhichCase {
    kRequestState = 1,
    kState = 2,
    WHICH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchEvent* internal_default_instance() {
    return reinterpret_cast<const LaunchEvent*>(
               &_LaunchEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaunchEvent& a, LaunchEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchEvent* New() const final {
    return CreateMaybeMessage<LaunchEvent>(nullptr);
  }

  LaunchEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchEvent& from);
  void MergeFrom(const LaunchEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inhumate.rti.proto.LaunchEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LaunchEvent_2eproto);
    return ::descriptor_table_LaunchEvent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LaunchEvent_LaunchItemState LaunchItemState;

  typedef LaunchEvent_ProcessState ProcessState;
  static constexpr ProcessState UNKNOWN =
    LaunchEvent_ProcessState_UNKNOWN;
  static constexpr ProcessState PENDING =
    LaunchEvent_ProcessState_PENDING;
  static constexpr ProcessState STARTED =
    LaunchEvent_ProcessState_STARTED;
  static constexpr ProcessState RUNNING =
    LaunchEvent_ProcessState_RUNNING;
  static constexpr ProcessState STOPPING =
    LaunchEvent_ProcessState_STOPPING;
  static constexpr ProcessState DONE =
    LaunchEvent_ProcessState_DONE;
  static constexpr ProcessState FAILED =
    LaunchEvent_ProcessState_FAILED;
  static inline bool ProcessState_IsValid(int value) {
    return LaunchEvent_ProcessState_IsValid(value);
  }
  static constexpr ProcessState ProcessState_MIN =
    LaunchEvent_ProcessState_ProcessState_MIN;
  static constexpr ProcessState ProcessState_MAX =
    LaunchEvent_ProcessState_ProcessState_MAX;
  static constexpr int ProcessState_ARRAYSIZE =
    LaunchEvent_ProcessState_ProcessState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProcessState_descriptor() {
    return LaunchEvent_ProcessState_descriptor();
  }
  template<typename T>
  static inline const std::string& ProcessState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessState_Name.");
    return LaunchEvent_ProcessState_Name(enum_t_value);
  }
  static inline bool ProcessState_Parse(const std::string& name,
      ProcessState* value) {
    return LaunchEvent_ProcessState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestStateFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .google.protobuf.Empty request_state = 1;
  bool has_request_state() const;
  private:
  bool _internal_has_request_state() const;
  public:
  void clear_request_state();
  const PROTOBUF_NAMESPACE_ID::Empty& request_state() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_request_state();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_request_state();
  void set_allocated_request_state(PROTOBUF_NAMESPACE_ID::Empty* request_state);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_request_state() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_request_state();
  public:

  // .inhumate.rti.proto.LaunchEvent.LaunchItemState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::inhumate::rti::proto::LaunchEvent_LaunchItemState& state() const;
  ::inhumate::rti::proto::LaunchEvent_LaunchItemState* release_state();
  ::inhumate::rti::proto::LaunchEvent_LaunchItemState* mutable_state();
  void set_allocated_state(::inhumate::rti::proto::LaunchEvent_LaunchItemState* state);
  private:
  const ::inhumate::rti::proto::LaunchEvent_LaunchItemState& _internal_state() const;
  ::inhumate::rti::proto::LaunchEvent_LaunchItemState* _internal_mutable_state();
  public:

  void clear_which();
  WhichCase which_case() const;
  // @@protoc_insertion_point(class_scope:inhumate.rti.proto.LaunchEvent)
 private:
  class _Internal;
  void set_has_request_state();
  void set_has_state();

  inline bool has_which() const;
  inline void clear_has_which();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichUnion {
    WhichUnion() {}
    PROTOBUF_NAMESPACE_ID::Empty* request_state_;
    ::inhumate::rti::proto::LaunchEvent_LaunchItemState* state_;
  } which_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_LaunchEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaunchEvent_LaunchItemState

// string launcher_client_id = 1;
inline void LaunchEvent_LaunchItemState::clear_launcher_client_id() {
  launcher_client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaunchEvent_LaunchItemState::launcher_client_id() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.LaunchItemState.launcher_client_id)
  return _internal_launcher_client_id();
}
inline void LaunchEvent_LaunchItemState::set_launcher_client_id(const std::string& value) {
  _internal_set_launcher_client_id(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchEvent.LaunchItemState.launcher_client_id)
}
inline std::string* LaunchEvent_LaunchItemState::mutable_launcher_client_id() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchEvent.LaunchItemState.launcher_client_id)
  return _internal_mutable_launcher_client_id();
}
inline const std::string& LaunchEvent_LaunchItemState::_internal_launcher_client_id() const {
  return launcher_client_id_.GetNoArena();
}
inline void LaunchEvent_LaunchItemState::_internal_set_launcher_client_id(const std::string& value) {
  
  launcher_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaunchEvent_LaunchItemState::set_launcher_client_id(std::string&& value) {
  
  launcher_client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LaunchEvent.LaunchItemState.launcher_client_id)
}
inline void LaunchEvent_LaunchItemState::set_launcher_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  launcher_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LaunchEvent.LaunchItemState.launcher_client_id)
}
inline void LaunchEvent_LaunchItemState::set_launcher_client_id(const char* value, size_t size) {
  
  launcher_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LaunchEvent.LaunchItemState.launcher_client_id)
}
inline std::string* LaunchEvent_LaunchItemState::_internal_mutable_launcher_client_id() {
  
  return launcher_client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaunchEvent_LaunchItemState::release_launcher_client_id() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchEvent.LaunchItemState.launcher_client_id)
  
  return launcher_client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchEvent_LaunchItemState::set_allocated_launcher_client_id(std::string* launcher_client_id) {
  if (launcher_client_id != nullptr) {
    
  } else {
    
  }
  launcher_client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launcher_client_id);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LaunchEvent.LaunchItemState.launcher_client_id)
}

// string name = 2;
inline void LaunchEvent_LaunchItemState::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaunchEvent_LaunchItemState::name() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.LaunchItemState.name)
  return _internal_name();
}
inline void LaunchEvent_LaunchItemState::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchEvent.LaunchItemState.name)
}
inline std::string* LaunchEvent_LaunchItemState::mutable_name() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchEvent.LaunchItemState.name)
  return _internal_mutable_name();
}
inline const std::string& LaunchEvent_LaunchItemState::_internal_name() const {
  return name_.GetNoArena();
}
inline void LaunchEvent_LaunchItemState::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaunchEvent_LaunchItemState::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LaunchEvent.LaunchItemState.name)
}
inline void LaunchEvent_LaunchItemState::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LaunchEvent.LaunchItemState.name)
}
inline void LaunchEvent_LaunchItemState::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LaunchEvent.LaunchItemState.name)
}
inline std::string* LaunchEvent_LaunchItemState::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaunchEvent_LaunchItemState::release_name() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchEvent.LaunchItemState.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchEvent_LaunchItemState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LaunchEvent.LaunchItemState.name)
}

// .inhumate.rti.proto.LaunchEvent.ProcessState process_state = 3;
inline void LaunchEvent_LaunchItemState::clear_process_state() {
  process_state_ = 0;
}
inline ::inhumate::rti::proto::LaunchEvent_ProcessState LaunchEvent_LaunchItemState::_internal_process_state() const {
  return static_cast< ::inhumate::rti::proto::LaunchEvent_ProcessState >(process_state_);
}
inline ::inhumate::rti::proto::LaunchEvent_ProcessState LaunchEvent_LaunchItemState::process_state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.LaunchItemState.process_state)
  return _internal_process_state();
}
inline void LaunchEvent_LaunchItemState::_internal_set_process_state(::inhumate::rti::proto::LaunchEvent_ProcessState value) {
  
  process_state_ = value;
}
inline void LaunchEvent_LaunchItemState::set_process_state(::inhumate::rti::proto::LaunchEvent_ProcessState value) {
  _internal_set_process_state(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchEvent.LaunchItemState.process_state)
}

// string link_url = 4;
inline void LaunchEvent_LaunchItemState::clear_link_url() {
  link_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaunchEvent_LaunchItemState::link_url() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_url)
  return _internal_link_url();
}
inline void LaunchEvent_LaunchItemState::set_link_url(const std::string& value) {
  _internal_set_link_url(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_url)
}
inline std::string* LaunchEvent_LaunchItemState::mutable_link_url() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_url)
  return _internal_mutable_link_url();
}
inline const std::string& LaunchEvent_LaunchItemState::_internal_link_url() const {
  return link_url_.GetNoArena();
}
inline void LaunchEvent_LaunchItemState::_internal_set_link_url(const std::string& value) {
  
  link_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaunchEvent_LaunchItemState::set_link_url(std::string&& value) {
  
  link_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_url)
}
inline void LaunchEvent_LaunchItemState::set_link_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_url)
}
inline void LaunchEvent_LaunchItemState::set_link_url(const char* value, size_t size) {
  
  link_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_url)
}
inline std::string* LaunchEvent_LaunchItemState::_internal_mutable_link_url() {
  
  return link_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaunchEvent_LaunchItemState::release_link_url() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_url)
  
  return link_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchEvent_LaunchItemState::set_allocated_link_url(std::string* link_url) {
  if (link_url != nullptr) {
    
  } else {
    
  }
  link_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_url);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_url)
}

// string link_title = 5;
inline void LaunchEvent_LaunchItemState::clear_link_title() {
  link_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaunchEvent_LaunchItemState::link_title() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_title)
  return _internal_link_title();
}
inline void LaunchEvent_LaunchItemState::set_link_title(const std::string& value) {
  _internal_set_link_title(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_title)
}
inline std::string* LaunchEvent_LaunchItemState::mutable_link_title() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_title)
  return _internal_mutable_link_title();
}
inline const std::string& LaunchEvent_LaunchItemState::_internal_link_title() const {
  return link_title_.GetNoArena();
}
inline void LaunchEvent_LaunchItemState::_internal_set_link_title(const std::string& value) {
  
  link_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaunchEvent_LaunchItemState::set_link_title(std::string&& value) {
  
  link_title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_title)
}
inline void LaunchEvent_LaunchItemState::set_link_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_title)
}
inline void LaunchEvent_LaunchItemState::set_link_title(const char* value, size_t size) {
  
  link_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_title)
}
inline std::string* LaunchEvent_LaunchItemState::_internal_mutable_link_title() {
  
  return link_title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaunchEvent_LaunchItemState::release_link_title() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_title)
  
  return link_title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchEvent_LaunchItemState::set_allocated_link_title(std::string* link_title) {
  if (link_title != nullptr) {
    
  } else {
    
  }
  link_title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_title);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_title)
}

// string link_description = 6;
inline void LaunchEvent_LaunchItemState::clear_link_description() {
  link_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaunchEvent_LaunchItemState::link_description() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_description)
  return _internal_link_description();
}
inline void LaunchEvent_LaunchItemState::set_link_description(const std::string& value) {
  _internal_set_link_description(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_description)
}
inline std::string* LaunchEvent_LaunchItemState::mutable_link_description() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_description)
  return _internal_mutable_link_description();
}
inline const std::string& LaunchEvent_LaunchItemState::_internal_link_description() const {
  return link_description_.GetNoArena();
}
inline void LaunchEvent_LaunchItemState::_internal_set_link_description(const std::string& value) {
  
  link_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaunchEvent_LaunchItemState::set_link_description(std::string&& value) {
  
  link_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_description)
}
inline void LaunchEvent_LaunchItemState::set_link_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_description)
}
inline void LaunchEvent_LaunchItemState::set_link_description(const char* value, size_t size) {
  
  link_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_description)
}
inline std::string* LaunchEvent_LaunchItemState::_internal_mutable_link_description() {
  
  return link_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaunchEvent_LaunchItemState::release_link_description() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_description)
  
  return link_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchEvent_LaunchItemState::set_allocated_link_description(std::string* link_description) {
  if (link_description != nullptr) {
    
  } else {
    
  }
  link_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_description);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LaunchEvent.LaunchItemState.link_description)
}

// string error = 7;
inline void LaunchEvent_LaunchItemState::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaunchEvent_LaunchItemState::error() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.LaunchItemState.error)
  return _internal_error();
}
inline void LaunchEvent_LaunchItemState::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:inhumate.rti.proto.LaunchEvent.LaunchItemState.error)
}
inline std::string* LaunchEvent_LaunchItemState::mutable_error() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchEvent.LaunchItemState.error)
  return _internal_mutable_error();
}
inline const std::string& LaunchEvent_LaunchItemState::_internal_error() const {
  return error_.GetNoArena();
}
inline void LaunchEvent_LaunchItemState::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaunchEvent_LaunchItemState::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inhumate.rti.proto.LaunchEvent.LaunchItemState.error)
}
inline void LaunchEvent_LaunchItemState::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inhumate.rti.proto.LaunchEvent.LaunchItemState.error)
}
inline void LaunchEvent_LaunchItemState::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inhumate.rti.proto.LaunchEvent.LaunchItemState.error)
}
inline std::string* LaunchEvent_LaunchItemState::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaunchEvent_LaunchItemState::release_error() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchEvent.LaunchItemState.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchEvent_LaunchItemState::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:inhumate.rti.proto.LaunchEvent.LaunchItemState.error)
}

// -------------------------------------------------------------------

// LaunchEvent

// .google.protobuf.Empty request_state = 1;
inline bool LaunchEvent::_internal_has_request_state() const {
  return which_case() == kRequestState;
}
inline bool LaunchEvent::has_request_state() const {
  return _internal_has_request_state();
}
inline void LaunchEvent::set_has_request_state() {
  _oneof_case_[0] = kRequestState;
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchEvent::release_request_state() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchEvent.request_state)
  if (_internal_has_request_state()) {
    clear_has_which();
      PROTOBUF_NAMESPACE_ID::Empty* temp = which_.request_state_;
    which_.request_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& LaunchEvent::_internal_request_state() const {
  return _internal_has_request_state()
      ? *which_.request_state_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& LaunchEvent::request_state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.request_state)
  return _internal_request_state();
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchEvent::_internal_mutable_request_state() {
  if (!_internal_has_request_state()) {
    clear_which();
    set_has_request_state();
    which_.request_state_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(
        GetArenaNoVirtual());
  }
  return which_.request_state_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* LaunchEvent::mutable_request_state() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchEvent.request_state)
  return _internal_mutable_request_state();
}

// .inhumate.rti.proto.LaunchEvent.LaunchItemState state = 2;
inline bool LaunchEvent::_internal_has_state() const {
  return which_case() == kState;
}
inline bool LaunchEvent::has_state() const {
  return _internal_has_state();
}
inline void LaunchEvent::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void LaunchEvent::clear_state() {
  if (_internal_has_state()) {
    delete which_.state_;
    clear_has_which();
  }
}
inline ::inhumate::rti::proto::LaunchEvent_LaunchItemState* LaunchEvent::release_state() {
  // @@protoc_insertion_point(field_release:inhumate.rti.proto.LaunchEvent.state)
  if (_internal_has_state()) {
    clear_has_which();
      ::inhumate::rti::proto::LaunchEvent_LaunchItemState* temp = which_.state_;
    which_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::inhumate::rti::proto::LaunchEvent_LaunchItemState& LaunchEvent::_internal_state() const {
  return _internal_has_state()
      ? *which_.state_
      : *reinterpret_cast< ::inhumate::rti::proto::LaunchEvent_LaunchItemState*>(&::inhumate::rti::proto::_LaunchEvent_LaunchItemState_default_instance_);
}
inline const ::inhumate::rti::proto::LaunchEvent_LaunchItemState& LaunchEvent::state() const {
  // @@protoc_insertion_point(field_get:inhumate.rti.proto.LaunchEvent.state)
  return _internal_state();
}
inline ::inhumate::rti::proto::LaunchEvent_LaunchItemState* LaunchEvent::_internal_mutable_state() {
  if (!_internal_has_state()) {
    clear_which();
    set_has_state();
    which_.state_ = CreateMaybeMessage< ::inhumate::rti::proto::LaunchEvent_LaunchItemState >(
        GetArenaNoVirtual());
  }
  return which_.state_;
}
inline ::inhumate::rti::proto::LaunchEvent_LaunchItemState* LaunchEvent::mutable_state() {
  // @@protoc_insertion_point(field_mutable:inhumate.rti.proto.LaunchEvent.state)
  return _internal_mutable_state();
}

inline bool LaunchEvent::has_which() const {
  return which_case() != WHICH_NOT_SET;
}
inline void LaunchEvent::clear_has_which() {
  _oneof_case_[0] = WHICH_NOT_SET;
}
inline LaunchEvent::WhichCase LaunchEvent::which_case() const {
  return LaunchEvent::WhichCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rti
}  // namespace inhumate

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::inhumate::rti::proto::LaunchEvent_ProcessState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inhumate::rti::proto::LaunchEvent_ProcessState>() {
  return ::inhumate::rti::proto::LaunchEvent_ProcessState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LaunchEvent_2eproto
